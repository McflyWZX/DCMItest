
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b88c  0800b88c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b894  0800b894  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b89c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a33c  24000010  0800b8ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400a34c  0800b8ac  0002a34c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf19  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045e8  00000000  00000000  0004cf57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  00051540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  00052c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039b62  00000000  00000000  000541c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000188aa  00000000  00000000  0008dd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00168efc  00000000  00000000  000a65d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020f4d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006118  00000000  00000000  0020f54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b4b4 	.word	0x0800b4b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b4b4 	.word	0x0800b4b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DCMI_Init+0x60>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_DCMI_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_DCMI_Init+0x60>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DCMI_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DCMI_Init+0x60>)
 8000608:	2208      	movs	r2, #8
 800060a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_DCMI_Init+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_DCMI_Init+0x60>)
 8000626:	f001 fa37 	bl	8001a98 <HAL_DCMI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fc3e 	bl	8000eb0 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2400a0a4 	.word	0x2400a0a4
 800063c:	48020000 	.word	0x48020000

08000640 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a7a      	ldr	r2, [pc, #488]	; (8000848 <HAL_DCMI_MspInit+0x208>)
 800065e:	4293      	cmp	r3, r2
 8000660:	f040 80ed 	bne.w	800083e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000664:	4b79      	ldr	r3, [pc, #484]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066a:	4a78      	ldr	r2, [pc, #480]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000674:	4b75      	ldr	r3, [pc, #468]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	623b      	str	r3, [r7, #32]
 8000680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a70      	ldr	r2, [pc, #448]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b6e      	ldr	r3, [pc, #440]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b6a      	ldr	r3, [pc, #424]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a69      	ldr	r2, [pc, #420]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b63      	ldr	r3, [pc, #396]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a61      	ldr	r2, [pc, #388]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a5a      	ldr	r2, [pc, #360]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000718:	2370      	movs	r3, #112	; 0x70
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000728:	230d      	movs	r3, #13
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <HAL_DCMI_MspInit+0x210>)
 8000734:	f004 ffde 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000748:	230d      	movs	r3, #13
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4840      	ldr	r0, [pc, #256]	; (8000854 <HAL_DCMI_MspInit+0x214>)
 8000754:	f004 ffce 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800076a:	230d      	movs	r3, #13
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <HAL_DCMI_MspInit+0x218>)
 8000776:	f004 ffbd 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077a:	2308      	movs	r3, #8
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800078a:	230d      	movs	r3, #13
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <HAL_DCMI_MspInit+0x21c>)
 8000796:	f004 ffad 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007aa:	230d      	movs	r3, #13
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	482a      	ldr	r0, [pc, #168]	; (8000860 <HAL_DCMI_MspInit+0x220>)
 80007b6:	f004 ff9d 	bl	80056f4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_DCMI_MspInit+0x228>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c2:	224b      	movs	r2, #75	; 0x4b
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000802:	2203      	movs	r2, #3
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000814:	f001 fc84 	bl	8002120 <HAL_DMA_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800081e:	f000 fb47 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	204e      	movs	r0, #78	; 0x4e
 8000834:	f001 f8fb 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f001 f912 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48020000 	.word	0x48020000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021000 	.word	0x58021000
 8000854:	58020000 	.word	0x58020000
 8000858:	58020800 	.word	0x58020800
 800085c:	58020c00 	.word	0x58020c00
 8000860:	58020400 	.word	0x58020400
 8000864:	2400a02c 	.word	0x2400a02c
 8000868:	40020010 	.word	0x40020010

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x3c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200b      	movs	r0, #11
 8000896:	f001 f8ca 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800089a:	200b      	movs	r0, #11
 800089c:	f001 f8e1 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024400 	.word	0x58024400

080008ac <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	4b6e      	ldr	r3, [pc, #440]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	4a6c      	ldr	r2, [pc, #432]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d2:	4b6a      	ldr	r3, [pc, #424]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e0:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a65      	ldr	r2, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a5d      	ldr	r2, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b5b      	ldr	r3, [pc, #364]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091c:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a56      	ldr	r2, [pc, #344]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a4e      	ldr	r2, [pc, #312]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x1d0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2104      	movs	r1, #4
 800097a:	4841      	ldr	r0, [pc, #260]	; (8000a80 <MX_GPIO_Init+0x1d4>)
 800097c:	f005 f86a 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2120      	movs	r1, #32
 8000984:	483f      	ldr	r0, [pc, #252]	; (8000a84 <MX_GPIO_Init+0x1d8>)
 8000986:	f005 f865 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2103      	movs	r1, #3
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <MX_GPIO_Init+0x1dc>)
 8000990:	f005 f860 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800099a:	483b      	ldr	r0, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x1dc>)
 800099c:	f005 f85a 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	4839      	ldr	r0, [pc, #228]	; (8000a8c <MX_GPIO_Init+0x1e0>)
 80009a6:	f005 f855 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009aa:	2304      	movs	r3, #4
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <MX_GPIO_Init+0x1d4>)
 80009c2:	f004 fe97 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4829      	ldr	r0, [pc, #164]	; (8000a84 <MX_GPIO_Init+0x1d8>)
 80009de:	f004 fe89 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 80009e2:	f247 0303 	movw	r3, #28675	; 0x7003
 80009e6:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_GPIO_Init+0x1dc>)
 80009fc:	f004 fe7a 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <MX_GPIO_Init+0x1dc>)
 8000a14:	f004 fe6e 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4815      	ldr	r0, [pc, #84]	; (8000a88 <MX_GPIO_Init+0x1dc>)
 8000a32:	f004 fe5f 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MX_GPIO_Init+0x1d4>)
 8000a54:	f004 fe4e 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_GPIO_Init+0x1e0>)
 8000a70:	f004 fe40 	bl	80056f4 <HAL_GPIO_Init>

}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58020000 	.word	0x58020000
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58020400 	.word	0x58020400
 8000a8c:	58020c00 	.word	0x58020c00

08000a90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000acc:	f004 ffdc 	bl	8005a88 <HAL_I2C_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ad6:	f000 f9eb 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ade:	f005 fc39 	bl	8006354 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f9e2 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000af0:	f005 fc7b 	bl	80063ea <HAL_I2CEx_ConfigDigitalFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 f9d9 	bl	8000eb0 <Error_Handler>
  }

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2400a0f4 	.word	0x2400a0f4
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	009034b6 	.word	0x009034b6

08000b10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <MX_I2C2_Init+0x78>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <MX_I2C2_Init+0x7c>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b4c:	f004 ff9c 	bl	8005a88 <HAL_I2C_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b56:	f000 f9ab 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b5e:	f005 fbf9 	bl	8006354 <HAL_I2CEx_ConfigAnalogFilter>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b68:	f000 f9a2 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_I2C2_Init+0x74>)
 8000b70:	f005 fc3b 	bl	80063ea <HAL_I2CEx_ConfigDigitalFilter>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 f999 	bl	8000eb0 <Error_Handler>
  }

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2400a140 	.word	0x2400a140
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	10c0ecff 	.word	0x10c0ecff

08000b90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a35      	ldr	r2, [pc, #212]	; (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12f      	bne.n	8000c12 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	4a33      	ldr	r2, [pc, #204]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <HAL_I2C_MspInit+0xfc>)
 8000bee:	f004 fd81 	bl	80056f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c10:	e033      	b.n	8000c7a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <HAL_I2C_MspInit+0x100>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d12e      	bne.n	8000c7a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <HAL_I2C_MspInit+0xfc>)
 8000c58:	f004 fd4c 	bl	80056f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005400 	.word	0x40005400
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020400 	.word	0x58020400
 8000c90:	40005800 	.word	0x40005800

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 fd2e 	bl	80016f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f842 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff fe04 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca4:	f7ff fde2 	bl	800086c <MX_DMA_Init>
  MX_DCMI_Init();
 8000ca8:	f7ff fc96 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000cac:	f7ff fef0 	bl	8000a90 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cb0:	f7ff ff2e 	bl	8000b10 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cb4:	f000 f904 	bl	8000ec0 <MX_SPI1_Init>
  MX_UART4_Init();
 8000cb8:	f000 fc5c 	bl	8001574 <MX_UART4_Init>
  MX_TIM4_Init();
 8000cbc:	f000 fa80 	bl	80011c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000cc0:	f000 fb0c 	bl	80012dc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <main+0x7c>)
 8000cca:	f004 fec3 	bl	8005a54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f000 fda4 	bl	800181c <HAL_Delay>
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <main+0x7c>)
 8000cda:	f004 febb 	bl	8005a54 <HAL_GPIO_WritePin>
  HAL_Delay(400);
 8000cde:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ce2:	f000 fd9b 	bl	800181c <HAL_Delay>
  if(OV2640_Init(&hi2c1, &hdcmi, &huart4) == 0)
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <main+0x80>)
 8000ce8:	490b      	ldr	r1, [pc, #44]	; (8000d18 <main+0x84>)
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <main+0x88>)
 8000cec:	f00a f930 	bl	800af50 <OV2640_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <main+0x6e>
  {
	  HAL_GPIO_WritePin(LED_DCMI_GPIO_Port, LED_DCMI_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <main+0x8c>)
 8000cfe:	f004 fea9 	bl	8005a54 <HAL_GPIO_WritePin>
  }
  HAL_Delay(2000);
 8000d02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d06:	f000 fd89 	bl	800181c <HAL_Delay>
  StartOV2640();
 8000d0a:	f00a fb49 	bl	800b3a0 <StartOV2640>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <main+0x7a>
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	2400a2ac 	.word	0x2400a2ac
 8000d18:	2400a0a4 	.word	0x2400a0a4
 8000d1c:	2400a0f4 	.word	0x2400a0f4
 8000d20:	58020400 	.word	0x58020400

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0cc      	sub	sp, #304	; 0x130
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d2e:	224c      	movs	r2, #76	; 0x4c
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00a fbb6 	bl	800b4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00a fbaf 	bl	800b4a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	23bc      	movs	r3, #188	; 0xbc
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f00a fba7 	bl	800b4a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d56:	2002      	movs	r0, #2
 8000d58:	f005 fb94 	bl	8006484 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <SystemClock_Config+0x184>)
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <SystemClock_Config+0x184>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <SystemClock_Config+0x184>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	f003 0201 	and.w	r2, r3, #1
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <SystemClock_Config+0x188>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <SystemClock_Config+0x188>)
 8000d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <SystemClock_Config+0x188>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d96:	bf00      	nop
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <SystemClock_Config+0x188>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da4:	d1f8      	bne.n	8000d98 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000dd2:	23c8      	movs	r3, #200	; 0xc8
 8000dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dea:	2308      	movs	r3, #8
 8000dec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 fb79 	bl	80064f8 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e0c:	f000 f850 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	233f      	movs	r3, #63	; 0x3f
 8000e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e22:	2308      	movs	r3, #8
 8000e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e28:	2340      	movs	r3, #64	; 0x40
 8000e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e2e:	2340      	movs	r3, #64	; 0x40
 8000e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 ff65 	bl	8006d18 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e54:	f000 f82c 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e60:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fb37 	bl	80074f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e8c:	f000 f810 	bl	8000eb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f006 f8f4 	bl	8007084 <HAL_RCC_MCOConfig>
}
 8000e9c:	bf00      	nop
 8000e9e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	58000400 	.word	0x58000400
 8000eac:	58024800 	.word	0x58024800

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <MX_SPI1_Init+0xa8>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ecc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ed0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000eec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ef0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000ef4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ef8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0xa4>)
 8000f52:	f007 fdcf 	bl	8008af4 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f5c:	f7ff ffa8 	bl	8000eb0 <Error_Handler>
  }

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2400a18c 	.word	0x2400a18c
 8000f68:	40013000 	.word	0x40013000

08000f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <HAL_SPI_MspInit+0xc8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d14d      	bne.n	800102a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000f96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_SPI_MspInit+0xcc>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fe8:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <HAL_SPI_MspInit+0xd0>)
 8001006:	f004 fb75 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_SPI_MspInit+0xd4>)
 8001026:	f004 fb65 	bl	80056f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013000 	.word	0x40013000
 8001038:	58024400 	.word	0x58024400
 800103c:	58020000 	.word	0x58020000
 8001040:	58020400 	.word	0x58020400

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_MspInit+0x30>)
 800104c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x30>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x30>)
 800105c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58024400 	.word	0x58024400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 fb86 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DMA1_Stream0_IRQHandler+0x10>)
 80010da:	f002 fb49 	bl	8003770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2400a02c 	.word	0x2400a02c

080010e8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <DCMI_IRQHandler+0x10>)
 80010ee:	f000 fec7 	bl	8001e80 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2400a0a4 	.word	0x2400a0a4

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemInit+0xac>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemInit+0xac>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <SystemInit+0xb0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a25      	ldr	r2, [pc, #148]	; (80011ac <SystemInit+0xb0>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemInit+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemInit+0xb0>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4921      	ldr	r1, [pc, #132]	; (80011ac <SystemInit+0xb0>)
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <SystemInit+0xb4>)
 800112a:	4013      	ands	r3, r2
 800112c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemInit+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <SystemInit+0xb0>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <SystemInit+0xb0>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <SystemInit+0xb0>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <SystemInit+0xb0>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <SystemInit+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <SystemInit+0xb0>)
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <SystemInit+0xb0>)
 800115a:	2200      	movs	r2, #0
 800115c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <SystemInit+0xb0>)
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <SystemInit+0xb0>)
 8001166:	2200      	movs	r2, #0
 8001168:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <SystemInit+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <SystemInit+0xb0>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SystemInit+0xb0>)
 800117e:	2200      	movs	r2, #0
 8001180:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <SystemInit+0xb8>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <SystemInit+0xbc>)
 8001188:	4013      	ands	r3, r2
 800118a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800118e:	d202      	bcs.n	8001196 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <SystemInit+0xc0>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SystemInit+0xac>)
 8001198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800119c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	5c001000 	.word	0x5c001000
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	51008108 	.word	0x51008108

080011c0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <MX_TIM4_Init+0x114>)
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <MX_TIM4_Init+0x118>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_TIM4_Init+0x114>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_TIM4_Init+0x114>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001218:	482e      	ldr	r0, [pc, #184]	; (80012d4 <MX_TIM4_Init+0x114>)
 800121a:	f007 fd7e 	bl	8008d1a <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001224:	f7ff fe44 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	4619      	mov	r1, r3
 8001234:	4827      	ldr	r0, [pc, #156]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001236:	f008 f80f 	bl	8009258 <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001240:	f7ff fe36 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001244:	4823      	ldr	r0, [pc, #140]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001246:	f007 fe20 	bl	8008e8a <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001250:	f7ff fe2e 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <MX_TIM4_Init+0x114>)
 8001264:	f008 fcce 	bl	8009c04 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800126e:	f7ff fe1f 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MX_TIM4_Init+0x114>)
 800128a:	f007 fed5 	bl	8009038 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001294:	f7ff fe0c 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_TIM4_Init+0x114>)
 80012a0:	f007 feca 	bl	8009038 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80012aa:	f7ff fe01 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_TIM4_Init+0x114>)
 80012b6:	f007 febf 	bl	8009038 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80012c0:	f7ff fdf6 	bl	8000eb0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM4_Init+0x114>)
 80012c6:	f000 f8cf 	bl	8001468 <HAL_TIM_MspPostInit>

}
 80012ca:	bf00      	nop
 80012cc:	3738      	adds	r7, #56	; 0x38
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400a214 	.word	0x2400a214
 80012d8:	40000800 	.word	0x40000800

080012dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_TIM5_Init+0x110>)
 8001310:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <MX_TIM5_Init+0x114>)
 8001312:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_TIM5_Init+0x110>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <MX_TIM5_Init+0x110>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <MX_TIM5_Init+0x110>)
 8001322:	f04f 32ff 	mov.w	r2, #4294967295
 8001326:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <MX_TIM5_Init+0x110>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_TIM5_Init+0x110>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001334:	482d      	ldr	r0, [pc, #180]	; (80013ec <MX_TIM5_Init+0x110>)
 8001336:	f007 fcf0 	bl	8008d1a <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001340:	f7ff fdb6 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	4619      	mov	r1, r3
 8001350:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_TIM5_Init+0x110>)
 8001352:	f007 ff81 	bl	8009258 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800135c:	f7ff fda8 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001360:	4822      	ldr	r0, [pc, #136]	; (80013ec <MX_TIM5_Init+0x110>)
 8001362:	f007 fd31 	bl	8008dc8 <HAL_TIM_OC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800136c:	f7ff fda0 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001370:	481e      	ldr	r0, [pc, #120]	; (80013ec <MX_TIM5_Init+0x110>)
 8001372:	f007 fd8a 	bl	8008e8a <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 800137c:	f7ff fd98 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <MX_TIM5_Init+0x110>)
 8001390:	f008 fc38 	bl	8009c04 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 800139a:	f7ff fd89 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2208      	movs	r2, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM5_Init+0x110>)
 80013b6:	f007 fdc9 	bl	8008f4c <HAL_TIM_OC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80013c0:	f7ff fd76 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	220c      	movs	r2, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM5_Init+0x110>)
 80013d0:	f007 fe32 	bl	8009038 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 80013da:	f7ff fd69 	bl	8000eb0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM5_Init+0x110>)
 80013e0:	f000 f842 	bl	8001468 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	; 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2400a260 	.word	0x2400a260
 80013f0:	40000c00 	.word	0x40000c00

080013f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_TIM_Base_MspInit+0x68>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10f      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001424:	e013      	b.n	800144e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM5)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_TIM_Base_MspInit+0x70>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d10e      	bne.n	800144e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40000800 	.word	0x40000800
 8001460:	58024400 	.word	0x58024400
 8001464:	40000c00 	.word	0x40000c00

08001468 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <HAL_TIM_MspPostInit+0xf4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d140      	bne.n	800150c <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a2c      	ldr	r2, [pc, #176]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014d8:	2302      	movs	r3, #2
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <HAL_TIM_MspPostInit+0xfc>)
 80014e4:	f004 f906 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014fa:	2302      	movs	r3, #2
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <HAL_TIM_MspPostInit+0x100>)
 8001506:	f004 f8f5 	bl	80056f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800150a:	e023      	b.n	8001554 <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM5)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_TIM_MspPostInit+0x104>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11e      	bne.n	8001554 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_TIM_MspPostInit+0xf8>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001534:	2308      	movs	r3, #8
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001544:	2302      	movs	r3, #2
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <HAL_TIM_MspPostInit+0x108>)
 8001550:	f004 f8d0 	bl	80056f4 <HAL_GPIO_Init>
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40000800 	.word	0x40000800
 8001560:	58024400 	.word	0x58024400
 8001564:	58020c00 	.word	0x58020c00
 8001568:	58020400 	.word	0x58020400
 800156c:	40000c00 	.word	0x40000c00
 8001570:	58020000 	.word	0x58020000

08001574 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_UART4_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <MX_UART4_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1500000;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_UART4_Init+0x90>)
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <MX_UART4_Init+0x98>)
 8001582:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_UART4_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_UART4_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_UART4_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_UART4_Init+0x90>)
 8001598:	220c      	movs	r2, #12
 800159a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_UART4_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_UART4_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_UART4_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_UART4_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_UART4_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <MX_UART4_Init+0x90>)
 80015bc:	f008 fbaa 	bl	8009d14 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80015c6:	f7ff fc73 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_UART4_Init+0x90>)
 80015ce:	f009 fbda 	bl	800ad86 <HAL_UARTEx_SetTxFifoThreshold>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80015d8:	f7ff fc6a 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <MX_UART4_Init+0x90>)
 80015e0:	f009 fc0f 	bl	800ae02 <HAL_UARTEx_SetRxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80015ea:	f7ff fc61 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_UART4_Init+0x90>)
 80015f0:	f009 fb90 	bl	800ad14 <HAL_UARTEx_DisableFifoMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80015fa:	f7ff fc59 	bl	8000eb0 <Error_Handler>
  }

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2400a2ac 	.word	0x2400a2ac
 8001608:	40004c00 	.word	0x40004c00
 800160c:	0016e360 	.word	0x0016e360

08001610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_UART_MspInit+0x88>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12d      	bne.n	800168e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_UART_MspInit+0x8c>)
 800163a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800166e:	2303      	movs	r3, #3
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800167e:	2308      	movs	r3, #8
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x90>)
 800168a:	f004 f833 	bl	80056f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40004c00 	.word	0x40004c00
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020000 	.word	0x58020000

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016aa:	e003      	b.n	80016b4 <LoopCopyDataInit>

080016ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016b2:	3104      	adds	r1, #4

080016b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016bc:	d3f6      	bcc.n	80016ac <CopyDataInit>
  ldr  r2, =_sbss
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016c0:	e002      	b.n	80016c8 <LoopFillZerobss>

080016c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016c4:	f842 3b04 	str.w	r3, [r2], #4

080016c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016cc:	d3f9      	bcc.n	80016c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ce:	f7ff fd15 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f009 fec3 	bl	800b45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fadd 	bl	8000c94 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016e0:	0800b89c 	.word	0x0800b89c
  ldr  r0, =_sdata
 80016e4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80016e8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80016ec:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80016f0:	2400a34c 	.word	0x2400a34c

080016f4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC3_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f98a 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001704:	f005 fd28 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_Init+0x68>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_Init+0x6c>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa21 f303 	lsr.w	r3, r1, r3
 8001720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_Init+0x68>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_Init+0x6c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_Init+0x70>)
 800173a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_Init+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f814 	bl	8001770 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e002      	b.n	8001758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001752:	f7ff fc77 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58024400 	.word	0x58024400
 8001764:	0800b4dc 	.word	0x0800b4dc
 8001768:	24000004 	.word	0x24000004
 800176c:	24000000 	.word	0x24000000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_InitTick+0x60>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e021      	b.n	80017c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_InitTick+0x64>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f96f 	bl	8001a7e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f939 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x68>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2400000c 	.word	0x2400000c
 80017d4:	24000000 	.word	0x24000000
 80017d8:	24000008 	.word	0x24000008

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2400000c 	.word	0x2400000c
 8001800:	2400a338 	.word	0x2400a338

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2400a338 	.word	0x2400a338

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_Delay+0x40>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2400000c 	.word	0x2400000c

08001860 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetREVID+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0c1b      	lsrs	r3, r3, #16
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	5c001000 	.word	0x5c001000

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	05fa0000 	.word	0x05fa0000

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff40 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff90 	bl	800196c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff33 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa4 	bl	80019d4 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e069      	b.n	8001b7e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fdc2 	bl	8000640 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_DCMI_Init+0xf0>)
 8001ade:	400b      	ands	r3, r1
 8001ae0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001af6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001b02:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b1a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b26:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d112      	bne.n	8001b5e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7f1b      	ldrb	r3, [r3, #28]
 8001b3c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7f5b      	ldrb	r3, [r3, #29]
 8001b42:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b44:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f9b      	ldrb	r3, [r3, #30]
 8001b4a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b4c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7fdb      	ldrb	r3, [r3, #31]
 8001b54:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b5a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b5c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 021e 	orr.w	r2, r2, #30
 8001b6c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	ffe0f007 	.word	0xffe0f007

08001b8c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DCMI_Start_DMA+0x1c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0ab      	b.n	8001d00 <HAL_DCMI_Start_DMA+0x174>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0202 	bic.w	r2, r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <HAL_DCMI_Start_DMA+0x17c>)
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf4:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <HAL_DCMI_Start_DMA+0x180>)
 8001bf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d219      	bcs.n	8001c54 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3328      	adds	r3, #40	; 0x28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	f000 fdd2 	bl	80027d8 <HAL_DMA_Start_IT>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d055      	beq.n	8001ce6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2240      	movs	r2, #64	; 0x40
 8001c3e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e055      	b.n	8001d00 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c58:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_DCMI_Start_DMA+0x17c>)
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001c6e:	e009      	b.n	8001c84 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	085a      	lsrs	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	005a      	lsls	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d2f0      	bcs.n	8001c70 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	1e9a      	subs	r2, r3, #2
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3328      	adds	r3, #40	; 0x28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	f003 f867 	bl	8004d94 <HAL_DMAEx_MultiBufferStart_IT>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00c      	b.n	8001d00 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	08001fc1 	.word	0x08001fc1
 8001d0c:	080020e7 	.word	0x080020e7

08001d10 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_DCMI_Stop+0xb8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <HAL_DCMI_Stop+0xbc>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_DCMI_Stop+0x30>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e03f      	b.n	8001dc0 <HAL_DCMI_Stop+0xb0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d108      	bne.n	8001d7e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8001d7c:	e006      	b.n	8001d8c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 ff83 	bl	8002cac <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24000000 	.word	0x24000000
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_DCMI_Suspend+0xa8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_DCMI_Suspend+0xac>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a5b      	lsrs	r3, r3, #9
 8001de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_DCMI_Suspend+0x30>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e034      	b.n	8001e6a <HAL_DCMI_Suspend+0x9a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d125      	bne.n	8001e60 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10c      	bne.n	8001e52 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	72fb      	strb	r3, [r7, #11]
        break;
 8001e50:	e006      	b.n	8001e60 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001e68:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	24000000 	.word	0x24000000
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_DCMI_IRQHandler+0x100>)
 8001ebc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 fa10 	bl	80032e8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_DCMI_IRQHandler+0x100>)
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f9f4 	bl	80032e8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f840 	bl	8001f98 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2208      	movs	r2, #8
 8001f28:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f83e 	bl	8001fac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01d      	beq.n	8001f76 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d107      	bne.n	8001f58 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 021e 	bic.w	r2, r2, #30
 8001f56:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f009 fa35 	bl	800b3e0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	080020e7 	.word	0x080020e7

08001f84 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d043      	beq.n	800205e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d118      	bne.n	8002022 <DCMI_DMAXferCplt+0x62>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	00da      	lsls	r2, r3, #3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	f003 fa1d 	bl	8005450 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
 8002020:	e044      	b.n	80020ac <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d13c      	bne.n	80020ac <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	00da      	lsls	r2, r3, #3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4413      	add	r3, r2
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f003 f9ff 	bl	8005450 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
 800205c:	e026      	b.n	80020ac <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e017      	b.n	80020ac <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10f      	bne.n	80020ac <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	0099      	lsls	r1, r3, #2
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	440a      	add	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d112      	bne.n	80020de <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d009      	beq.n	8002112 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff ff36 	bl	8001f84 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fb6c 	bl	8001804 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e316      	b.n	8002766 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_DMA_Init+0x1b8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d04a      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_DMA_Init+0x1bc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d045      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_DMA_Init+0x1c0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d040      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <HAL_DMA_Init+0x1c4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d03b      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_DMA_Init+0x1c8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d036      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_DMA_Init+0x1cc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d031      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_DMA_Init+0x1d0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02c      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <HAL_DMA_Init+0x1d4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d027      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_DMA_Init+0x1d8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d022      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a59      	ldr	r2, [pc, #356]	; (80022fc <HAL_DMA_Init+0x1dc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d01d      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a57      	ldr	r2, [pc, #348]	; (8002300 <HAL_DMA_Init+0x1e0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d018      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_DMA_Init+0x1e4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_DMA_Init+0x1e8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00e      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a53      	ldr	r2, [pc, #332]	; (800230c <HAL_DMA_Init+0x1ec>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_DMA_Init+0x1f0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_Init+0xb8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_DMA_Init+0x1f4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d101      	bne.n	80021dc <HAL_DMA_Init+0xbc>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_DMA_Init+0xbe>
 80021dc:	2300      	movs	r3, #0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 813b 	beq.w	800245a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <HAL_DMA_Init+0x1b8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Init+0x174>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <HAL_DMA_Init+0x1bc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_DMA_Init+0x1c0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <HAL_DMA_Init+0x1c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Init+0x174>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_DMA_Init+0x1c8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_DMA_Init+0x1cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <HAL_DMA_Init+0x1d0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Init+0x174>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_DMA_Init+0x1d4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <HAL_DMA_Init+0x1d8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Init+0x174>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_DMA_Init+0x1dc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a28      	ldr	r2, [pc, #160]	; (8002300 <HAL_DMA_Init+0x1e0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_DMA_Init+0x1e4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Init+0x174>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <HAL_DMA_Init+0x1e8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_DMA_Init+0x1ec>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Init+0x174>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_DMA_Init+0x1f0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Init+0x174>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_DMA_Init+0x1f4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <HAL_DMA_Init+0x186>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e007      	b.n	80022b6 <HAL_DMA_Init+0x196>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022b6:	e02f      	b.n	8002318 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b8:	f7ff faa4 	bl	8001804 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d928      	bls.n	8002318 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2203      	movs	r2, #3
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e246      	b.n	8002766 <HAL_DMA_Init+0x646>
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1c8      	bne.n	80022b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_DMA_Init+0x420>)
 8002332:	4013      	ands	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800233e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4313      	orrs	r3, r2
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_DMA_Init+0x424>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_DMA_Init+0x428>)
 8002382:	4013      	ands	r3, r2
 8002384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002388:	d328      	bcc.n	80023dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b28      	cmp	r3, #40	; 0x28
 8002390:	d903      	bls.n	800239a <HAL_DMA_Init+0x27a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b2e      	cmp	r3, #46	; 0x2e
 8002398:	d917      	bls.n	80023ca <HAL_DMA_Init+0x2aa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b3e      	cmp	r3, #62	; 0x3e
 80023a0:	d903      	bls.n	80023aa <HAL_DMA_Init+0x28a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b42      	cmp	r3, #66	; 0x42
 80023a8:	d90f      	bls.n	80023ca <HAL_DMA_Init+0x2aa>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b46      	cmp	r3, #70	; 0x46
 80023b0:	d903      	bls.n	80023ba <HAL_DMA_Init+0x29a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b48      	cmp	r3, #72	; 0x48
 80023b8:	d907      	bls.n	80023ca <HAL_DMA_Init+0x2aa>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b4e      	cmp	r3, #78	; 0x4e
 80023c0:	d905      	bls.n	80023ce <HAL_DMA_Init+0x2ae>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b52      	cmp	r3, #82	; 0x52
 80023c8:	d801      	bhi.n	80023ce <HAL_DMA_Init+0x2ae>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_DMA_Init+0x2b0>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b04      	cmp	r3, #4
 8002404:	d117      	bne.n	8002436 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f002 fb31 	bl	8004a80 <DMA_CheckFifoParam>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e197      	b.n	8002766 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f002 fa6c 	bl	800491c <DMA_CalcBaseAndBitshift>
 8002444:	4603      	mov	r3, r0
 8002446:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e0cd      	b.n	80025f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_DMA_Init+0x42c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a39      	ldr	r2, [pc, #228]	; (8002550 <HAL_DMA_Init+0x430>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a38      	ldr	r2, [pc, #224]	; (8002554 <HAL_DMA_Init+0x434>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_DMA_Init+0x438>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a35      	ldr	r2, [pc, #212]	; (800255c <HAL_DMA_Init+0x43c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a33      	ldr	r2, [pc, #204]	; (8002560 <HAL_DMA_Init+0x440>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a32      	ldr	r2, [pc, #200]	; (8002564 <HAL_DMA_Init+0x444>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_Init+0x38a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_DMA_Init+0x448>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Init+0x38e>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_Init+0x390>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8097 	beq.w	80025e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_DMA_Init+0x42c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d021      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_Init+0x430>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01c      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_DMA_Init+0x434>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d017      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_DMA_Init+0x438>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d012      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_DMA_Init+0x43c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_DMA_Init+0x440>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d008      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_DMA_Init+0x444>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_Init+0x3e4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_DMA_Init+0x448>)
 8002502:	4293      	cmp	r3, r2
 8002504:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_DMA_Init+0x44c>)
 8002522:	4013      	ands	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d020      	beq.n	8002570 <HAL_DMA_Init+0x450>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d102      	bne.n	800253c <HAL_DMA_Init+0x41c>
 8002536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253a:	e01a      	b.n	8002572 <HAL_DMA_Init+0x452>
 800253c:	2300      	movs	r3, #0
 800253e:	e018      	b.n	8002572 <HAL_DMA_Init+0x452>
 8002540:	fe10803f 	.word	0xfe10803f
 8002544:	5c001000 	.word	0x5c001000
 8002548:	ffff0000 	.word	0xffff0000
 800254c:	58025408 	.word	0x58025408
 8002550:	5802541c 	.word	0x5802541c
 8002554:	58025430 	.word	0x58025430
 8002558:	58025444 	.word	0x58025444
 800255c:	58025458 	.word	0x58025458
 8002560:	5802546c 	.word	0x5802546c
 8002564:	58025480 	.word	0x58025480
 8002568:	58025494 	.word	0x58025494
 800256c:	fffe000f 	.word	0xfffe000f
 8002570:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68d2      	ldr	r2, [r2, #12]
 8002576:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_DMA_Init+0x650>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_DMA_Init+0x654>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f002 f9a7 	bl	800491c <DMA_CalcBaseAndBitshift>
 80025ce:	4603      	mov	r3, r0
 80025d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2201      	movs	r2, #1
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	e008      	b.n	80025f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0b7      	b.n	8002766 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5f      	ldr	r2, [pc, #380]	; (8002778 <HAL_DMA_Init+0x658>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d072      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5d      	ldr	r2, [pc, #372]	; (800277c <HAL_DMA_Init+0x65c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d06d      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5c      	ldr	r2, [pc, #368]	; (8002780 <HAL_DMA_Init+0x660>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d068      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5a      	ldr	r2, [pc, #360]	; (8002784 <HAL_DMA_Init+0x664>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d063      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_DMA_Init+0x668>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d05e      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a57      	ldr	r2, [pc, #348]	; (800278c <HAL_DMA_Init+0x66c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d059      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a56      	ldr	r2, [pc, #344]	; (8002790 <HAL_DMA_Init+0x670>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d054      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_DMA_Init+0x674>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04f      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_DMA_Init+0x678>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04a      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_DMA_Init+0x67c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d045      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a50      	ldr	r2, [pc, #320]	; (80027a0 <HAL_DMA_Init+0x680>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_DMA_Init+0x684>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d03b      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_DMA_Init+0x688>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d036      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_DMA_Init+0x68c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a4a      	ldr	r2, [pc, #296]	; (80027b0 <HAL_DMA_Init+0x690>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02c      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_DMA_Init+0x694>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d027      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_DMA_Init+0x698>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a45      	ldr	r2, [pc, #276]	; (80027bc <HAL_DMA_Init+0x69c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a44      	ldr	r2, [pc, #272]	; (80027c0 <HAL_DMA_Init+0x6a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_DMA_Init+0x6a4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_DMA_Init+0x6a8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3f      	ldr	r2, [pc, #252]	; (80027cc <HAL_DMA_Init+0x6ac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3e      	ldr	r2, [pc, #248]	; (80027d0 <HAL_DMA_Init+0x6b0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_DMA_Init+0x6b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Init+0x5ca>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_DMA_Init+0x5cc>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d032      	beq.n	8002756 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f002 fa41 	bl	8004b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d102      	bne.n	8002704 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002718:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <HAL_DMA_Init+0x624>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d80c      	bhi.n	8002744 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f002 fabe 	bl	8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e008      	b.n	8002756 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	a7fdabf8 	.word	0xa7fdabf8
 8002774:	cccccccd 	.word	0xcccccccd
 8002778:	40020010 	.word	0x40020010
 800277c:	40020028 	.word	0x40020028
 8002780:	40020040 	.word	0x40020040
 8002784:	40020058 	.word	0x40020058
 8002788:	40020070 	.word	0x40020070
 800278c:	40020088 	.word	0x40020088
 8002790:	400200a0 	.word	0x400200a0
 8002794:	400200b8 	.word	0x400200b8
 8002798:	40020410 	.word	0x40020410
 800279c:	40020428 	.word	0x40020428
 80027a0:	40020440 	.word	0x40020440
 80027a4:	40020458 	.word	0x40020458
 80027a8:	40020470 	.word	0x40020470
 80027ac:	40020488 	.word	0x40020488
 80027b0:	400204a0 	.word	0x400204a0
 80027b4:	400204b8 	.word	0x400204b8
 80027b8:	58025408 	.word	0x58025408
 80027bc:	5802541c 	.word	0x5802541c
 80027c0:	58025430 	.word	0x58025430
 80027c4:	58025444 	.word	0x58025444
 80027c8:	58025458 	.word	0x58025458
 80027cc:	5802546c 	.word	0x5802546c
 80027d0:	58025480 	.word	0x58025480
 80027d4:	58025494 	.word	0x58025494

080027d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e226      	b.n	8002c42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Start_IT+0x2a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e21f      	b.n	8002c42 <HAL_DMA_Start_IT+0x46a>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	f040 820a 	bne.w	8002c2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a68      	ldr	r2, [pc, #416]	; (80029cc <HAL_DMA_Start_IT+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04a      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_DMA_Start_IT+0x1f8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d045      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_DMA_Start_IT+0x1fc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_DMA_Start_IT+0x200>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d03b      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a62      	ldr	r2, [pc, #392]	; (80029dc <HAL_DMA_Start_IT+0x204>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d036      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a60      	ldr	r2, [pc, #384]	; (80029e0 <HAL_DMA_Start_IT+0x208>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5f      	ldr	r2, [pc, #380]	; (80029e4 <HAL_DMA_Start_IT+0x20c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d02c      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5d      	ldr	r2, [pc, #372]	; (80029e8 <HAL_DMA_Start_IT+0x210>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_DMA_Start_IT+0x214>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5a      	ldr	r2, [pc, #360]	; (80029f0 <HAL_DMA_Start_IT+0x218>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a59      	ldr	r2, [pc, #356]	; (80029f4 <HAL_DMA_Start_IT+0x21c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_DMA_Start_IT+0x220>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a56      	ldr	r2, [pc, #344]	; (80029fc <HAL_DMA_Start_IT+0x224>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_DMA_Start_IT+0x228>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_DMA_Start_IT+0x22c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Start_IT+0xee>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <HAL_DMA_Start_IT+0x230>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <HAL_DMA_Start_IT+0x100>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e007      	b.n	80028e8 <HAL_DMA_Start_IT+0x110>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f001 fe68 	bl	80045c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_DMA_Start_IT+0x1f4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04a      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a33      	ldr	r2, [pc, #204]	; (80029d0 <HAL_DMA_Start_IT+0x1f8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d045      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <HAL_DMA_Start_IT+0x1fc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d040      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <HAL_DMA_Start_IT+0x200>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d03b      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <HAL_DMA_Start_IT+0x204>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <HAL_DMA_Start_IT+0x208>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d031      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <HAL_DMA_Start_IT+0x20c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_DMA_Start_IT+0x210>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_DMA_Start_IT+0x214>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_DMA_Start_IT+0x218>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01d      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <HAL_DMA_Start_IT+0x21c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d018      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a24      	ldr	r2, [pc, #144]	; (80029f8 <HAL_DMA_Start_IT+0x220>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_DMA_Start_IT+0x224>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <HAL_DMA_Start_IT+0x228>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_DMA_Start_IT+0x22c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_DMA_Start_IT+0x1bc>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_DMA_Start_IT+0x230>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Start_IT+0x1c0>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_DMA_Start_IT+0x1c2>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 021e 	bic.w	r2, r3, #30
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0216 	orr.w	r2, r2, #22
 80029b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03e      	beq.n	8002a38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0208 	orr.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e035      	b.n	8002a38 <HAL_DMA_Start_IT+0x260>
 80029cc:	40020010 	.word	0x40020010
 80029d0:	40020028 	.word	0x40020028
 80029d4:	40020040 	.word	0x40020040
 80029d8:	40020058 	.word	0x40020058
 80029dc:	40020070 	.word	0x40020070
 80029e0:	40020088 	.word	0x40020088
 80029e4:	400200a0 	.word	0x400200a0
 80029e8:	400200b8 	.word	0x400200b8
 80029ec:	40020410 	.word	0x40020410
 80029f0:	40020428 	.word	0x40020428
 80029f4:	40020440 	.word	0x40020440
 80029f8:	40020458 	.word	0x40020458
 80029fc:	40020470 	.word	0x40020470
 8002a00:	40020488 	.word	0x40020488
 8002a04:	400204a0 	.word	0x400204a0
 8002a08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 020e 	bic.w	r2, r3, #14
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 020a 	orr.w	r2, r2, #10
 8002a1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0204 	orr.w	r2, r2, #4
 8002a36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a83      	ldr	r2, [pc, #524]	; (8002c4c <HAL_DMA_Start_IT+0x474>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d072      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a82      	ldr	r2, [pc, #520]	; (8002c50 <HAL_DMA_Start_IT+0x478>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d06d      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_DMA_Start_IT+0x47c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d068      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7f      	ldr	r2, [pc, #508]	; (8002c58 <HAL_DMA_Start_IT+0x480>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d063      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7d      	ldr	r2, [pc, #500]	; (8002c5c <HAL_DMA_Start_IT+0x484>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d05e      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <HAL_DMA_Start_IT+0x488>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d059      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_DMA_Start_IT+0x48c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d054      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <HAL_DMA_Start_IT+0x490>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d04f      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a77      	ldr	r2, [pc, #476]	; (8002c6c <HAL_DMA_Start_IT+0x494>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d04a      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a76      	ldr	r2, [pc, #472]	; (8002c70 <HAL_DMA_Start_IT+0x498>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d045      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a74      	ldr	r2, [pc, #464]	; (8002c74 <HAL_DMA_Start_IT+0x49c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d040      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a73      	ldr	r2, [pc, #460]	; (8002c78 <HAL_DMA_Start_IT+0x4a0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d03b      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_DMA_Start_IT+0x4a4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d036      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a70      	ldr	r2, [pc, #448]	; (8002c80 <HAL_DMA_Start_IT+0x4a8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d031      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_DMA_Start_IT+0x4ac>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02c      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <HAL_DMA_Start_IT+0x4b0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d027      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6b      	ldr	r2, [pc, #428]	; (8002c8c <HAL_DMA_Start_IT+0x4b4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d022      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_DMA_Start_IT+0x4b8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d01d      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <HAL_DMA_Start_IT+0x4bc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d018      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_DMA_Start_IT+0x4c0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <HAL_DMA_Start_IT+0x4c4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a64      	ldr	r2, [pc, #400]	; (8002ca0 <HAL_DMA_Start_IT+0x4c8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a62      	ldr	r2, [pc, #392]	; (8002ca4 <HAL_DMA_Start_IT+0x4cc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a61      	ldr	r2, [pc, #388]	; (8002ca8 <HAL_DMA_Start_IT+0x4d0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Start_IT+0x354>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_DMA_Start_IT+0x356>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a37      	ldr	r2, [pc, #220]	; (8002c4c <HAL_DMA_Start_IT+0x474>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d04a      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <HAL_DMA_Start_IT+0x478>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d045      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_DMA_Start_IT+0x47c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d040      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <HAL_DMA_Start_IT+0x480>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d03b      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <HAL_DMA_Start_IT+0x484>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d036      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <HAL_DMA_Start_IT+0x488>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d031      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_DMA_Start_IT+0x48c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02c      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <HAL_DMA_Start_IT+0x490>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d027      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <HAL_DMA_Start_IT+0x494>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d022      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <HAL_DMA_Start_IT+0x498>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d01d      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_DMA_Start_IT+0x49c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_DMA_Start_IT+0x4a0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_DMA_Start_IT+0x4a4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00e      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_DMA_Start_IT+0x4a8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_DMA_Start_IT+0x4ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_DMA_Start_IT+0x430>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_DMA_Start_IT+0x4b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <HAL_DMA_Start_IT+0x442>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e012      	b.n	8002c40 <HAL_DMA_Start_IT+0x468>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e009      	b.n	8002c40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40020010 	.word	0x40020010
 8002c50:	40020028 	.word	0x40020028
 8002c54:	40020040 	.word	0x40020040
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	40020070 	.word	0x40020070
 8002c60:	40020088 	.word	0x40020088
 8002c64:	400200a0 	.word	0x400200a0
 8002c68:	400200b8 	.word	0x400200b8
 8002c6c:	40020410 	.word	0x40020410
 8002c70:	40020428 	.word	0x40020428
 8002c74:	40020440 	.word	0x40020440
 8002c78:	40020458 	.word	0x40020458
 8002c7c:	40020470 	.word	0x40020470
 8002c80:	40020488 	.word	0x40020488
 8002c84:	400204a0 	.word	0x400204a0
 8002c88:	400204b8 	.word	0x400204b8
 8002c8c:	58025408 	.word	0x58025408
 8002c90:	5802541c 	.word	0x5802541c
 8002c94:	58025430 	.word	0x58025430
 8002c98:	58025444 	.word	0x58025444
 8002c9c:	58025458 	.word	0x58025458
 8002ca0:	5802546c 	.word	0x5802546c
 8002ca4:	58025480 	.word	0x58025480
 8002ca8:	58025494 	.word	0x58025494

08002cac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7fe fda6 	bl	8001804 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e2dc      	b.n	800327e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d008      	beq.n	8002ce2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e2cd      	b.n	800327e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a76      	ldr	r2, [pc, #472]	; (8002ec0 <HAL_DMA_Abort+0x214>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04a      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_DMA_Abort+0x218>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d045      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a73      	ldr	r2, [pc, #460]	; (8002ec8 <HAL_DMA_Abort+0x21c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a71      	ldr	r2, [pc, #452]	; (8002ecc <HAL_DMA_Abort+0x220>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a70      	ldr	r2, [pc, #448]	; (8002ed0 <HAL_DMA_Abort+0x224>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_DMA_Abort+0x228>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d031      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6d      	ldr	r2, [pc, #436]	; (8002ed8 <HAL_DMA_Abort+0x22c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d02c      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6b      	ldr	r2, [pc, #428]	; (8002edc <HAL_DMA_Abort+0x230>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6a      	ldr	r2, [pc, #424]	; (8002ee0 <HAL_DMA_Abort+0x234>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	; (8002ee4 <HAL_DMA_Abort+0x238>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a67      	ldr	r2, [pc, #412]	; (8002ee8 <HAL_DMA_Abort+0x23c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_DMA_Abort+0x240>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a64      	ldr	r2, [pc, #400]	; (8002ef0 <HAL_DMA_Abort+0x244>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a62      	ldr	r2, [pc, #392]	; (8002ef4 <HAL_DMA_Abort+0x248>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <HAL_DMA_Abort+0x24c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort+0xd6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5f      	ldr	r2, [pc, #380]	; (8002efc <HAL_DMA_Abort+0x250>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Abort+0xda>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_DMA_Abort+0xdc>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 021e 	bic.w	r2, r2, #30
 8002d9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002daa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e00a      	b.n	8002dca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020e 	bic.w	r2, r2, #14
 8002dc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <HAL_DMA_Abort+0x214>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d072      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <HAL_DMA_Abort+0x218>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d06d      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a39      	ldr	r2, [pc, #228]	; (8002ec8 <HAL_DMA_Abort+0x21c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d068      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a37      	ldr	r2, [pc, #220]	; (8002ecc <HAL_DMA_Abort+0x220>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d063      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <HAL_DMA_Abort+0x224>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d05e      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <HAL_DMA_Abort+0x228>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d059      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_DMA_Abort+0x22c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d054      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a31      	ldr	r2, [pc, #196]	; (8002edc <HAL_DMA_Abort+0x230>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04f      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a30      	ldr	r2, [pc, #192]	; (8002ee0 <HAL_DMA_Abort+0x234>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04a      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <HAL_DMA_Abort+0x238>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d045      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2d      	ldr	r2, [pc, #180]	; (8002ee8 <HAL_DMA_Abort+0x23c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <HAL_DMA_Abort+0x240>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03b      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <HAL_DMA_Abort+0x244>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d036      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_DMA_Abort+0x248>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <HAL_DMA_Abort+0x24c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a25      	ldr	r2, [pc, #148]	; (8002efc <HAL_DMA_Abort+0x250>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_DMA_Abort+0x254>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <HAL_DMA_Abort+0x258>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_DMA_Abort+0x25c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_DMA_Abort+0x260>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_DMA_Abort+0x264>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_DMA_Abort+0x268>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_DMA_Abort+0x26c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_Abort+0x20e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_DMA_Abort+0x270>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d132      	bne.n	8002f20 <HAL_DMA_Abort+0x274>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e031      	b.n	8002f22 <HAL_DMA_Abort+0x276>
 8002ebe:	bf00      	nop
 8002ec0:	40020010 	.word	0x40020010
 8002ec4:	40020028 	.word	0x40020028
 8002ec8:	40020040 	.word	0x40020040
 8002ecc:	40020058 	.word	0x40020058
 8002ed0:	40020070 	.word	0x40020070
 8002ed4:	40020088 	.word	0x40020088
 8002ed8:	400200a0 	.word	0x400200a0
 8002edc:	400200b8 	.word	0x400200b8
 8002ee0:	40020410 	.word	0x40020410
 8002ee4:	40020428 	.word	0x40020428
 8002ee8:	40020440 	.word	0x40020440
 8002eec:	40020458 	.word	0x40020458
 8002ef0:	40020470 	.word	0x40020470
 8002ef4:	40020488 	.word	0x40020488
 8002ef8:	400204a0 	.word	0x400204a0
 8002efc:	400204b8 	.word	0x400204b8
 8002f00:	58025408 	.word	0x58025408
 8002f04:	5802541c 	.word	0x5802541c
 8002f08:	58025430 	.word	0x58025430
 8002f0c:	58025444 	.word	0x58025444
 8002f10:	58025458 	.word	0x58025458
 8002f14:	5802546c 	.word	0x5802546c
 8002f18:	58025480 	.word	0x58025480
 8002f1c:	58025494 	.word	0x58025494
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <HAL_DMA_Abort+0x444>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d04a      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <HAL_DMA_Abort+0x448>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d045      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_DMA_Abort+0x44c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d040      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a68      	ldr	r2, [pc, #416]	; (80030fc <HAL_DMA_Abort+0x450>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a67      	ldr	r2, [pc, #412]	; (8003100 <HAL_DMA_Abort+0x454>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d036      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_DMA_Abort+0x458>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a64      	ldr	r2, [pc, #400]	; (8003108 <HAL_DMA_Abort+0x45c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02c      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a62      	ldr	r2, [pc, #392]	; (800310c <HAL_DMA_Abort+0x460>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d027      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a61      	ldr	r2, [pc, #388]	; (8003110 <HAL_DMA_Abort+0x464>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a5f      	ldr	r2, [pc, #380]	; (8003114 <HAL_DMA_Abort+0x468>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_DMA_Abort+0x46c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_DMA_Abort+0x470>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	; (8003120 <HAL_DMA_Abort+0x474>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a59      	ldr	r2, [pc, #356]	; (8003124 <HAL_DMA_Abort+0x478>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_DMA_Abort+0x47c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort+0x32a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_DMA_Abort+0x480>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <HAL_DMA_Abort+0x33c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e007      	b.n	8002ff8 <HAL_DMA_Abort+0x34c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ff8:	e013      	b.n	8003022 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffa:	f7fe fc03 	bl	8001804 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b05      	cmp	r3, #5
 8003006:	d90c      	bls.n	8003022 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e12d      	b.n	800327e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e5      	bne.n	8002ffa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_DMA_Abort+0x444>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04a      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_DMA_Abort+0x448>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <HAL_DMA_Abort+0x44c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_DMA_Abort+0x450>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03b      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <HAL_DMA_Abort+0x454>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d036      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_DMA_Abort+0x458>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_DMA_Abort+0x45c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02c      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_DMA_Abort+0x460>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d027      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a23      	ldr	r2, [pc, #140]	; (8003110 <HAL_DMA_Abort+0x464>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_DMA_Abort+0x468>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_DMA_Abort+0x46c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_DMA_Abort+0x470>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_DMA_Abort+0x474>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_DMA_Abort+0x478>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_DMA_Abort+0x47c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_DMA_Abort+0x422>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_DMA_Abort+0x480>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Abort+0x426>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_Abort+0x428>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02b      	beq.n	8003130 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	e02a      	b.n	8003146 <HAL_DMA_Abort+0x49a>
 80030f0:	40020010 	.word	0x40020010
 80030f4:	40020028 	.word	0x40020028
 80030f8:	40020040 	.word	0x40020040
 80030fc:	40020058 	.word	0x40020058
 8003100:	40020070 	.word	0x40020070
 8003104:	40020088 	.word	0x40020088
 8003108:	400200a0 	.word	0x400200a0
 800310c:	400200b8 	.word	0x400200b8
 8003110:	40020410 	.word	0x40020410
 8003114:	40020428 	.word	0x40020428
 8003118:	40020440 	.word	0x40020440
 800311c:	40020458 	.word	0x40020458
 8003120:	40020470 	.word	0x40020470
 8003124:	40020488 	.word	0x40020488
 8003128:	400204a0 	.word	0x400204a0
 800312c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2201      	movs	r2, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <HAL_DMA_Abort+0x5dc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d072      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_DMA_Abort+0x5e0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d06d      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_DMA_Abort+0x5e4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d068      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_DMA_Abort+0x5e8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d063      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a49      	ldr	r2, [pc, #292]	; (8003298 <HAL_DMA_Abort+0x5ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d05e      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a47      	ldr	r2, [pc, #284]	; (800329c <HAL_DMA_Abort+0x5f0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d059      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a46      	ldr	r2, [pc, #280]	; (80032a0 <HAL_DMA_Abort+0x5f4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d054      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a44      	ldr	r2, [pc, #272]	; (80032a4 <HAL_DMA_Abort+0x5f8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04f      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <HAL_DMA_Abort+0x5fc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d04a      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a41      	ldr	r2, [pc, #260]	; (80032ac <HAL_DMA_Abort+0x600>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d045      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a40      	ldr	r2, [pc, #256]	; (80032b0 <HAL_DMA_Abort+0x604>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d040      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <HAL_DMA_Abort+0x608>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d03b      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <HAL_DMA_Abort+0x60c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d036      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_DMA_Abort+0x610>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d031      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3a      	ldr	r2, [pc, #232]	; (80032c0 <HAL_DMA_Abort+0x614>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d02c      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_DMA_Abort+0x618>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d027      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a37      	ldr	r2, [pc, #220]	; (80032c8 <HAL_DMA_Abort+0x61c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a35      	ldr	r2, [pc, #212]	; (80032cc <HAL_DMA_Abort+0x620>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01d      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_DMA_Abort+0x624>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d018      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <HAL_DMA_Abort+0x628>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <HAL_DMA_Abort+0x62c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <HAL_DMA_Abort+0x630>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <HAL_DMA_Abort+0x634>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_DMA_Abort+0x58a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <HAL_DMA_Abort+0x638>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_DMA_Abort+0x58e>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_DMA_Abort+0x590>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003248:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003260:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800326a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40020010 	.word	0x40020010
 800328c:	40020028 	.word	0x40020028
 8003290:	40020040 	.word	0x40020040
 8003294:	40020058 	.word	0x40020058
 8003298:	40020070 	.word	0x40020070
 800329c:	40020088 	.word	0x40020088
 80032a0:	400200a0 	.word	0x400200a0
 80032a4:	400200b8 	.word	0x400200b8
 80032a8:	40020410 	.word	0x40020410
 80032ac:	40020428 	.word	0x40020428
 80032b0:	40020440 	.word	0x40020440
 80032b4:	40020458 	.word	0x40020458
 80032b8:	40020470 	.word	0x40020470
 80032bc:	40020488 	.word	0x40020488
 80032c0:	400204a0 	.word	0x400204a0
 80032c4:	400204b8 	.word	0x400204b8
 80032c8:	58025408 	.word	0x58025408
 80032cc:	5802541c 	.word	0x5802541c
 80032d0:	58025430 	.word	0x58025430
 80032d4:	58025444 	.word	0x58025444
 80032d8:	58025458 	.word	0x58025458
 80032dc:	5802546c 	.word	0x5802546c
 80032e0:	58025480 	.word	0x58025480
 80032e4:	58025494 	.word	0x58025494

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e205      	b.n	8003706 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e1fa      	b.n	8003706 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8c      	ldr	r2, [pc, #560]	; (8003548 <HAL_DMA_Abort_IT+0x260>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d04a      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a8b      	ldr	r2, [pc, #556]	; (800354c <HAL_DMA_Abort_IT+0x264>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d045      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a89      	ldr	r2, [pc, #548]	; (8003550 <HAL_DMA_Abort_IT+0x268>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d040      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a88      	ldr	r2, [pc, #544]	; (8003554 <HAL_DMA_Abort_IT+0x26c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d03b      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a86      	ldr	r2, [pc, #536]	; (8003558 <HAL_DMA_Abort_IT+0x270>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d036      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a85      	ldr	r2, [pc, #532]	; (800355c <HAL_DMA_Abort_IT+0x274>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d031      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a83      	ldr	r2, [pc, #524]	; (8003560 <HAL_DMA_Abort_IT+0x278>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d02c      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a82      	ldr	r2, [pc, #520]	; (8003564 <HAL_DMA_Abort_IT+0x27c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d027      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a80      	ldr	r2, [pc, #512]	; (8003568 <HAL_DMA_Abort_IT+0x280>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d022      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7f      	ldr	r2, [pc, #508]	; (800356c <HAL_DMA_Abort_IT+0x284>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d01d      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7d      	ldr	r2, [pc, #500]	; (8003570 <HAL_DMA_Abort_IT+0x288>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d018      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_DMA_Abort_IT+0x28c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7a      	ldr	r2, [pc, #488]	; (8003578 <HAL_DMA_Abort_IT+0x290>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a79      	ldr	r2, [pc, #484]	; (800357c <HAL_DMA_Abort_IT+0x294>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a77      	ldr	r2, [pc, #476]	; (8003580 <HAL_DMA_Abort_IT+0x298>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a76      	ldr	r2, [pc, #472]	; (8003584 <HAL_DMA_Abort_IT+0x29c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d101      	bne.n	80033b4 <HAL_DMA_Abort_IT+0xcc>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_DMA_Abort_IT+0xce>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d065      	beq.n	8003486 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2204      	movs	r2, #4
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_DMA_Abort_IT+0x260>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d04a      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_DMA_Abort_IT+0x264>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d045      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_DMA_Abort_IT+0x268>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5b      	ldr	r2, [pc, #364]	; (8003554 <HAL_DMA_Abort_IT+0x26c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d03b      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5a      	ldr	r2, [pc, #360]	; (8003558 <HAL_DMA_Abort_IT+0x270>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d036      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_DMA_Abort_IT+0x274>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a57      	ldr	r2, [pc, #348]	; (8003560 <HAL_DMA_Abort_IT+0x278>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d02c      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a55      	ldr	r2, [pc, #340]	; (8003564 <HAL_DMA_Abort_IT+0x27c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_DMA_Abort_IT+0x280>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_DMA_Abort_IT+0x284>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_DMA_Abort_IT+0x288>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a4f      	ldr	r2, [pc, #316]	; (8003574 <HAL_DMA_Abort_IT+0x28c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4e      	ldr	r2, [pc, #312]	; (8003578 <HAL_DMA_Abort_IT+0x290>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_DMA_Abort_IT+0x294>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_DMA_Abort_IT+0x298>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Abort_IT+0x17a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <HAL_DMA_Abort_IT+0x29c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <HAL_DMA_Abort_IT+0x18c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e147      	b.n	8003704 <HAL_DMA_Abort_IT+0x41c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e13e      	b.n	8003704 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020e 	bic.w	r2, r2, #14
 8003494:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_DMA_Abort_IT+0x260>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04a      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_DMA_Abort_IT+0x264>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d045      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_DMA_Abort_IT+0x268>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d040      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_DMA_Abort_IT+0x26c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a25      	ldr	r2, [pc, #148]	; (8003558 <HAL_DMA_Abort_IT+0x270>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_DMA_Abort_IT+0x274>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_DMA_Abort_IT+0x278>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d02c      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a20      	ldr	r2, [pc, #128]	; (8003564 <HAL_DMA_Abort_IT+0x27c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d027      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_DMA_Abort_IT+0x280>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_DMA_Abort_IT+0x284>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_DMA_Abort_IT+0x288>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_DMA_Abort_IT+0x28c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_DMA_Abort_IT+0x290>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_DMA_Abort_IT+0x294>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <HAL_DMA_Abort_IT+0x298>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_DMA_Abort_IT+0x29c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d128      	bne.n	8003588 <HAL_DMA_Abort_IT+0x2a0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e027      	b.n	8003598 <HAL_DMA_Abort_IT+0x2b0>
 8003548:	40020010 	.word	0x40020010
 800354c:	40020028 	.word	0x40020028
 8003550:	40020040 	.word	0x40020040
 8003554:	40020058 	.word	0x40020058
 8003558:	40020070 	.word	0x40020070
 800355c:	40020088 	.word	0x40020088
 8003560:	400200a0 	.word	0x400200a0
 8003564:	400200b8 	.word	0x400200b8
 8003568:	40020410 	.word	0x40020410
 800356c:	40020428 	.word	0x40020428
 8003570:	40020440 	.word	0x40020440
 8003574:	40020458 	.word	0x40020458
 8003578:	40020470 	.word	0x40020470
 800357c:	40020488 	.word	0x40020488
 8003580:	400204a0 	.word	0x400204a0
 8003584:	400204b8 	.word	0x400204b8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a5c      	ldr	r2, [pc, #368]	; (8003710 <HAL_DMA_Abort_IT+0x428>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d072      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5b      	ldr	r2, [pc, #364]	; (8003714 <HAL_DMA_Abort_IT+0x42c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d06d      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a59      	ldr	r2, [pc, #356]	; (8003718 <HAL_DMA_Abort_IT+0x430>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d068      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_DMA_Abort_IT+0x434>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d063      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_DMA_Abort_IT+0x438>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d05e      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a55      	ldr	r2, [pc, #340]	; (8003724 <HAL_DMA_Abort_IT+0x43c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d059      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a53      	ldr	r2, [pc, #332]	; (8003728 <HAL_DMA_Abort_IT+0x440>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d054      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a52      	ldr	r2, [pc, #328]	; (800372c <HAL_DMA_Abort_IT+0x444>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04f      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_DMA_Abort_IT+0x448>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d04a      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_DMA_Abort_IT+0x44c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d045      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a4d      	ldr	r2, [pc, #308]	; (8003738 <HAL_DMA_Abort_IT+0x450>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d040      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a4c      	ldr	r2, [pc, #304]	; (800373c <HAL_DMA_Abort_IT+0x454>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d03b      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <HAL_DMA_Abort_IT+0x458>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d036      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a49      	ldr	r2, [pc, #292]	; (8003744 <HAL_DMA_Abort_IT+0x45c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d031      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_DMA_Abort_IT+0x460>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02c      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a46      	ldr	r2, [pc, #280]	; (800374c <HAL_DMA_Abort_IT+0x464>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d027      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a44      	ldr	r2, [pc, #272]	; (8003750 <HAL_DMA_Abort_IT+0x468>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d022      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a43      	ldr	r2, [pc, #268]	; (8003754 <HAL_DMA_Abort_IT+0x46c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d01d      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_DMA_Abort_IT+0x470>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d018      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a40      	ldr	r2, [pc, #256]	; (800375c <HAL_DMA_Abort_IT+0x474>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <HAL_DMA_Abort_IT+0x478>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3d      	ldr	r2, [pc, #244]	; (8003764 <HAL_DMA_Abort_IT+0x47c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_DMA_Abort_IT+0x480>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_DMA_Abort_IT+0x3a0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a3a      	ldr	r2, [pc, #232]	; (800376c <HAL_DMA_Abort_IT+0x484>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_DMA_Abort_IT+0x3a4>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_DMA_Abort_IT+0x3a6>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d028      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40020010 	.word	0x40020010
 8003714:	40020028 	.word	0x40020028
 8003718:	40020040 	.word	0x40020040
 800371c:	40020058 	.word	0x40020058
 8003720:	40020070 	.word	0x40020070
 8003724:	40020088 	.word	0x40020088
 8003728:	400200a0 	.word	0x400200a0
 800372c:	400200b8 	.word	0x400200b8
 8003730:	40020410 	.word	0x40020410
 8003734:	40020428 	.word	0x40020428
 8003738:	40020440 	.word	0x40020440
 800373c:	40020458 	.word	0x40020458
 8003740:	40020470 	.word	0x40020470
 8003744:	40020488 	.word	0x40020488
 8003748:	400204a0 	.word	0x400204a0
 800374c:	400204b8 	.word	0x400204b8
 8003750:	58025408 	.word	0x58025408
 8003754:	5802541c 	.word	0x5802541c
 8003758:	58025430 	.word	0x58025430
 800375c:	58025444 	.word	0x58025444
 8003760:	58025458 	.word	0x58025458
 8003764:	5802546c 	.word	0x5802546c
 8003768:	58025480 	.word	0x58025480
 800376c:	58025494 	.word	0x58025494

08003770 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800377c:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_DMA_IRQHandler+0x1ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_DMA_IRQHandler+0x1b0>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	0a9b      	lsrs	r3, r3, #10
 8003788:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_DMA_IRQHandler+0x1b4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d04a      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_DMA_IRQHandler+0x1b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d045      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a5c      	ldr	r2, [pc, #368]	; (800392c <HAL_DMA_IRQHandler+0x1bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d040      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_DMA_IRQHandler+0x1c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d03b      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a59      	ldr	r2, [pc, #356]	; (8003934 <HAL_DMA_IRQHandler+0x1c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d036      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_DMA_IRQHandler+0x1c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d031      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_DMA_IRQHandler+0x1cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d02c      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a54      	ldr	r2, [pc, #336]	; (8003940 <HAL_DMA_IRQHandler+0x1d0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d027      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_DMA_IRQHandler+0x1d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a51      	ldr	r2, [pc, #324]	; (8003948 <HAL_DMA_IRQHandler+0x1d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01d      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a50      	ldr	r2, [pc, #320]	; (800394c <HAL_DMA_IRQHandler+0x1dc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <HAL_DMA_IRQHandler+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_DMA_IRQHandler+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_DMA_IRQHandler+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_DMA_IRQHandler+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_DMA_IRQHandler+0xd2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a48      	ldr	r2, [pc, #288]	; (8003960 <HAL_DMA_IRQHandler+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_DMA_IRQHandler+0xd6>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_DMA_IRQHandler+0xd8>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 842b 	beq.w	80040a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2208      	movs	r2, #8
 8003858:	409a      	lsls	r2, r3
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80a2 	beq.w	80039a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <HAL_DMA_IRQHandler+0x1b4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2d      	ldr	r2, [pc, #180]	; (8003928 <HAL_DMA_IRQHandler+0x1b8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d045      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <HAL_DMA_IRQHandler+0x1bc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d040      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <HAL_DMA_IRQHandler+0x1c0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d03b      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a28      	ldr	r2, [pc, #160]	; (8003934 <HAL_DMA_IRQHandler+0x1c4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d036      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_DMA_IRQHandler+0x1c8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d031      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <HAL_DMA_IRQHandler+0x1cc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02c      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a24      	ldr	r2, [pc, #144]	; (8003940 <HAL_DMA_IRQHandler+0x1d0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d027      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a22      	ldr	r2, [pc, #136]	; (8003944 <HAL_DMA_IRQHandler+0x1d4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_DMA_IRQHandler+0x1d8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <HAL_DMA_IRQHandler+0x1dc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_DMA_IRQHandler+0x1e0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <HAL_DMA_IRQHandler+0x1e4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_DMA_IRQHandler+0x1e8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a19      	ldr	r2, [pc, #100]	; (800395c <HAL_DMA_IRQHandler+0x1ec>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_IRQHandler+0x194>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_DMA_IRQHandler+0x1f0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d12f      	bne.n	8003964 <HAL_DMA_IRQHandler+0x1f4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	e02e      	b.n	8003978 <HAL_DMA_IRQHandler+0x208>
 800391a:	bf00      	nop
 800391c:	24000000 	.word	0x24000000
 8003920:	1b4e81b5 	.word	0x1b4e81b5
 8003924:	40020010 	.word	0x40020010
 8003928:	40020028 	.word	0x40020028
 800392c:	40020040 	.word	0x40020040
 8003930:	40020058 	.word	0x40020058
 8003934:	40020070 	.word	0x40020070
 8003938:	40020088 	.word	0x40020088
 800393c:	400200a0 	.word	0x400200a0
 8003940:	400200b8 	.word	0x400200b8
 8003944:	40020410 	.word	0x40020410
 8003948:	40020428 	.word	0x40020428
 800394c:	40020440 	.word	0x40020440
 8003950:	40020458 	.word	0x40020458
 8003954:	40020470 	.word	0x40020470
 8003958:	40020488 	.word	0x40020488
 800395c:	400204a0 	.word	0x400204a0
 8003960:	400204b8 	.word	0x400204b8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2208      	movs	r2, #8
 8003996:	409a      	lsls	r2, r3
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d06e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a69      	ldr	r2, [pc, #420]	; (8003b68 <HAL_DMA_IRQHandler+0x3f8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a67      	ldr	r2, [pc, #412]	; (8003b6c <HAL_DMA_IRQHandler+0x3fc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a66      	ldr	r2, [pc, #408]	; (8003b70 <HAL_DMA_IRQHandler+0x400>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a64      	ldr	r2, [pc, #400]	; (8003b74 <HAL_DMA_IRQHandler+0x404>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a63      	ldr	r2, [pc, #396]	; (8003b78 <HAL_DMA_IRQHandler+0x408>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a61      	ldr	r2, [pc, #388]	; (8003b7c <HAL_DMA_IRQHandler+0x40c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a60      	ldr	r2, [pc, #384]	; (8003b80 <HAL_DMA_IRQHandler+0x410>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a5e      	ldr	r2, [pc, #376]	; (8003b84 <HAL_DMA_IRQHandler+0x414>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_DMA_IRQHandler+0x418>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5b      	ldr	r2, [pc, #364]	; (8003b8c <HAL_DMA_IRQHandler+0x41c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5a      	ldr	r2, [pc, #360]	; (8003b90 <HAL_DMA_IRQHandler+0x420>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <HAL_DMA_IRQHandler+0x424>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_DMA_IRQHandler+0x428>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_DMA_IRQHandler+0x42c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a54      	ldr	r2, [pc, #336]	; (8003ba0 <HAL_DMA_IRQHandler+0x430>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x2ee>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_DMA_IRQHandler+0x434>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10a      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x304>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e003      	b.n	8003a7c <HAL_DMA_IRQHandler+0x30c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f043 0202 	orr.w	r2, r3, #2
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 808f 	beq.w	8003bd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <HAL_DMA_IRQHandler+0x3f8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <HAL_DMA_IRQHandler+0x3fc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_DMA_IRQHandler+0x400>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_DMA_IRQHandler+0x404>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <HAL_DMA_IRQHandler+0x408>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <HAL_DMA_IRQHandler+0x40c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <HAL_DMA_IRQHandler+0x410>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_DMA_IRQHandler+0x414>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <HAL_DMA_IRQHandler+0x418>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_DMA_IRQHandler+0x41c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_DMA_IRQHandler+0x420>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_DMA_IRQHandler+0x424>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_DMA_IRQHandler+0x428>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_DMA_IRQHandler+0x42c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_DMA_IRQHandler+0x430>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x3e2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <HAL_DMA_IRQHandler+0x434>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d12a      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x438>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e023      	b.n	8003bb0 <HAL_DMA_IRQHandler+0x440>
 8003b68:	40020010 	.word	0x40020010
 8003b6c:	40020028 	.word	0x40020028
 8003b70:	40020040 	.word	0x40020040
 8003b74:	40020058 	.word	0x40020058
 8003b78:	40020070 	.word	0x40020070
 8003b7c:	40020088 	.word	0x40020088
 8003b80:	400200a0 	.word	0x400200a0
 8003b84:	400200b8 	.word	0x400200b8
 8003b88:	40020410 	.word	0x40020410
 8003b8c:	40020428 	.word	0x40020428
 8003b90:	40020440 	.word	0x40020440
 8003b94:	40020458 	.word	0x40020458
 8003b98:	40020470 	.word	0x40020470
 8003b9c:	40020488 	.word	0x40020488
 8003ba0:	400204a0 	.word	0x400204a0
 8003ba4:	400204b8 	.word	0x400204b8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2210      	movs	r2, #16
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a6 	beq.w	8003d32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a85      	ldr	r2, [pc, #532]	; (8003e00 <HAL_DMA_IRQHandler+0x690>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d04a      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_DMA_IRQHandler+0x694>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d045      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a82      	ldr	r2, [pc, #520]	; (8003e08 <HAL_DMA_IRQHandler+0x698>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d040      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_DMA_IRQHandler+0x69c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d03b      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7f      	ldr	r2, [pc, #508]	; (8003e10 <HAL_DMA_IRQHandler+0x6a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d036      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7d      	ldr	r2, [pc, #500]	; (8003e14 <HAL_DMA_IRQHandler+0x6a4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d031      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7c      	ldr	r2, [pc, #496]	; (8003e18 <HAL_DMA_IRQHandler+0x6a8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d02c      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7a      	ldr	r2, [pc, #488]	; (8003e1c <HAL_DMA_IRQHandler+0x6ac>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d027      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a79      	ldr	r2, [pc, #484]	; (8003e20 <HAL_DMA_IRQHandler+0x6b0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a77      	ldr	r2, [pc, #476]	; (8003e24 <HAL_DMA_IRQHandler+0x6b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a76      	ldr	r2, [pc, #472]	; (8003e28 <HAL_DMA_IRQHandler+0x6b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d018      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a74      	ldr	r2, [pc, #464]	; (8003e2c <HAL_DMA_IRQHandler+0x6bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a73      	ldr	r2, [pc, #460]	; (8003e30 <HAL_DMA_IRQHandler+0x6c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00e      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a71      	ldr	r2, [pc, #452]	; (8003e34 <HAL_DMA_IRQHandler+0x6c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a70      	ldr	r2, [pc, #448]	; (8003e38 <HAL_DMA_IRQHandler+0x6c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x516>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6e      	ldr	r2, [pc, #440]	; (8003e3c <HAL_DMA_IRQHandler+0x6cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10a      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x52c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e009      	b.n	8003cb0 <HAL_DMA_IRQHandler+0x540>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d03e      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d024      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e01f      	b.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01b      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
 8003d02:	e016      	b.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0208 	bic.w	r2, r2, #8
 8003d20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8110 	beq.w	8003f68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <HAL_DMA_IRQHandler+0x690>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_DMA_IRQHandler+0x694>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <HAL_DMA_IRQHandler+0x698>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <HAL_DMA_IRQHandler+0x69c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_DMA_IRQHandler+0x6a0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <HAL_DMA_IRQHandler+0x6a4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_DMA_IRQHandler+0x6a8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_DMA_IRQHandler+0x6ac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <HAL_DMA_IRQHandler+0x6b0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_DMA_IRQHandler+0x6b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <HAL_DMA_IRQHandler+0x6b8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_DMA_IRQHandler+0x6bc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <HAL_DMA_IRQHandler+0x6c0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_DMA_IRQHandler+0x6c4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <HAL_DMA_IRQHandler+0x6c8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x678>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_DMA_IRQHandler+0x6cc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d12b      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x6d0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e02a      	b.n	8003e54 <HAL_DMA_IRQHandler+0x6e4>
 8003dfe:	bf00      	nop
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8087 	beq.w	8003f68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2220      	movs	r2, #32
 8003e64:	409a      	lsls	r2, r3
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d139      	bne.n	8003eea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0216 	bic.w	r2, r2, #22
 8003e84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x736>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0208 	bic.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 834a 	beq.w	8004574 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
          }
          return;
 8003ee8:	e344      	b.n	8004574 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
 8003f16:	e027      	b.n	8003f68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d023      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
 8003f28:	e01e      	b.n	8003f68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10f      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0210 	bic.w	r2, r2, #16
 8003f46:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8306 	beq.w	800457e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8088 	beq.w	8004090 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2204      	movs	r2, #4
 8003f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a7a      	ldr	r2, [pc, #488]	; (8004178 <HAL_DMA_IRQHandler+0xa08>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d04a      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a79      	ldr	r2, [pc, #484]	; (800417c <HAL_DMA_IRQHandler+0xa0c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d045      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a77      	ldr	r2, [pc, #476]	; (8004180 <HAL_DMA_IRQHandler+0xa10>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d040      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a76      	ldr	r2, [pc, #472]	; (8004184 <HAL_DMA_IRQHandler+0xa14>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d03b      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a74      	ldr	r2, [pc, #464]	; (8004188 <HAL_DMA_IRQHandler+0xa18>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d036      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	; (800418c <HAL_DMA_IRQHandler+0xa1c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d031      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a71      	ldr	r2, [pc, #452]	; (8004190 <HAL_DMA_IRQHandler+0xa20>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02c      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a70      	ldr	r2, [pc, #448]	; (8004194 <HAL_DMA_IRQHandler+0xa24>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d027      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_DMA_IRQHandler+0xa28>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d022      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6d      	ldr	r2, [pc, #436]	; (800419c <HAL_DMA_IRQHandler+0xa2c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01d      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6b      	ldr	r2, [pc, #428]	; (80041a0 <HAL_DMA_IRQHandler+0xa30>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d018      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6a      	ldr	r2, [pc, #424]	; (80041a4 <HAL_DMA_IRQHandler+0xa34>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a68      	ldr	r2, [pc, #416]	; (80041a8 <HAL_DMA_IRQHandler+0xa38>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a67      	ldr	r2, [pc, #412]	; (80041ac <HAL_DMA_IRQHandler+0xa3c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_DMA_IRQHandler+0xa40>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_DMA_IRQHandler+0x8b8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a64      	ldr	r2, [pc, #400]	; (80041b4 <HAL_DMA_IRQHandler+0xa44>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d108      	bne.n	800403a <HAL_DMA_IRQHandler+0x8ca>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e007      	b.n	800404a <HAL_DMA_IRQHandler+0x8da>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3301      	adds	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	429a      	cmp	r2, r3
 8004054:	d307      	bcc.n	8004066 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f2      	bne.n	800404a <HAL_DMA_IRQHandler+0x8da>
 8004064:	e000      	b.n	8004068 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004066:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004086:	e003      	b.n	8004090 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8272 	beq.w	800457e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
 80040a2:	e26c      	b.n	800457e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a43      	ldr	r2, [pc, #268]	; (80041b8 <HAL_DMA_IRQHandler+0xa48>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a42      	ldr	r2, [pc, #264]	; (80041bc <HAL_DMA_IRQHandler+0xa4c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <HAL_DMA_IRQHandler+0xa50>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3f      	ldr	r2, [pc, #252]	; (80041c4 <HAL_DMA_IRQHandler+0xa54>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3d      	ldr	r2, [pc, #244]	; (80041c8 <HAL_DMA_IRQHandler+0xa58>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <HAL_DMA_IRQHandler+0xa5c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <HAL_DMA_IRQHandler+0xa60>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x984>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a39      	ldr	r2, [pc, #228]	; (80041d4 <HAL_DMA_IRQHandler+0xa64>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x988>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_DMA_IRQHandler+0x98a>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 823f 	beq.w	800457e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2204      	movs	r2, #4
 8004112:	409a      	lsls	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80cd 	beq.w	80042b8 <HAL_DMA_IRQHandler+0xb48>
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80c7 	beq.w	80042b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2204      	movs	r2, #4
 8004134:	409a      	lsls	r2, r3
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d049      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8210 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004160:	e20a      	b.n	8004578 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8206 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004174:	e200      	b.n	8004578 <HAL_DMA_IRQHandler+0xe08>
 8004176:	bf00      	nop
 8004178:	40020010 	.word	0x40020010
 800417c:	40020028 	.word	0x40020028
 8004180:	40020040 	.word	0x40020040
 8004184:	40020058 	.word	0x40020058
 8004188:	40020070 	.word	0x40020070
 800418c:	40020088 	.word	0x40020088
 8004190:	400200a0 	.word	0x400200a0
 8004194:	400200b8 	.word	0x400200b8
 8004198:	40020410 	.word	0x40020410
 800419c:	40020428 	.word	0x40020428
 80041a0:	40020440 	.word	0x40020440
 80041a4:	40020458 	.word	0x40020458
 80041a8:	40020470 	.word	0x40020470
 80041ac:	40020488 	.word	0x40020488
 80041b0:	400204a0 	.word	0x400204a0
 80041b4:	400204b8 	.word	0x400204b8
 80041b8:	58025408 	.word	0x58025408
 80041bc:	5802541c 	.word	0x5802541c
 80041c0:	58025430 	.word	0x58025430
 80041c4:	58025444 	.word	0x58025444
 80041c8:	58025458 	.word	0x58025458
 80041cc:	5802546c 	.word	0x5802546c
 80041d0:	58025480 	.word	0x58025480
 80041d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d160      	bne.n	80042a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a8c      	ldr	r2, [pc, #560]	; (8004418 <HAL_DMA_IRQHandler+0xca8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d04a      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a8a      	ldr	r2, [pc, #552]	; (800441c <HAL_DMA_IRQHandler+0xcac>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d045      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a89      	ldr	r2, [pc, #548]	; (8004420 <HAL_DMA_IRQHandler+0xcb0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d040      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a87      	ldr	r2, [pc, #540]	; (8004424 <HAL_DMA_IRQHandler+0xcb4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d03b      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a86      	ldr	r2, [pc, #536]	; (8004428 <HAL_DMA_IRQHandler+0xcb8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d036      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a84      	ldr	r2, [pc, #528]	; (800442c <HAL_DMA_IRQHandler+0xcbc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d031      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a83      	ldr	r2, [pc, #524]	; (8004430 <HAL_DMA_IRQHandler+0xcc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d02c      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a81      	ldr	r2, [pc, #516]	; (8004434 <HAL_DMA_IRQHandler+0xcc4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d027      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a80      	ldr	r2, [pc, #512]	; (8004438 <HAL_DMA_IRQHandler+0xcc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a7e      	ldr	r2, [pc, #504]	; (800443c <HAL_DMA_IRQHandler+0xccc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01d      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7d      	ldr	r2, [pc, #500]	; (8004440 <HAL_DMA_IRQHandler+0xcd0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <HAL_DMA_IRQHandler+0xcd4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <HAL_DMA_IRQHandler+0xcd8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a78      	ldr	r2, [pc, #480]	; (800444c <HAL_DMA_IRQHandler+0xcdc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a77      	ldr	r2, [pc, #476]	; (8004450 <HAL_DMA_IRQHandler+0xce0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_DMA_IRQHandler+0xb12>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a75      	ldr	r2, [pc, #468]	; (8004454 <HAL_DMA_IRQHandler+0xce4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <HAL_DMA_IRQHandler+0xb24>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e007      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb34>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8165 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b6:	e15f      	b.n	8004578 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2202      	movs	r2, #2
 80042c2:	409a      	lsls	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80c5 	beq.w	8004458 <HAL_DMA_IRQHandler+0xce8>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80bf 	beq.w	8004458 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2202      	movs	r2, #2
 80042e4:	409a      	lsls	r2, r3
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 813a 	beq.w	800457c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004310:	e134      	b.n	800457c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8130 	beq.w	800457c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004324:	e12a      	b.n	800457c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d168      	bne.n	8004402 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a38      	ldr	r2, [pc, #224]	; (8004418 <HAL_DMA_IRQHandler+0xca8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04a      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a37      	ldr	r2, [pc, #220]	; (800441c <HAL_DMA_IRQHandler+0xcac>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d045      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a35      	ldr	r2, [pc, #212]	; (8004420 <HAL_DMA_IRQHandler+0xcb0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d040      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a34      	ldr	r2, [pc, #208]	; (8004424 <HAL_DMA_IRQHandler+0xcb4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d03b      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a32      	ldr	r2, [pc, #200]	; (8004428 <HAL_DMA_IRQHandler+0xcb8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d036      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a31      	ldr	r2, [pc, #196]	; (800442c <HAL_DMA_IRQHandler+0xcbc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d031      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <HAL_DMA_IRQHandler+0xcc0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02c      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2e      	ldr	r2, [pc, #184]	; (8004434 <HAL_DMA_IRQHandler+0xcc4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d027      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <HAL_DMA_IRQHandler+0xcc8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2b      	ldr	r2, [pc, #172]	; (800443c <HAL_DMA_IRQHandler+0xccc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d01d      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_DMA_IRQHandler+0xcd0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_DMA_IRQHandler+0xcd4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a26      	ldr	r2, [pc, #152]	; (8004448 <HAL_DMA_IRQHandler+0xcd8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <HAL_DMA_IRQHandler+0xcdc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_DMA_IRQHandler+0xce0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xc60>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_DMA_IRQHandler+0xce4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d108      	bne.n	80043e2 <HAL_DMA_IRQHandler+0xc72>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0214 	bic.w	r2, r2, #20
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e007      	b.n	80043f2 <HAL_DMA_IRQHandler+0xc82>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 020a 	bic.w	r2, r2, #10
 80043f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80b8 	beq.w	800457c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004414:	e0b2      	b.n	800457c <HAL_DMA_IRQHandler+0xe0c>
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2208      	movs	r2, #8
 8004462:	409a      	lsls	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8088 	beq.w	800457e <HAL_DMA_IRQHandler+0xe0e>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8082 	beq.w	800457e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a41      	ldr	r2, [pc, #260]	; (8004584 <HAL_DMA_IRQHandler+0xe14>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d04a      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <HAL_DMA_IRQHandler+0xe18>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d045      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a3e      	ldr	r2, [pc, #248]	; (800458c <HAL_DMA_IRQHandler+0xe1c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d040      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <HAL_DMA_IRQHandler+0xe20>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d03b      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <HAL_DMA_IRQHandler+0xe24>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d036      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a39      	ldr	r2, [pc, #228]	; (8004598 <HAL_DMA_IRQHandler+0xe28>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d031      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a38      	ldr	r2, [pc, #224]	; (800459c <HAL_DMA_IRQHandler+0xe2c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d02c      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a36      	ldr	r2, [pc, #216]	; (80045a0 <HAL_DMA_IRQHandler+0xe30>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d027      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <HAL_DMA_IRQHandler+0xe34>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a33      	ldr	r2, [pc, #204]	; (80045a8 <HAL_DMA_IRQHandler+0xe38>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01d      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a32      	ldr	r2, [pc, #200]	; (80045ac <HAL_DMA_IRQHandler+0xe3c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a30      	ldr	r2, [pc, #192]	; (80045b0 <HAL_DMA_IRQHandler+0xe40>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <HAL_DMA_IRQHandler+0xe44>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <HAL_DMA_IRQHandler+0xe48>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <HAL_DMA_IRQHandler+0xe4c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_DMA_IRQHandler+0xdaa>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <HAL_DMA_IRQHandler+0xe50>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <HAL_DMA_IRQHandler+0xdbc>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 021c 	bic.w	r2, r2, #28
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e007      	b.n	800453c <HAL_DMA_IRQHandler+0xdcc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 020e 	bic.w	r2, r2, #14
 800453a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2201      	movs	r2, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
 8004572:	e004      	b.n	800457e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800457e:	3728      	adds	r7, #40	; 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40020010 	.word	0x40020010
 8004588:	40020028 	.word	0x40020028
 800458c:	40020040 	.word	0x40020040
 8004590:	40020058 	.word	0x40020058
 8004594:	40020070 	.word	0x40020070
 8004598:	40020088 	.word	0x40020088
 800459c:	400200a0 	.word	0x400200a0
 80045a0:	400200b8 	.word	0x400200b8
 80045a4:	40020410 	.word	0x40020410
 80045a8:	40020428 	.word	0x40020428
 80045ac:	40020440 	.word	0x40020440
 80045b0:	40020458 	.word	0x40020458
 80045b4:	40020470 	.word	0x40020470
 80045b8:	40020488 	.word	0x40020488
 80045bc:	400204a0 	.word	0x400204a0
 80045c0:	400204b8 	.word	0x400204b8

080045c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a84      	ldr	r2, [pc, #528]	; (80047f4 <DMA_SetConfig+0x230>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d072      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a82      	ldr	r2, [pc, #520]	; (80047f8 <DMA_SetConfig+0x234>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d06d      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a81      	ldr	r2, [pc, #516]	; (80047fc <DMA_SetConfig+0x238>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d068      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7f      	ldr	r2, [pc, #508]	; (8004800 <DMA_SetConfig+0x23c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d063      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7e      	ldr	r2, [pc, #504]	; (8004804 <DMA_SetConfig+0x240>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d05e      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7c      	ldr	r2, [pc, #496]	; (8004808 <DMA_SetConfig+0x244>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d059      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7b      	ldr	r2, [pc, #492]	; (800480c <DMA_SetConfig+0x248>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d054      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a79      	ldr	r2, [pc, #484]	; (8004810 <DMA_SetConfig+0x24c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d04f      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a78      	ldr	r2, [pc, #480]	; (8004814 <DMA_SetConfig+0x250>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a76      	ldr	r2, [pc, #472]	; (8004818 <DMA_SetConfig+0x254>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a75      	ldr	r2, [pc, #468]	; (800481c <DMA_SetConfig+0x258>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a73      	ldr	r2, [pc, #460]	; (8004820 <DMA_SetConfig+0x25c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a72      	ldr	r2, [pc, #456]	; (8004824 <DMA_SetConfig+0x260>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a70      	ldr	r2, [pc, #448]	; (8004828 <DMA_SetConfig+0x264>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6f      	ldr	r2, [pc, #444]	; (800482c <DMA_SetConfig+0x268>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <DMA_SetConfig+0x26c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6c      	ldr	r2, [pc, #432]	; (8004834 <DMA_SetConfig+0x270>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6a      	ldr	r2, [pc, #424]	; (8004838 <DMA_SetConfig+0x274>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <DMA_SetConfig+0x10a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a69      	ldr	r2, [pc, #420]	; (800483c <DMA_SetConfig+0x278>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <DMA_SetConfig+0x10a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a67      	ldr	r2, [pc, #412]	; (8004840 <DMA_SetConfig+0x27c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a66      	ldr	r2, [pc, #408]	; (8004844 <DMA_SetConfig+0x280>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a64      	ldr	r2, [pc, #400]	; (8004848 <DMA_SetConfig+0x284>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a63      	ldr	r2, [pc, #396]	; (800484c <DMA_SetConfig+0x288>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <DMA_SetConfig+0x10a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a61      	ldr	r2, [pc, #388]	; (8004850 <DMA_SetConfig+0x28c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <DMA_SetConfig+0x10e>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <DMA_SetConfig+0x110>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <DMA_SetConfig+0x230>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <DMA_SetConfig+0x234>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <DMA_SetConfig+0x238>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <DMA_SetConfig+0x23c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a38      	ldr	r2, [pc, #224]	; (8004804 <DMA_SetConfig+0x240>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a37      	ldr	r2, [pc, #220]	; (8004808 <DMA_SetConfig+0x244>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a35      	ldr	r2, [pc, #212]	; (800480c <DMA_SetConfig+0x248>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <DMA_SetConfig+0x24c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a32      	ldr	r2, [pc, #200]	; (8004814 <DMA_SetConfig+0x250>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a31      	ldr	r2, [pc, #196]	; (8004818 <DMA_SetConfig+0x254>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <DMA_SetConfig+0x258>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <DMA_SetConfig+0x25c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <DMA_SetConfig+0x260>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <DMA_SetConfig+0x264>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <DMA_SetConfig+0x268>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <DMA_SetConfig+0x1d0>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	; (8004830 <DMA_SetConfig+0x26c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <DMA_SetConfig+0x1d4>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <DMA_SetConfig+0x1d6>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d05a      	beq.n	8004854 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	223f      	movs	r2, #63	; 0x3f
 80047a8:	409a      	lsls	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d108      	bne.n	80047e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047de:	e087      	b.n	80048f0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]
}
 80047f0:	e07e      	b.n	80048f0 <DMA_SetConfig+0x32c>
 80047f2:	bf00      	nop
 80047f4:	40020010 	.word	0x40020010
 80047f8:	40020028 	.word	0x40020028
 80047fc:	40020040 	.word	0x40020040
 8004800:	40020058 	.word	0x40020058
 8004804:	40020070 	.word	0x40020070
 8004808:	40020088 	.word	0x40020088
 800480c:	400200a0 	.word	0x400200a0
 8004810:	400200b8 	.word	0x400200b8
 8004814:	40020410 	.word	0x40020410
 8004818:	40020428 	.word	0x40020428
 800481c:	40020440 	.word	0x40020440
 8004820:	40020458 	.word	0x40020458
 8004824:	40020470 	.word	0x40020470
 8004828:	40020488 	.word	0x40020488
 800482c:	400204a0 	.word	0x400204a0
 8004830:	400204b8 	.word	0x400204b8
 8004834:	58025408 	.word	0x58025408
 8004838:	5802541c 	.word	0x5802541c
 800483c:	58025430 	.word	0x58025430
 8004840:	58025444 	.word	0x58025444
 8004844:	58025458 	.word	0x58025458
 8004848:	5802546c 	.word	0x5802546c
 800484c:	58025480 	.word	0x58025480
 8004850:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a28      	ldr	r2, [pc, #160]	; (80048fc <DMA_SetConfig+0x338>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d022      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a27      	ldr	r2, [pc, #156]	; (8004900 <DMA_SetConfig+0x33c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d01d      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a25      	ldr	r2, [pc, #148]	; (8004904 <DMA_SetConfig+0x340>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d018      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a24      	ldr	r2, [pc, #144]	; (8004908 <DMA_SetConfig+0x344>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <DMA_SetConfig+0x348>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <DMA_SetConfig+0x34c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d009      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <DMA_SetConfig+0x350>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <DMA_SetConfig+0x2e0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <DMA_SetConfig+0x354>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <DMA_SetConfig+0x2e4>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <DMA_SetConfig+0x2e6>
 80048a8:	2300      	movs	r3, #0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2201      	movs	r2, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d108      	bne.n	80048e0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	60da      	str	r2, [r3, #12]
}
 80048de:	e007      	b.n	80048f0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	58025408 	.word	0x58025408
 8004900:	5802541c 	.word	0x5802541c
 8004904:	58025430 	.word	0x58025430
 8004908:	58025444 	.word	0x58025444
 800490c:	58025458 	.word	0x58025458
 8004910:	5802546c 	.word	0x5802546c
 8004914:	58025480 	.word	0x58025480
 8004918:	58025494 	.word	0x58025494

0800491c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <DMA_CalcBaseAndBitshift+0x118>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d04a      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a41      	ldr	r2, [pc, #260]	; (8004a38 <DMA_CalcBaseAndBitshift+0x11c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d045      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <DMA_CalcBaseAndBitshift+0x120>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d040      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a3e      	ldr	r2, [pc, #248]	; (8004a40 <DMA_CalcBaseAndBitshift+0x124>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d03b      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <DMA_CalcBaseAndBitshift+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d036      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3b      	ldr	r2, [pc, #236]	; (8004a48 <DMA_CalcBaseAndBitshift+0x12c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d031      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a39      	ldr	r2, [pc, #228]	; (8004a4c <DMA_CalcBaseAndBitshift+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02c      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a38      	ldr	r2, [pc, #224]	; (8004a50 <DMA_CalcBaseAndBitshift+0x134>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d027      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a36      	ldr	r2, [pc, #216]	; (8004a54 <DMA_CalcBaseAndBitshift+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <DMA_CalcBaseAndBitshift+0x13c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01d      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a33      	ldr	r2, [pc, #204]	; (8004a5c <DMA_CalcBaseAndBitshift+0x140>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a32      	ldr	r2, [pc, #200]	; (8004a60 <DMA_CalcBaseAndBitshift+0x144>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a30      	ldr	r2, [pc, #192]	; (8004a64 <DMA_CalcBaseAndBitshift+0x148>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <DMA_CalcBaseAndBitshift+0x14c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2d      	ldr	r2, [pc, #180]	; (8004a6c <DMA_CalcBaseAndBitshift+0x150>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <DMA_CalcBaseAndBitshift+0xa8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <DMA_CalcBaseAndBitshift+0x154>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <DMA_CalcBaseAndBitshift+0xac>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <DMA_CalcBaseAndBitshift+0xae>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d024      	beq.n	8004a18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3b10      	subs	r3, #16
 80049d6:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <DMA_CalcBaseAndBitshift+0x158>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <DMA_CalcBaseAndBitshift+0x15c>)
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d908      	bls.n	8004a08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <DMA_CalcBaseAndBitshift+0x160>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	1d1a      	adds	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58
 8004a06:	e00d      	b.n	8004a24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <DMA_CalcBaseAndBitshift+0x160>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6593      	str	r3, [r2, #88]	; 0x58
 8004a16:	e005      	b.n	8004a24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40020010 	.word	0x40020010
 8004a38:	40020028 	.word	0x40020028
 8004a3c:	40020040 	.word	0x40020040
 8004a40:	40020058 	.word	0x40020058
 8004a44:	40020070 	.word	0x40020070
 8004a48:	40020088 	.word	0x40020088
 8004a4c:	400200a0 	.word	0x400200a0
 8004a50:	400200b8 	.word	0x400200b8
 8004a54:	40020410 	.word	0x40020410
 8004a58:	40020428 	.word	0x40020428
 8004a5c:	40020440 	.word	0x40020440
 8004a60:	40020458 	.word	0x40020458
 8004a64:	40020470 	.word	0x40020470
 8004a68:	40020488 	.word	0x40020488
 8004a6c:	400204a0 	.word	0x400204a0
 8004a70:	400204b8 	.word	0x400204b8
 8004a74:	aaaaaaab 	.word	0xaaaaaaab
 8004a78:	0800b4ec 	.word	0x0800b4ec
 8004a7c:	fffffc00 	.word	0xfffffc00

08004a80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d120      	bne.n	8004ad6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d858      	bhi.n	8004b4e <DMA_CheckFifoParam+0xce>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <DMA_CheckFifoParam+0x24>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac7 	.word	0x08004ac7
 8004aac:	08004ab5 	.word	0x08004ab5
 8004ab0:	08004b4f 	.word	0x08004b4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d048      	beq.n	8004b52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac4:	e045      	b.n	8004b52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ace:	d142      	bne.n	8004b56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad4:	e03f      	b.n	8004b56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ade:	d123      	bne.n	8004b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d838      	bhi.n	8004b5a <DMA_CheckFifoParam+0xda>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <DMA_CheckFifoParam+0x70>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b01 	.word	0x08004b01
 8004af4:	08004b07 	.word	0x08004b07
 8004af8:	08004b01 	.word	0x08004b01
 8004afc:	08004b19 	.word	0x08004b19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
        break;
 8004b04:	e030      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d025      	beq.n	8004b5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b16:	e022      	b.n	8004b5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b20:	d11f      	bne.n	8004b62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b26:	e01c      	b.n	8004b62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d902      	bls.n	8004b36 <DMA_CheckFifoParam+0xb6>
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d003      	beq.n	8004b3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b34:	e018      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
        break;
 8004b3a:	e015      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00e      	beq.n	8004b66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004b4c:	e00b      	b.n	8004b66 <DMA_CheckFifoParam+0xe6>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e00a      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e008      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e006      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e004      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
        break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <DMA_CheckFifoParam+0xe8>
    break;
 8004b66:	bf00      	nop
    }
  }

  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop

08004b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a36      	ldr	r2, [pc, #216]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01a      	beq.n	8004c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	3b08      	subs	r3, #8
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c14:	e024      	b.n	8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3b10      	subs	r3, #16
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d806      	bhi.n	8004c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d902      	bls.n	8004c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	58025408 	.word	0x58025408
 8004c70:	5802541c 	.word	0x5802541c
 8004c74:	58025430 	.word	0x58025430
 8004c78:	58025444 	.word	0x58025444
 8004c7c:	58025458 	.word	0x58025458
 8004c80:	5802546c 	.word	0x5802546c
 8004c84:	58025480 	.word	0x58025480
 8004c88:	58025494 	.word	0x58025494
 8004c8c:	cccccccd 	.word	0xcccccccd
 8004c90:	16009600 	.word	0x16009600
 8004c94:	58025880 	.word	0x58025880
 8004c98:	aaaaaaab 	.word	0xaaaaaaab
 8004c9c:	400204b8 	.word	0x400204b8
 8004ca0:	4002040f 	.word	0x4002040f
 8004ca4:	10008200 	.word	0x10008200
 8004ca8:	40020880 	.word	0x40020880

08004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04a      	beq.n	8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d847      	bhi.n	8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d101      	bne.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d34:	671a      	str	r2, [r3, #112]	; 0x70
 8004d36:	e009      	b.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	58025408 	.word	0x58025408
 8004d68:	5802541c 	.word	0x5802541c
 8004d6c:	58025430 	.word	0x58025430
 8004d70:	58025444 	.word	0x58025444
 8004d74:	58025458 	.word	0x58025458
 8004d78:	5802546c 	.word	0x5802546c
 8004d7c:	58025480 	.word	0x58025480
 8004d80:	58025494 	.word	0x58025494
 8004d84:	1600963f 	.word	0x1600963f
 8004d88:	58025940 	.word	0x58025940
 8004d8c:	1000823f 	.word	0x1000823f
 8004d90:	40020940 	.word	0x40020940

08004d94 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d105      	bne.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e325      	b.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e31e      	b.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f040 830d 	bne.w	80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a82      	ldr	r2, [pc, #520]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a81      	ldr	r2, [pc, #516]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d045      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7f      	ldr	r2, [pc, #508]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d040      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7e      	ldr	r2, [pc, #504]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03b      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7c      	ldr	r2, [pc, #496]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d036      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7b      	ldr	r2, [pc, #492]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d031      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a79      	ldr	r2, [pc, #484]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a78      	ldr	r2, [pc, #480]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d027      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a76      	ldr	r2, [pc, #472]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a75      	ldr	r2, [pc, #468]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a73      	ldr	r2, [pc, #460]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a72      	ldr	r2, [pc, #456]	; (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a70      	ldr	r2, [pc, #448]	; (800502c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6f      	ldr	r2, [pc, #444]	; (8005030 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6d      	ldr	r2, [pc, #436]	; (8005034 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6c      	ldr	r2, [pc, #432]	; (8005038 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ea4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	223f      	movs	r2, #63	; 0x3f
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e018      	b.n	8004efa <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f248 0320 	movw	r3, #32800	; 0x8020
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fb41 	bl	8005588 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d072      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d06d      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a39      	ldr	r2, [pc, #228]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d068      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a37      	ldr	r2, [pc, #220]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d063      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a36      	ldr	r2, [pc, #216]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d05e      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a34      	ldr	r2, [pc, #208]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d059      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a33      	ldr	r2, [pc, #204]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d054      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04f      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04a      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d045      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d036      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d02c      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d027      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	; (800503c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d132      	bne.n	800505c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e031      	b.n	800505e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004ffa:	bf00      	nop
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
 800503c:	58025408 	.word	0x58025408
 8005040:	5802541c 	.word	0x5802541c
 8005044:	58025430 	.word	0x58025430
 8005048:	58025444 	.word	0x58025444
 800504c:	58025458 	.word	0x58025458
 8005050:	5802546c 	.word	0x5802546c
 8005054:	58025480 	.word	0x58025480
 8005058:	58025494 	.word	0x58025494
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800506a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800507c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a85      	ldr	r2, [pc, #532]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04a      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a83      	ldr	r2, [pc, #524]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d045      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a82      	ldr	r2, [pc, #520]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d040      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a80      	ldr	r2, [pc, #512]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a7f      	ldr	r2, [pc, #508]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d036      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7d      	ldr	r2, [pc, #500]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d031      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7c      	ldr	r2, [pc, #496]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d02c      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7a      	ldr	r2, [pc, #488]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d027      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a79      	ldr	r2, [pc, #484]	; (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a77      	ldr	r2, [pc, #476]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a76      	ldr	r2, [pc, #472]	; (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a74      	ldr	r2, [pc, #464]	; (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a73      	ldr	r2, [pc, #460]	; (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a71      	ldr	r2, [pc, #452]	; (80052cc <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a70      	ldr	r2, [pc, #448]	; (80052d0 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6e      	ldr	r2, [pc, #440]	; (80052d4 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d022      	beq.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 021e 	bic.w	r2, r3, #30
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0216 	orr.w	r2, r2, #22
 800513a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800514a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e019      	b.n	80051a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 020e 	bic.w	r2, r3, #14
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 020a 	orr.w	r2, r2, #10
 8005180:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0204 	orr.w	r2, r2, #4
 80051a0:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d072      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d06d      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d068      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a37      	ldr	r2, [pc, #220]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d063      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d05e      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a34      	ldr	r2, [pc, #208]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d059      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d054      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04f      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d04a      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d045      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d040      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d03b      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d036      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d031      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d02c      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d027      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01d      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d132      	bne.n	80052f8 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005292:	2301      	movs	r3, #1
 8005294:	e031      	b.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005296:	bf00      	nop
 8005298:	40020010 	.word	0x40020010
 800529c:	40020028 	.word	0x40020028
 80052a0:	40020040 	.word	0x40020040
 80052a4:	40020058 	.word	0x40020058
 80052a8:	40020070 	.word	0x40020070
 80052ac:	40020088 	.word	0x40020088
 80052b0:	400200a0 	.word	0x400200a0
 80052b4:	400200b8 	.word	0x400200b8
 80052b8:	40020410 	.word	0x40020410
 80052bc:	40020428 	.word	0x40020428
 80052c0:	40020440 	.word	0x40020440
 80052c4:	40020458 	.word	0x40020458
 80052c8:	40020470 	.word	0x40020470
 80052cc:	40020488 	.word	0x40020488
 80052d0:	400204a0 	.word	0x400204a0
 80052d4:	400204b8 	.word	0x400204b8
 80052d8:	58025408 	.word	0x58025408
 80052dc:	5802541c 	.word	0x5802541c
 80052e0:	58025430 	.word	0x58025430
 80052e4:	58025444 	.word	0x58025444
 80052e8:	58025458 	.word	0x58025458
 80052ec:	5802546c 	.word	0x5802546c
 80052f0:	58025480 	.word	0x58025480
 80052f4:	58025494 	.word	0x58025494
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01a      	beq.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005332:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d04a      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d045      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a32      	ldr	r2, [pc, #200]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d040      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a31      	ldr	r2, [pc, #196]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d03b      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d036      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d031      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02c      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d027      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01d      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a26      	ldr	r2, [pc, #152]	; (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a25      	ldr	r2, [pc, #148]	; (800543c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a23      	ldr	r2, [pc, #140]	; (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d108      	bne.n	80053e6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	e00e      	b.n	8005404 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e005      	b.n	8005404 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8

08005450 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a39      	ldr	r2, [pc, #228]	; (8005548 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d04a      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a37      	ldr	r2, [pc, #220]	; (800554c <HAL_DMAEx_ChangeMemory+0xfc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d045      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a36      	ldr	r2, [pc, #216]	; (8005550 <HAL_DMAEx_ChangeMemory+0x100>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d040      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a34      	ldr	r2, [pc, #208]	; (8005554 <HAL_DMAEx_ChangeMemory+0x104>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d03b      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a33      	ldr	r2, [pc, #204]	; (8005558 <HAL_DMAEx_ChangeMemory+0x108>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d036      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a31      	ldr	r2, [pc, #196]	; (800555c <HAL_DMAEx_ChangeMemory+0x10c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d031      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a30      	ldr	r2, [pc, #192]	; (8005560 <HAL_DMAEx_ChangeMemory+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d02c      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2e      	ldr	r2, [pc, #184]	; (8005564 <HAL_DMAEx_ChangeMemory+0x114>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d027      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_DMAEx_ChangeMemory+0x118>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d022      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2b      	ldr	r2, [pc, #172]	; (800556c <HAL_DMAEx_ChangeMemory+0x11c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <HAL_DMAEx_ChangeMemory+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d018      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a28      	ldr	r2, [pc, #160]	; (8005574 <HAL_DMAEx_ChangeMemory+0x124>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a27      	ldr	r2, [pc, #156]	; (8005578 <HAL_DMAEx_ChangeMemory+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a25      	ldr	r2, [pc, #148]	; (800557c <HAL_DMAEx_ChangeMemory+0x12c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a24      	ldr	r2, [pc, #144]	; (8005580 <HAL_DMAEx_ChangeMemory+0x130>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_DMAEx_ChangeMemory+0xae>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_DMAEx_ChangeMemory+0x134>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_DMAEx_ChangeMemory+0xb2>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_DMAEx_ChangeMemory+0xb4>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	e010      	b.n	800553a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	611a      	str	r2, [r3, #16]
 8005520:	e00b      	b.n	800553a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e003      	b.n	800553a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8

08005588 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a46      	ldr	r2, [pc, #280]	; (80056b4 <DMA_MultiBufferSetConfig+0x12c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04a      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a44      	ldr	r2, [pc, #272]	; (80056b8 <DMA_MultiBufferSetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d045      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a43      	ldr	r2, [pc, #268]	; (80056bc <DMA_MultiBufferSetConfig+0x134>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d040      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a41      	ldr	r2, [pc, #260]	; (80056c0 <DMA_MultiBufferSetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d03b      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a40      	ldr	r2, [pc, #256]	; (80056c4 <DMA_MultiBufferSetConfig+0x13c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d036      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3e      	ldr	r2, [pc, #248]	; (80056c8 <DMA_MultiBufferSetConfig+0x140>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <DMA_MultiBufferSetConfig+0x144>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02c      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <DMA_MultiBufferSetConfig+0x148>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d027      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <DMA_MultiBufferSetConfig+0x14c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <DMA_MultiBufferSetConfig+0x150>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01d      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a37      	ldr	r2, [pc, #220]	; (80056dc <DMA_MultiBufferSetConfig+0x154>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <DMA_MultiBufferSetConfig+0x158>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <DMA_MultiBufferSetConfig+0x15c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <DMA_MultiBufferSetConfig+0x160>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a31      	ldr	r2, [pc, #196]	; (80056ec <DMA_MultiBufferSetConfig+0x164>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <DMA_MultiBufferSetConfig+0xae>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <DMA_MultiBufferSetConfig+0x168>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <DMA_MultiBufferSetConfig+0xb2>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <DMA_MultiBufferSetConfig+0xb4>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d019      	beq.n	8005674 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d108      	bne.n	8005662 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005660:	e021      	b.n	80056a6 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	60da      	str	r2, [r3, #12]
}
 8005672:	e018      	b.n	80056a6 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d108      	bne.n	8005696 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	60da      	str	r2, [r3, #12]
}
 8005694:	e007      	b.n	80056a6 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	; 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005702:	4b89      	ldr	r3, [pc, #548]	; (8005928 <HAL_GPIO_Init+0x234>)
 8005704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005706:	e194      	b.n	8005a32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8186 	beq.w	8005a2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d00b      	beq.n	8005740 <HAL_GPIO_Init+0x4c>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d007      	beq.n	8005740 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005734:	2b11      	cmp	r3, #17
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b12      	cmp	r3, #18
 800573e:	d130      	bne.n	80057a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005776:	2201      	movs	r2, #1
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0201 	and.w	r2, r3, #1
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	2203      	movs	r2, #3
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d003      	beq.n	80057e2 <HAL_GPIO_Init+0xee>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b12      	cmp	r3, #18
 80057e0:	d123      	bne.n	800582a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	08da      	lsrs	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3208      	adds	r2, #8
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	08da      	lsrs	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3208      	adds	r2, #8
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	2203      	movs	r2, #3
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80e0 	beq.w	8005a2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586c:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_GPIO_Init+0x238>)
 800586e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005872:	4a2e      	ldr	r2, [pc, #184]	; (800592c <HAL_GPIO_Init+0x238>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800587c:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_GPIO_Init+0x238>)
 800587e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800588a:	4a29      	ldr	r2, [pc, #164]	; (8005930 <HAL_GPIO_Init+0x23c>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a20      	ldr	r2, [pc, #128]	; (8005934 <HAL_GPIO_Init+0x240>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d052      	beq.n	800595c <HAL_GPIO_Init+0x268>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <HAL_GPIO_Init+0x244>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d031      	beq.n	8005922 <HAL_GPIO_Init+0x22e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1e      	ldr	r2, [pc, #120]	; (800593c <HAL_GPIO_Init+0x248>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <HAL_GPIO_Init+0x22a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <HAL_GPIO_Init+0x24c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d025      	beq.n	800591a <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_GPIO_Init+0x250>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <HAL_GPIO_Init+0x254>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d019      	beq.n	8005912 <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1a      	ldr	r2, [pc, #104]	; (800594c <HAL_GPIO_Init+0x258>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <HAL_GPIO_Init+0x25c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00d      	beq.n	800590a <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <HAL_GPIO_Init+0x260>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a17      	ldr	r2, [pc, #92]	; (8005958 <HAL_GPIO_Init+0x264>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_GPIO_Init+0x20e>
 80058fe:	2309      	movs	r3, #9
 8005900:	e02d      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005902:	230a      	movs	r3, #10
 8005904:	e02b      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005906:	2308      	movs	r3, #8
 8005908:	e029      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800590a:	2307      	movs	r3, #7
 800590c:	e027      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800590e:	2306      	movs	r3, #6
 8005910:	e025      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005912:	2305      	movs	r3, #5
 8005914:	e023      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005916:	2304      	movs	r3, #4
 8005918:	e021      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800591a:	2303      	movs	r3, #3
 800591c:	e01f      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800591e:	2302      	movs	r3, #2
 8005920:	e01d      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005922:	2301      	movs	r3, #1
 8005924:	e01b      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005926:	bf00      	nop
 8005928:	58000080 	.word	0x58000080
 800592c:	58024400 	.word	0x58024400
 8005930:	58000400 	.word	0x58000400
 8005934:	58020000 	.word	0x58020000
 8005938:	58020400 	.word	0x58020400
 800593c:	58020800 	.word	0x58020800
 8005940:	58020c00 	.word	0x58020c00
 8005944:	58021000 	.word	0x58021000
 8005948:	58021400 	.word	0x58021400
 800594c:	58021800 	.word	0x58021800
 8005950:	58021c00 	.word	0x58021c00
 8005954:	58022000 	.word	0x58022000
 8005958:	58022400 	.word	0x58022400
 800595c:	2300      	movs	r3, #0
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	f002 0203 	and.w	r2, r2, #3
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	4093      	lsls	r3, r2
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800596e:	4938      	ldr	r1, [pc, #224]	; (8005a50 <HAL_GPIO_Init+0x35c>)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f ae63 	bne.w	8005708 <HAL_GPIO_Init+0x14>
  }
}
 8005a42:	bf00      	nop
 8005a44:	3724      	adds	r7, #36	; 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	58000400 	.word	0x58000400

08005a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
 8005a60:	4613      	mov	r3, r2
 8005a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a64:	787b      	ldrb	r3, [r7, #1]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a70:	e003      	b.n	8005a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a72:	887b      	ldrh	r3, [r7, #2]
 8005a74:	041a      	lsls	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e07f      	b.n	8005b9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb f86e 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	e006      	b.n	8005b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d104      	bne.n	8005b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <HAL_I2C_Init+0x11c>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	ea42 0103 	orr.w	r1, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	02008000 	.word	0x02008000

08005ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80da 	bne.w	8005d7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_I2C_Master_Transmit+0x30>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0d3      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005be0:	f7fb fe10 	bl	8001804 <HAL_GetTick>
 8005be4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2319      	movs	r3, #25
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fa5e 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0be      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2221      	movs	r2, #33	; 0x21
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	893a      	ldrh	r2, [r7, #8]
 8005c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2bff      	cmp	r3, #255	; 0xff
 8005c32:	d90e      	bls.n	8005c52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	22ff      	movs	r2, #255	; 0xff
 8005c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	8979      	ldrh	r1, [r7, #10]
 8005c42:	4b51      	ldr	r3, [pc, #324]	; (8005d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fb54 	bl	80062f8 <I2C_TransferConfig>
 8005c50:	e06c      	b.n	8005d2c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	4b48      	ldr	r3, [pc, #288]	; (8005d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fb43 	bl	80062f8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005c72:	e05b      	b.n	8005d2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	6a39      	ldr	r1, [r7, #32]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fa5b 	bl	8006134 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e07b      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d034      	beq.n	8005d2c <HAL_I2C_Master_Transmit+0x184>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d130      	bne.n	8005d2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f9ed 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e04d      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2bff      	cmp	r3, #255	; 0xff
 8005cec:	d90e      	bls.n	8005d0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	22ff      	movs	r2, #255	; 0xff
 8005cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	8979      	ldrh	r1, [r7, #10]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 faf7 	bl	80062f8 <I2C_TransferConfig>
 8005d0a:	e00f      	b.n	8005d2c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	8979      	ldrh	r1, [r7, #10]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fae6 	bl	80062f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d19e      	bne.n	8005c74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fa3a 	bl	80061b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e01a      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_I2C_Master_Transmit+0x1e4>)
 8005d5e:	400b      	ands	r3, r1
 8005d60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e000      	b.n	8005d80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	80002000 	.word	0x80002000
 8005d8c:	fe00e800 	.word	0xfe00e800

08005d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	460b      	mov	r3, r1
 8005da4:	813b      	strh	r3, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	f040 80fd 	bne.w	8005fb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_I2C_Mem_Read+0x34>
 8005dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0f1      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_I2C_Mem_Read+0x4e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0ea      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005de6:	f7fb fd0d 	bl	8001804 <HAL_GetTick>
 8005dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2319      	movs	r3, #25
 8005df2:	2201      	movs	r2, #1
 8005df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f95b 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0d5      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2222      	movs	r2, #34	; 0x22
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2240      	movs	r2, #64	; 0x40
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e30:	88f8      	ldrh	r0, [r7, #6]
 8005e32:	893a      	ldrh	r2, [r7, #8]
 8005e34:	8979      	ldrh	r1, [r7, #10]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4603      	mov	r3, r0
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f8bf 	bl	8005fc4 <I2C_RequestMemoryRead>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0ad      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d90e      	bls.n	8005e80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	22ff      	movs	r2, #255	; 0xff
 8005e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	8979      	ldrh	r1, [r7, #10]
 8005e70:	4b52      	ldr	r3, [pc, #328]	; (8005fbc <HAL_I2C_Mem_Read+0x22c>)
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fa3d 	bl	80062f8 <I2C_TransferConfig>
 8005e7e:	e00f      	b.n	8005ea0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	8979      	ldrh	r1, [r7, #10]
 8005e92:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <HAL_I2C_Mem_Read+0x22c>)
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fa2c 	bl	80062f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2104      	movs	r1, #4
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f902 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07c      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d034      	beq.n	8005f60 <HAL_I2C_Mem_Read+0x1d0>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d130      	bne.n	8005f60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f8d3 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e04d      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2bff      	cmp	r3, #255	; 0xff
 8005f20:	d90e      	bls.n	8005f40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	8979      	ldrh	r1, [r7, #10]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f9dd 	bl	80062f8 <I2C_TransferConfig>
 8005f3e:	e00f      	b.n	8005f60 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	8979      	ldrh	r1, [r7, #10]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f9cc 	bl	80062f8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d19a      	bne.n	8005ea0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f920 	bl	80061b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e01a      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2220      	movs	r2, #32
 8005f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6859      	ldr	r1, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_I2C_Mem_Read+0x230>)
 8005f92:	400b      	ands	r3, r1
 8005f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e000      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	80002400 	.word	0x80002400
 8005fc0:	fe00e800 	.word	0xfe00e800

08005fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	813b      	strh	r3, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	8979      	ldrh	r1, [r7, #10]
 8005fe4:	4b20      	ldr	r3, [pc, #128]	; (8006068 <I2C_RequestMemoryRead+0xa4>)
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f984 	bl	80062f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	69b9      	ldr	r1, [r7, #24]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f89d 	bl	8006134 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e02c      	b.n	800605e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800600a:	893b      	ldrh	r3, [r7, #8]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
 8006014:	e015      	b.n	8006042 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006016:	893b      	ldrh	r3, [r7, #8]
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	b29b      	uxth	r3, r3
 800601c:	b2da      	uxtb	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f883 	bl	8006134 <I2C_WaitOnTXISFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e012      	b.n	800605e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006038:	893b      	ldrh	r3, [r7, #8]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2200      	movs	r2, #0
 800604a:	2140      	movs	r1, #64	; 0x40
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f831 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	80002000 	.word	0x80002000

0800606c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d103      	bne.n	800608a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d007      	beq.n	80060a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	619a      	str	r2, [r3, #24]
  }
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c4:	e022      	b.n	800610c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d01e      	beq.n	800610c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fb fb99 	bl	8001804 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d113      	bne.n	800610c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e00f      	b.n	800612c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	429a      	cmp	r2, r3
 8006128:	d0cd      	beq.n	80060c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006140:	e02c      	b.n	800619c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f870 	bl	800622c <I2C_IsAcknowledgeFailed>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e02a      	b.n	80061ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d01e      	beq.n	800619c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fb fb51 	bl	8001804 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d113      	bne.n	800619c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e007      	b.n	80061ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d1cb      	bne.n	8006142 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061c0:	e028      	b.n	8006214 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f830 	bl	800622c <I2C_IsAcknowledgeFailed>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e026      	b.n	8006224 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fb fb15 	bl	8001804 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d113      	bne.n	8006214 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e007      	b.n	8006224 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b20      	cmp	r3, #32
 8006220:	d1cf      	bne.n	80061c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d151      	bne.n	80062ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006246:	e022      	b.n	800628e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d01e      	beq.n	800628e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006250:	f7fb fad8 	bl	8001804 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <I2C_IsAcknowledgeFailed+0x3a>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d113      	bne.n	800628e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e02e      	b.n	80062ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b20      	cmp	r3, #32
 800629a:	d1d5      	bne.n	8006248 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2210      	movs	r2, #16
 80062a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2220      	movs	r2, #32
 80062aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fedd 	bl	800606c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80062be:	400b      	ands	r3, r1
 80062c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f043 0204 	orr.w	r2, r3, #4
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	fe00e800 	.word	0xfe00e800

080062f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	4613      	mov	r3, r2
 8006308:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	0d5b      	lsrs	r3, r3, #21
 8006314:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006318:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <I2C_TransferConfig+0x58>)
 800631a:	430b      	orrs	r3, r1
 800631c:	43db      	mvns	r3, r3
 800631e:	ea02 0103 	and.w	r1, r2, r3
 8006322:	897b      	ldrh	r3, [r7, #10]
 8006324:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006328:	7a7b      	ldrb	r3, [r7, #9]
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	431a      	orrs	r2, r3
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	431a      	orrs	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	03ff63ff 	.word	0x03ff63ff

08006354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b20      	cmp	r3, #32
 8006368:	d138      	bne.n	80063dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006374:	2302      	movs	r3, #2
 8006376:	e032      	b.n	80063de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d139      	bne.n	8006474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800640a:	2302      	movs	r3, #2
 800640c:	e033      	b.n	8006476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2224      	movs	r2, #36	; 0x24
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800643c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e000      	b.n	8006476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006474:	2302      	movs	r3, #2
  }
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800648c:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <HAL_PWREx_ConfigSupply+0x70>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d00a      	beq.n	80064ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <HAL_PWREx_ConfigSupply+0x70>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d001      	beq.n	80064aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e01f      	b.n	80064ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e01d      	b.n	80064ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <HAL_PWREx_ConfigSupply+0x70>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f023 0207 	bic.w	r2, r3, #7
 80064b6:	490f      	ldr	r1, [pc, #60]	; (80064f4 <HAL_PWREx_ConfigSupply+0x70>)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064be:	f7fb f9a1 	bl	8001804 <HAL_GetTick>
 80064c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064c4:	e009      	b.n	80064da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064c6:	f7fb f99d 	bl	8001804 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d4:	d901      	bls.n	80064da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e007      	b.n	80064ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_PWREx_ConfigSupply+0x70>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	d1ee      	bne.n	80064c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	58024800 	.word	0x58024800

080064f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e3ff      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8087 	beq.w	8006626 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006518:	4b99      	ldr	r3, [pc, #612]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006522:	4b97      	ldr	r3, [pc, #604]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b10      	cmp	r3, #16
 800652c:	d007      	beq.n	800653e <HAL_RCC_OscConfig+0x46>
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	2b18      	cmp	r3, #24
 8006532:	d110      	bne.n	8006556 <HAL_RCC_OscConfig+0x5e>
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d10b      	bne.n	8006556 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800653e:	4b90      	ldr	r3, [pc, #576]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d06c      	beq.n	8006624 <HAL_RCC_OscConfig+0x12c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d168      	bne.n	8006624 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e3d9      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655e:	d106      	bne.n	800656e <HAL_RCC_OscConfig+0x76>
 8006560:	4b87      	ldr	r3, [pc, #540]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a86      	ldr	r2, [pc, #536]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e02e      	b.n	80065cc <HAL_RCC_OscConfig+0xd4>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_RCC_OscConfig+0x98>
 8006576:	4b82      	ldr	r3, [pc, #520]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a81      	ldr	r2, [pc, #516]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800657c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4b7f      	ldr	r3, [pc, #508]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7e      	ldr	r2, [pc, #504]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e01d      	b.n	80065cc <HAL_RCC_OscConfig+0xd4>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006598:	d10c      	bne.n	80065b4 <HAL_RCC_OscConfig+0xbc>
 800659a:	4b79      	ldr	r3, [pc, #484]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a78      	ldr	r2, [pc, #480]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	4b76      	ldr	r3, [pc, #472]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a75      	ldr	r2, [pc, #468]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e00b      	b.n	80065cc <HAL_RCC_OscConfig+0xd4>
 80065b4:	4b72      	ldr	r3, [pc, #456]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a71      	ldr	r2, [pc, #452]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4b6f      	ldr	r3, [pc, #444]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6e      	ldr	r2, [pc, #440]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fb f916 	bl	8001804 <HAL_GetTick>
 80065d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065dc:	f7fb f912 	bl	8001804 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b64      	cmp	r3, #100	; 0x64
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e38d      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ee:	4b64      	ldr	r3, [pc, #400]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0xe4>
 80065fa:	e014      	b.n	8006626 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fb f902 	bl	8001804 <HAL_GetTick>
 8006600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006604:	f7fb f8fe 	bl	8001804 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	; 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e379      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006616:	4b5a      	ldr	r3, [pc, #360]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x10c>
 8006622:	e000      	b.n	8006626 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80ae 	beq.w	8006790 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006634:	4b52      	ldr	r3, [pc, #328]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800663c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800663e:	4b50      	ldr	r3, [pc, #320]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HAL_RCC_OscConfig+0x162>
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b18      	cmp	r3, #24
 800664e:	d13a      	bne.n	80066c6 <HAL_RCC_OscConfig+0x1ce>
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d135      	bne.n	80066c6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665a:	4b49      	ldr	r3, [pc, #292]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_RCC_OscConfig+0x17a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e34b      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006672:	f7fb f8f5 	bl	8001860 <HAL_GetREVID>
 8006676:	4602      	mov	r2, r0
 8006678:	f241 0303 	movw	r3, #4099	; 0x1003
 800667c:	429a      	cmp	r2, r3
 800667e:	d817      	bhi.n	80066b0 <HAL_RCC_OscConfig+0x1b8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d108      	bne.n	800669a <HAL_RCC_OscConfig+0x1a2>
 8006688:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006690:	4a3b      	ldr	r2, [pc, #236]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006698:	e07a      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669a:	4b39      	ldr	r3, [pc, #228]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	031b      	lsls	r3, r3, #12
 80066a8:	4935      	ldr	r1, [pc, #212]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ae:	e06f      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b0:	4b33      	ldr	r3, [pc, #204]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	4930      	ldr	r1, [pc, #192]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c4:	e064      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d045      	beq.n	800675a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 0219 	bic.w	r2, r3, #25
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	4929      	ldr	r1, [pc, #164]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fb f890 	bl	8001804 <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fb f88c 	bl	8001804 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e307      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066fa:	4b21      	ldr	r3, [pc, #132]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	f7fb f8ab 	bl	8001860 <HAL_GetREVID>
 800670a:	4602      	mov	r2, r0
 800670c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006710:	429a      	cmp	r2, r3
 8006712:	d817      	bhi.n	8006744 <HAL_RCC_OscConfig+0x24c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d108      	bne.n	800672e <HAL_RCC_OscConfig+0x236>
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006724:	4a16      	ldr	r2, [pc, #88]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672a:	6053      	str	r3, [r2, #4]
 800672c:	e030      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	4910      	ldr	r1, [pc, #64]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
 8006742:	e025      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
 8006744:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	490b      	ldr	r1, [pc, #44]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	e01a      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a08      	ldr	r2, [pc, #32]	; (8006780 <HAL_RCC_OscConfig+0x288>)
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006766:	f7fb f84d 	bl	8001804 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800676c:	e00a      	b.n	8006784 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800676e:	f7fb f849 	bl	8001804 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d903      	bls.n	8006784 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e2c4      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
 8006780:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006784:	4ba4      	ldr	r3, [pc, #656]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1ee      	bne.n	800676e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80a9 	beq.w	80068f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800679e:	4b9e      	ldr	r3, [pc, #632]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067a8:	4b9b      	ldr	r3, [pc, #620]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d007      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2cc>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b18      	cmp	r3, #24
 80067b8:	d13a      	bne.n	8006830 <HAL_RCC_OscConfig+0x338>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d135      	bne.n	8006830 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067c4:	4b94      	ldr	r3, [pc, #592]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_OscConfig+0x2e4>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d001      	beq.n	80067dc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e296      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067dc:	f7fb f840 	bl	8001860 <HAL_GetREVID>
 80067e0:	4602      	mov	r2, r0
 80067e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d817      	bhi.n	800681a <HAL_RCC_OscConfig+0x322>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d108      	bne.n	8006804 <HAL_RCC_OscConfig+0x30c>
 80067f2:	4b89      	ldr	r3, [pc, #548]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067fa:	4a87      	ldr	r2, [pc, #540]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80067fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006800:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006802:	e075      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006804:	4b84      	ldr	r3, [pc, #528]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	069b      	lsls	r3, r3, #26
 8006812:	4981      	ldr	r1, [pc, #516]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006818:	e06a      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800681a:	4b7f      	ldr	r3, [pc, #508]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	497b      	ldr	r1, [pc, #492]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800682a:	4313      	orrs	r3, r2
 800682c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800682e:	e05f      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d042      	beq.n	80068be <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006838:	4b77      	ldr	r3, [pc, #476]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a76      	ldr	r2, [pc, #472]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fa ffde 	bl	8001804 <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800684c:	f7fa ffda 	bl	8001804 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e255      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800685e:	4b6e      	ldr	r3, [pc, #440]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800686a:	f7fa fff9 	bl	8001860 <HAL_GetREVID>
 800686e:	4602      	mov	r2, r0
 8006870:	f241 0303 	movw	r3, #4099	; 0x1003
 8006874:	429a      	cmp	r2, r3
 8006876:	d817      	bhi.n	80068a8 <HAL_RCC_OscConfig+0x3b0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	2b20      	cmp	r3, #32
 800687e:	d108      	bne.n	8006892 <HAL_RCC_OscConfig+0x39a>
 8006880:	4b65      	ldr	r3, [pc, #404]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006888:	4a63      	ldr	r2, [pc, #396]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800688a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688e:	6053      	str	r3, [r2, #4]
 8006890:	e02e      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
 8006892:	4b61      	ldr	r3, [pc, #388]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	069b      	lsls	r3, r3, #26
 80068a0:	495d      	ldr	r1, [pc, #372]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	604b      	str	r3, [r1, #4]
 80068a6:	e023      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
 80068a8:	4b5b      	ldr	r3, [pc, #364]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	061b      	lsls	r3, r3, #24
 80068b6:	4958      	ldr	r1, [pc, #352]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60cb      	str	r3, [r1, #12]
 80068bc:	e018      	b.n	80068f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068be:	4b56      	ldr	r3, [pc, #344]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a55      	ldr	r2, [pc, #340]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ca:	f7fa ff9b 	bl	8001804 <HAL_GetTick>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068d2:	f7fa ff97 	bl	8001804 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e212      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068e4:	4b4c      	ldr	r3, [pc, #304]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f0      	bne.n	80068d2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d036      	beq.n	800696a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d019      	beq.n	8006938 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006904:	4b44      	ldr	r3, [pc, #272]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006908:	4a43      	ldr	r2, [pc, #268]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006910:	f7fa ff78 	bl	8001804 <HAL_GetTick>
 8006914:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006918:	f7fa ff74 	bl	8001804 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e1ef      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800692a:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x420>
 8006936:	e018      	b.n	800696a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006938:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	4a36      	ldr	r2, [pc, #216]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fa ff5e 	bl	8001804 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694c:	f7fa ff5a 	bl	8001804 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e1d5      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800695e:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d036      	beq.n	80069e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d019      	beq.n	80069b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 8006984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006988:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800698a:	f7fa ff3b 	bl	8001804 <HAL_GetTick>
 800698e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006992:	f7fa ff37 	bl	8001804 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e1b2      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069a4:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x49a>
 80069b0:	e018      	b.n	80069e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069b2:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80069b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069be:	f7fa ff21 	bl	8001804 <HAL_GetTick>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069c6:	f7fa ff1d 	bl	8001804 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e198      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_RCC_OscConfig+0x520>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8085 	beq.w	8006afc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_OscConfig+0x524>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_OscConfig+0x524>)
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069fe:	f7fa ff01 	bl	8001804 <HAL_GetTick>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a04:	e00c      	b.n	8006a20 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a06:	f7fa fefd 	bl	8001804 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b64      	cmp	r3, #100	; 0x64
 8006a12:	d905      	bls.n	8006a20 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e178      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a20:	4b96      	ldr	r3, [pc, #600]	; (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0ec      	beq.n	8006a06 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d106      	bne.n	8006a42 <HAL_RCC_OscConfig+0x54a>
 8006a34:	4b92      	ldr	r3, [pc, #584]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	4a91      	ldr	r2, [pc, #580]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a40:	e02d      	b.n	8006a9e <HAL_RCC_OscConfig+0x5a6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x56c>
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	4a8c      	ldr	r2, [pc, #560]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6713      	str	r3, [r2, #112]	; 0x70
 8006a56:	4b8a      	ldr	r3, [pc, #552]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	4a89      	ldr	r2, [pc, #548]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	6713      	str	r3, [r2, #112]	; 0x70
 8006a62:	e01c      	b.n	8006a9e <HAL_RCC_OscConfig+0x5a6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d10c      	bne.n	8006a86 <HAL_RCC_OscConfig+0x58e>
 8006a6c:	4b84      	ldr	r3, [pc, #528]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	4a83      	ldr	r2, [pc, #524]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a72:	f043 0304 	orr.w	r3, r3, #4
 8006a76:	6713      	str	r3, [r2, #112]	; 0x70
 8006a78:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	4a80      	ldr	r2, [pc, #512]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	6713      	str	r3, [r2, #112]	; 0x70
 8006a84:	e00b      	b.n	8006a9e <HAL_RCC_OscConfig+0x5a6>
 8006a86:	4b7e      	ldr	r3, [pc, #504]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	4a7d      	ldr	r2, [pc, #500]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	6713      	str	r3, [r2, #112]	; 0x70
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a96:	4a7a      	ldr	r2, [pc, #488]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d015      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fa fead 	bl	8001804 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fa fea9 	bl	8001804 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e122      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ac4:	4b6e      	ldr	r3, [pc, #440]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ee      	beq.n	8006aae <HAL_RCC_OscConfig+0x5b6>
 8006ad0:	e014      	b.n	8006afc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad2:	f7fa fe97 	bl	8001804 <HAL_GetTick>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fa fe93 	bl	8001804 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e10c      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006af0:	4b63      	ldr	r3, [pc, #396]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ee      	bne.n	8006ada <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8101 	beq.w	8006d08 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b06:	4b5e      	ldr	r3, [pc, #376]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b0e:	2b18      	cmp	r3, #24
 8006b10:	f000 80bc 	beq.w	8006c8c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f040 8095 	bne.w	8006c48 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1e:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a57      	ldr	r2, [pc, #348]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2a:	f7fa fe6b 	bl	8001804 <HAL_GetTick>
 8006b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b30:	e008      	b.n	8006b44 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b32:	f7fa fe67 	bl	8001804 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e0e2      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b44:	4b4e      	ldr	r3, [pc, #312]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f0      	bne.n	8006b32 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b50:	4b4b      	ldr	r3, [pc, #300]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b54:	4b4b      	ldr	r3, [pc, #300]	; (8006c84 <HAL_RCC_OscConfig+0x78c>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b60:	0112      	lsls	r2, r2, #4
 8006b62:	430a      	orrs	r2, r1
 8006b64:	4946      	ldr	r1, [pc, #280]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	628b      	str	r3, [r1, #40]	; 0x28
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	025b      	lsls	r3, r3, #9
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	3b01      	subs	r3, #1
 8006b86:	041b      	lsls	r3, r3, #16
 8006b88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	3b01      	subs	r3, #1
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b9a:	4939      	ldr	r1, [pc, #228]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ba0:	4b37      	ldr	r3, [pc, #220]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a36      	ldr	r2, [pc, #216]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bac:	4b34      	ldr	r3, [pc, #208]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb0:	4b35      	ldr	r3, [pc, #212]	; (8006c88 <HAL_RCC_OscConfig+0x790>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bb8:	00d2      	lsls	r2, r2, #3
 8006bba:	4931      	ldr	r1, [pc, #196]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	f023 020c 	bic.w	r2, r3, #12
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	492c      	ldr	r1, [pc, #176]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bd2:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	f023 0202 	bic.w	r2, r3, #2
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	4928      	ldr	r1, [pc, #160]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006be4:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf0:	4b23      	ldr	r3, [pc, #140]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a22      	ldr	r2, [pc, #136]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006bfc:	4b20      	ldr	r3, [pc, #128]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fa fdf0 	bl	8001804 <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fa fdec 	bl	8001804 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e067      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c3a:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x730>
 8006c46:	e05f      	b.n	8006d08 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fa fdd6 	bl	8001804 <HAL_GetTick>
 8006c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fa fdd2 	bl	8001804 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e04d      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x764>
 8006c7a:	e045      	b.n	8006d08 <HAL_RCC_OscConfig+0x810>
 8006c7c:	58024800 	.word	0x58024800
 8006c80:	58024400 	.word	0x58024400
 8006c84:	fffffc0c 	.word	0xfffffc0c
 8006c88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <HAL_RCC_OscConfig+0x81c>)
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_OscConfig+0x81c>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d031      	beq.n	8006d04 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 0203 	and.w	r2, r3, #3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d12a      	bne.n	8006d04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	091b      	lsrs	r3, r3, #4
 8006cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d122      	bne.n	8006d04 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d11a      	bne.n	8006d04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	0a5b      	lsrs	r3, r3, #9
 8006cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d111      	bne.n	8006d04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d108      	bne.n	8006d04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	0e1b      	lsrs	r3, r3, #24
 8006cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3730      	adds	r7, #48	; 0x30
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	58024400 	.word	0x58024400

08006d18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e19c      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d2c:	4b8a      	ldr	r3, [pc, #552]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d910      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3a:	4b87      	ldr	r3, [pc, #540]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 020f 	bic.w	r2, r3, #15
 8006d42:	4985      	ldr	r1, [pc, #532]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b83      	ldr	r3, [pc, #524]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e184      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d010      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	4b7b      	ldr	r3, [pc, #492]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d908      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d78:	4b78      	ldr	r3, [pc, #480]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	4975      	ldr	r1, [pc, #468]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	4b70      	ldr	r3, [pc, #448]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d908      	bls.n	8006db8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006da6:	4b6d      	ldr	r3, [pc, #436]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	496a      	ldr	r1, [pc, #424]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d010      	beq.n	8006de6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d908      	bls.n	8006de6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	495e      	ldr	r1, [pc, #376]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d010      	beq.n	8006e14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d908      	bls.n	8006e14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4953      	ldr	r1, [pc, #332]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	4b4d      	ldr	r3, [pc, #308]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d908      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e30:	4b4a      	ldr	r3, [pc, #296]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f023 020f 	bic.w	r2, r3, #15
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4947      	ldr	r1, [pc, #284]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d055      	beq.n	8006efa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e4e:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4940      	ldr	r1, [pc, #256]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e68:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d121      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0f6      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d107      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d115      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0ea      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e98:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0de      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0d6      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f023 0207 	bic.w	r2, r3, #7
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4925      	ldr	r1, [pc, #148]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eca:	f7fa fc9b 	bl	8001804 <HAL_GetTick>
 8006ece:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed2:	f7fa fc97 	bl	8001804 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0be      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d1eb      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f023 020f 	bic.w	r2, r3, #15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	490e      	ldr	r1, [pc, #56]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d214      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 020f 	bic.w	r2, r3, #15
 8006f3e:	4906      	ldr	r1, [pc, #24]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e086      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
 8006f58:	52002000 	.word	0x52002000
 8006f5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	4b3f      	ldr	r3, [pc, #252]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d208      	bcs.n	8006f8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f7c:	4b3c      	ldr	r3, [pc, #240]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	4939      	ldr	r1, [pc, #228]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	4b34      	ldr	r3, [pc, #208]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d208      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	492e      	ldr	r1, [pc, #184]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d010      	beq.n	8006fea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	4b28      	ldr	r3, [pc, #160]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d208      	bcs.n	8006fea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	4922      	ldr	r1, [pc, #136]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69da      	ldr	r2, [r3, #28]
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007002:	429a      	cmp	r2, r3
 8007004:	d208      	bcs.n	8007018 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	4917      	ldr	r1, [pc, #92]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007014:	4313      	orrs	r3, r2
 8007016:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007018:	f000 f89e 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800701c:	4601      	mov	r1, r0
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	4a12      	ldr	r2, [pc, #72]	; (8007074 <HAL_RCC_ClockConfig+0x35c>)
 800702a:	5cd3      	ldrb	r3, [r2, r3]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	fa21 f303 	lsr.w	r3, r1, r3
 8007034:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007036:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <HAL_RCC_ClockConfig+0x35c>)
 8007040:	5cd3      	ldrb	r3, [r2, r3]
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <HAL_RCC_ClockConfig+0x360>)
 800704e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <HAL_RCC_ClockConfig+0x364>)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <HAL_RCC_ClockConfig+0x368>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7fa fb88 	bl	8001770 <HAL_InitTick>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	58024400 	.word	0x58024400
 8007074:	0800b4dc 	.word	0x0800b4dc
 8007078:	24000004 	.word	0x24000004
 800707c:	24000000 	.word	0x24000000
 8007080:	24000008 	.word	0x24000008

08007084 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d12a      	bne.n	80070ec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007096:	4b2d      	ldr	r3, [pc, #180]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 8007098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80070b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ba:	2302      	movs	r3, #2
 80070bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070be:	2303      	movs	r3, #3
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80070ca:	f107 031c 	add.w	r3, r7, #28
 80070ce:	4619      	mov	r1, r3
 80070d0:	481f      	ldr	r0, [pc, #124]	; (8007150 <HAL_RCC_MCOConfig+0xcc>)
 80070d2:	f7fe fb0f 	bl	80056f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	430b      	orrs	r3, r1
 80070e4:	4919      	ldr	r1, [pc, #100]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80070ea:	e02a      	b.n	8007142 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80070ec:	4b17      	ldr	r3, [pc, #92]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 80070fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800710a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800710e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007110:	2302      	movs	r3, #2
 8007112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007114:	2303      	movs	r3, #3
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007118:	2300      	movs	r3, #0
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800711c:	2300      	movs	r3, #0
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007120:	f107 031c 	add.w	r3, r7, #28
 8007124:	4619      	mov	r1, r3
 8007126:	480b      	ldr	r0, [pc, #44]	; (8007154 <HAL_RCC_MCOConfig+0xd0>)
 8007128:	f7fe fae4 	bl	80056f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	01d9      	lsls	r1, r3, #7
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	430b      	orrs	r3, r1
 800713c:	4903      	ldr	r1, [pc, #12]	; (800714c <HAL_RCC_MCOConfig+0xc8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	610b      	str	r3, [r1, #16]
}
 8007142:	bf00      	nop
 8007144:	3730      	adds	r7, #48	; 0x30
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
 8007150:	58020000 	.word	0x58020000
 8007154:	58020800 	.word	0x58020800

08007158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007158:	b480      	push	{r7}
 800715a:	b089      	sub	sp, #36	; 0x24
 800715c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800715e:	4baf      	ldr	r3, [pc, #700]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007166:	2b18      	cmp	r3, #24
 8007168:	f200 814e 	bhi.w	8007408 <HAL_RCC_GetSysClockFreq+0x2b0>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071d9 	.word	0x080071d9
 8007178:	08007409 	.word	0x08007409
 800717c:	08007409 	.word	0x08007409
 8007180:	08007409 	.word	0x08007409
 8007184:	08007409 	.word	0x08007409
 8007188:	08007409 	.word	0x08007409
 800718c:	08007409 	.word	0x08007409
 8007190:	08007409 	.word	0x08007409
 8007194:	080071ff 	.word	0x080071ff
 8007198:	08007409 	.word	0x08007409
 800719c:	08007409 	.word	0x08007409
 80071a0:	08007409 	.word	0x08007409
 80071a4:	08007409 	.word	0x08007409
 80071a8:	08007409 	.word	0x08007409
 80071ac:	08007409 	.word	0x08007409
 80071b0:	08007409 	.word	0x08007409
 80071b4:	08007205 	.word	0x08007205
 80071b8:	08007409 	.word	0x08007409
 80071bc:	08007409 	.word	0x08007409
 80071c0:	08007409 	.word	0x08007409
 80071c4:	08007409 	.word	0x08007409
 80071c8:	08007409 	.word	0x08007409
 80071cc:	08007409 	.word	0x08007409
 80071d0:	08007409 	.word	0x08007409
 80071d4:	0800720b 	.word	0x0800720b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d8:	4b90      	ldr	r3, [pc, #576]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e4:	4b8d      	ldr	r3, [pc, #564]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a8c      	ldr	r2, [pc, #560]	; (8007420 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071f6:	e10a      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071f8:	4b89      	ldr	r3, [pc, #548]	; (8007420 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80071fa:	61bb      	str	r3, [r7, #24]
    break;
 80071fc:	e107      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80071fe:	4b89      	ldr	r3, [pc, #548]	; (8007424 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007200:	61bb      	str	r3, [r7, #24]
    break;
 8007202:	e104      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007204:	4b88      	ldr	r3, [pc, #544]	; (8007428 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007206:	61bb      	str	r3, [r7, #24]
    break;
 8007208:	e101      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720a:	4b84      	ldr	r3, [pc, #528]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007214:	4b81      	ldr	r3, [pc, #516]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007220:	4b7e      	ldr	r3, [pc, #504]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800722a:	4b7c      	ldr	r3, [pc, #496]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800722c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722e:	08db      	lsrs	r3, r3, #3
 8007230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	fb02 f303 	mul.w	r3, r2, r3
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80da 	beq.w	8007402 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d05a      	beq.n	800730a <HAL_RCC_GetSysClockFreq+0x1b2>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d302      	bcc.n	800725e <HAL_RCC_GetSysClockFreq+0x106>
 8007258:	2b02      	cmp	r3, #2
 800725a:	d078      	beq.n	800734e <HAL_RCC_GetSysClockFreq+0x1f6>
 800725c:	e099      	b.n	8007392 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725e:	4b6f      	ldr	r3, [pc, #444]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d02d      	beq.n	80072c6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800726a:	4b6c      	ldr	r3, [pc, #432]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	4a6a      	ldr	r2, [pc, #424]	; (8007420 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007294:	4b61      	ldr	r3, [pc, #388]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80072a8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800742c <HAL_RCC_GetSysClockFreq+0x2d4>
 80072ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80072c4:	e087      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007430 <HAL_RCC_GetSysClockFreq+0x2d8>
 80072d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d8:	4b50      	ldr	r3, [pc, #320]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ec:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800742c <HAL_RCC_GetSysClockFreq+0x2d4>
 80072f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007308:	e065      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007434 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731c:	4b3f      	ldr	r3, [pc, #252]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007330:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800742c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734c:	e043      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007358:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007438 <HAL_RCC_GetSysClockFreq+0x2e0>
 800735c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007360:	4b2e      	ldr	r3, [pc, #184]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007370:	ed97 6a02 	vldr	s12, [r7, #8]
 8007374:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800742c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007390:	e021      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007434 <HAL_RCC_GetSysClockFreq+0x2dc>
 80073a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a4:	4b1d      	ldr	r3, [pc, #116]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80073b8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800742c <HAL_RCC_GetSysClockFreq+0x2d4>
 80073bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	0a5b      	lsrs	r3, r3, #9
 80073dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e0:	3301      	adds	r3, #1
 80073e2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fa:	ee17 3a90 	vmov	r3, s15
 80073fe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007400:	e005      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	61bb      	str	r3, [r7, #24]
    break;
 8007406:	e002      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800740a:	61bb      	str	r3, [r7, #24]
    break;
 800740c:	bf00      	nop
  }

  return sysclockfreq;
 800740e:	69bb      	ldr	r3, [r7, #24]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3724      	adds	r7, #36	; 0x24
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	58024400 	.word	0x58024400
 8007420:	03d09000 	.word	0x03d09000
 8007424:	003d0900 	.word	0x003d0900
 8007428:	01e84800 	.word	0x01e84800
 800742c:	46000000 	.word	0x46000000
 8007430:	4c742400 	.word	0x4c742400
 8007434:	4a742400 	.word	0x4a742400
 8007438:	4bf42400 	.word	0x4bf42400

0800743c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007442:	f7ff fe89 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8007446:	4601      	mov	r1, r0
 8007448:	4b10      	ldr	r3, [pc, #64]	; (800748c <HAL_RCC_GetHCLKFreq+0x50>)
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	4a0f      	ldr	r2, [pc, #60]	; (8007490 <HAL_RCC_GetHCLKFreq+0x54>)
 8007454:	5cd3      	ldrb	r3, [r2, r3]
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	fa21 f303 	lsr.w	r3, r1, r3
 800745e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <HAL_RCC_GetHCLKFreq+0x50>)
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	4a09      	ldr	r2, [pc, #36]	; (8007490 <HAL_RCC_GetHCLKFreq+0x54>)
 800746a:	5cd3      	ldrb	r3, [r2, r3]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	fa22 f303 	lsr.w	r3, r2, r3
 8007476:	4a07      	ldr	r2, [pc, #28]	; (8007494 <HAL_RCC_GetHCLKFreq+0x58>)
 8007478:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800747a:	4a07      	ldr	r2, [pc, #28]	; (8007498 <HAL_RCC_GetHCLKFreq+0x5c>)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <HAL_RCC_GetHCLKFreq+0x58>)
 8007482:	681b      	ldr	r3, [r3, #0]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	58024400 	.word	0x58024400
 8007490:	0800b4dc 	.word	0x0800b4dc
 8007494:	24000004 	.word	0x24000004
 8007498:	24000000 	.word	0x24000000

0800749c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074a0:	f7ff ffcc 	bl	800743c <HAL_RCC_GetHCLKFreq>
 80074a4:	4601      	mov	r1, r0
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	4a04      	ldr	r2, [pc, #16]	; (80074c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	58024400 	.word	0x58024400
 80074c4:	0800b4dc 	.word	0x0800b4dc

080074c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074cc:	f7ff ffb6 	bl	800743c <HAL_RCC_GetHCLKFreq>
 80074d0:	4601      	mov	r1, r0
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	58024400 	.word	0x58024400
 80074f0:	0800b4dc 	.word	0x0800b4dc

080074f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007500:	2300      	movs	r3, #0
 8007502:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d03d      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007518:	d013      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d802      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007524:	e01f      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800752a:	d013      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800752c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007530:	d01c      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007532:	e018      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007534:	4baf      	ldr	r3, [pc, #700]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	4aae      	ldr	r2, [pc, #696]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800753a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007540:	e015      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	2102      	movs	r1, #2
 8007548:	4618      	mov	r0, r3
 800754a:	f001 f96f 	bl	800882c <RCCEx_PLL2_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007552:	e00c      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3324      	adds	r3, #36	; 0x24
 8007558:	2102      	movs	r1, #2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fa18 	bl	8008990 <RCCEx_PLL3_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007564:	e003      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
      break;
 800756a:	e000      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800756c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007574:	4b9f      	ldr	r3, [pc, #636]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007580:	499c      	ldr	r1, [pc, #624]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007582:	4313      	orrs	r3, r2
 8007584:	650b      	str	r3, [r1, #80]	; 0x50
 8007586:	e001      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03d      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	2b04      	cmp	r3, #4
 800759e:	d826      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075bd 	.word	0x080075bd
 80075ac:	080075cb 	.word	0x080075cb
 80075b0:	080075dd 	.word	0x080075dd
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075f5 	.word	0x080075f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075bc:	4b8d      	ldr	r3, [pc, #564]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a8c      	ldr	r2, [pc, #560]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c8:	e015      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f92b 	bl	800882c <RCCEx_PLL2_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075da:	e00c      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f9d4 	bl	8008990 <RCCEx_PLL3_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
      break;
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80075f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d109      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075fc:	4b7d      	ldr	r3, [pc, #500]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	f023 0207 	bic.w	r2, r3, #7
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	497a      	ldr	r1, [pc, #488]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800760a:	4313      	orrs	r3, r2
 800760c:	650b      	str	r3, [r1, #80]	; 0x50
 800760e:	e001      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800761c:	2b00      	cmp	r3, #0
 800761e:	d03e      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d01c      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d804      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d00d      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007634:	e01e      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007636:	2bc0      	cmp	r3, #192	; 0xc0
 8007638:	d01f      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800763a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763e:	d01e      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007640:	e018      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007642:	4b6c      	ldr	r3, [pc, #432]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a6b      	ldr	r2, [pc, #428]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800764e:	e017      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 f8e8 	bl	800882c <RCCEx_PLL2_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007660:	e00e      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3324      	adds	r3, #36	; 0x24
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 f991 	bl	8008990 <RCCEx_PLL3_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007672:	e005      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007686:	4b5b      	ldr	r3, [pc, #364]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	4958      	ldr	r1, [pc, #352]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007694:	4313      	orrs	r3, r2
 8007696:	650b      	str	r3, [r1, #80]	; 0x50
 8007698:	e001      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d044      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b4:	d01f      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80076b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ba:	d805      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c4:	d00e      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80076c6:	e01f      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80076c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076cc:	d01f      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80076ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d2:	d01e      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80076d4:	e018      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d6:	4b47      	ldr	r3, [pc, #284]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076e2:	e017      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f89e 	bl	800882c <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00e      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f947 	bl	8008990 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007706:	e005      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800771a:	4b36      	ldr	r3, [pc, #216]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007728:	4932      	ldr	r1, [pc, #200]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800772a:	4313      	orrs	r3, r2
 800772c:	658b      	str	r3, [r1, #88]	; 0x58
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800773c:	2b00      	cmp	r3, #0
 800773e:	d044      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800774a:	d01f      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800774c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007750:	d805      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800775a:	d00e      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800775c:	e01f      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800775e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007762:	d01f      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007768:	d01e      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800776a:	e018      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776c:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007778:	e017      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3304      	adds	r3, #4
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f853 	bl	800882c <RCCEx_PLL2_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800778a:	e00e      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3324      	adds	r3, #36	; 0x24
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f001 f8fc 	bl	8008990 <RCCEx_PLL3_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800779c:	e005      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	75fb      	strb	r3, [r7, #23]
      break;
 80077a2:	e002      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80077a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077b0:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077be:	490d      	ldr	r1, [pc, #52]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	658b      	str	r3, [r1, #88]	; 0x58
 80077c4:	e001      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d035      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d00c      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d802      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01b      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80077e6:	e017      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d00c      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d018      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80077f0:	e012      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f8:	4baf      	ldr	r3, [pc, #700]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4aae      	ldr	r2, [pc, #696]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007804:	e00e      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	2102      	movs	r1, #2
 800780c:	4618      	mov	r0, r3
 800780e:	f001 f80d 	bl	800882c <RCCEx_PLL2_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007816:	e005      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800782a:	4ba3      	ldr	r3, [pc, #652]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	49a0      	ldr	r1, [pc, #640]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007838:	4313      	orrs	r3, r2
 800783a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800783c:	e001      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d042      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007856:	d01f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d805      	bhi.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007866:	d00e      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007868:	e01f      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800786a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800786e:	d01f      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007874:	d01e      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007876:	e018      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007878:	4b8f      	ldr	r3, [pc, #572]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a8e      	ldr	r2, [pc, #568]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800787e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007884:	e017      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3304      	adds	r3, #4
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f000 ffcd 	bl	800882c <RCCEx_PLL2_Config>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007896:	e00e      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f876 	bl	8008990 <RCCEx_PLL3_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078a8:	e005      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	75fb      	strb	r3, [r7, #23]
      break;
 80078ae:	e002      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80078b0:	bf00      	nop
 80078b2:	e000      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80078b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078bc:	4b7e      	ldr	r3, [pc, #504]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c8:	497b      	ldr	r1, [pc, #492]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	650b      	str	r3, [r1, #80]	; 0x50
 80078ce:	e001      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d042      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e8:	d01b      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80078ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ee:	d805      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d022      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80078f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80078fa:	e01b      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80078fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007900:	d01d      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007906:	d01c      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800790c:	d01b      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800790e:	e011      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	2101      	movs	r1, #1
 8007916:	4618      	mov	r0, r3
 8007918:	f000 ff88 	bl	800882c <RCCEx_PLL2_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007920:	e012      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f001 f831 	bl	8008990 <RCCEx_PLL3_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007932:	e009      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	75fb      	strb	r3, [r7, #23]
      break;
 8007938:	e006      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800793a:	bf00      	nop
 800793c:	e004      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800794e:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795a:	4957      	ldr	r1, [pc, #348]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800795c:	4313      	orrs	r3, r2
 800795e:	650b      	str	r3, [r1, #80]	; 0x50
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d044      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797c:	d01b      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800797e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007982:	d805      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d022      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798c:	d00a      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800798e:	e01b      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007994:	d01d      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799a:	d01c      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800799c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079a0:	d01b      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80079a2:	e011      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 ff3e 	bl	800882c <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079b4:	e012      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 ffe7 	bl	8008990 <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079c6:	e009      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e006      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80079ce:	bf00      	nop
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80079d2:	bf00      	nop
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80079da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079e2:	4b35      	ldr	r3, [pc, #212]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079f0:	4931      	ldr	r1, [pc, #196]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	658b      	str	r3, [r1, #88]	; 0x58
 80079f6:	e001      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02d      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a10:	d005      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a16:	d009      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d013      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007a1c:	e00f      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1e:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a2a:	e00c      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fefa 	bl	800882c <RCCEx_PLL2_Config>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	75fb      	strb	r3, [r7, #23]
      break;
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a4c:	4b1a      	ldr	r3, [pc, #104]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a58:	4917      	ldr	r1, [pc, #92]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a5e:	e001      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d035      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d81b      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007abd 	.word	0x08007abd
 8007a84:	08007a91 	.word	0x08007a91
 8007a88:	08007a9f 	.word	0x08007a9f
 8007a8c:	08007abd 	.word	0x08007abd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	2102      	movs	r1, #2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fec1 	bl	800882c <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007aae:	e006      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab4:	e003      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
      break;
 8007abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d109      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ac4:	4bba      	ldr	r3, [pc, #744]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	f023 0203 	bic.w	r2, r3, #3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad0:	49b7      	ldr	r1, [pc, #732]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ad6:	e001      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8086 	beq.w	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aea:	4bb2      	ldr	r3, [pc, #712]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4ab1      	ldr	r2, [pc, #708]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007af6:	f7f9 fe85 	bl	8001804 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007afc:	e009      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007afe:	f7f9 fe81 	bl	8001804 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b64      	cmp	r3, #100	; 0x64
 8007b0a:	d902      	bls.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b10:	e005      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b12:	4ba8      	ldr	r3, [pc, #672]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0ef      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d166      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b24:	4ba2      	ldr	r3, [pc, #648]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b2e:	4053      	eors	r3, r2
 8007b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d013      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b38:	4b9d      	ldr	r3, [pc, #628]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b40:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b42:	4b9b      	ldr	r3, [pc, #620]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	4a9a      	ldr	r2, [pc, #616]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b4e:	4b98      	ldr	r3, [pc, #608]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	4a97      	ldr	r2, [pc, #604]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b5a:	4a95      	ldr	r2, [pc, #596]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6a:	d115      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7f9 fe4a 	bl	8001804 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b72:	e00b      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b74:	f7f9 fe46 	bl	8001804 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d902      	bls.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	75fb      	strb	r3, [r7, #23]
            break;
 8007b8a:	e005      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b8c:	4b88      	ldr	r3, [pc, #544]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ed      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d126      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bac:	d10d      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007bae:	4b80      	ldr	r3, [pc, #512]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bbc:	0919      	lsrs	r1, r3, #4
 8007bbe:	4b7e      	ldr	r3, [pc, #504]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007bc0:	400b      	ands	r3, r1
 8007bc2:	497b      	ldr	r1, [pc, #492]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	610b      	str	r3, [r1, #16]
 8007bc8:	e005      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007bca:	4b79      	ldr	r3, [pc, #484]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	4a78      	ldr	r2, [pc, #480]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bd4:	6113      	str	r3, [r2, #16]
 8007bd6:	4b76      	ldr	r3, [pc, #472]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be4:	4972      	ldr	r1, [pc, #456]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	670b      	str	r3, [r1, #112]	; 0x70
 8007bea:	e004      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	75bb      	strb	r3, [r7, #22]
 8007bf0:	e001      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d07d      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c06:	2b28      	cmp	r3, #40	; 0x28
 8007c08:	d866      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007cdf 	.word	0x08007cdf
 8007c14:	08007cd9 	.word	0x08007cd9
 8007c18:	08007cd9 	.word	0x08007cd9
 8007c1c:	08007cd9 	.word	0x08007cd9
 8007c20:	08007cd9 	.word	0x08007cd9
 8007c24:	08007cd9 	.word	0x08007cd9
 8007c28:	08007cd9 	.word	0x08007cd9
 8007c2c:	08007cd9 	.word	0x08007cd9
 8007c30:	08007cb5 	.word	0x08007cb5
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007cd9 	.word	0x08007cd9
 8007c3c:	08007cd9 	.word	0x08007cd9
 8007c40:	08007cd9 	.word	0x08007cd9
 8007c44:	08007cd9 	.word	0x08007cd9
 8007c48:	08007cd9 	.word	0x08007cd9
 8007c4c:	08007cd9 	.word	0x08007cd9
 8007c50:	08007cc7 	.word	0x08007cc7
 8007c54:	08007cd9 	.word	0x08007cd9
 8007c58:	08007cd9 	.word	0x08007cd9
 8007c5c:	08007cd9 	.word	0x08007cd9
 8007c60:	08007cd9 	.word	0x08007cd9
 8007c64:	08007cd9 	.word	0x08007cd9
 8007c68:	08007cd9 	.word	0x08007cd9
 8007c6c:	08007cd9 	.word	0x08007cd9
 8007c70:	08007cdf 	.word	0x08007cdf
 8007c74:	08007cd9 	.word	0x08007cd9
 8007c78:	08007cd9 	.word	0x08007cd9
 8007c7c:	08007cd9 	.word	0x08007cd9
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007cd9 	.word	0x08007cd9
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007cdf 	.word	0x08007cdf
 8007c94:	08007cd9 	.word	0x08007cd9
 8007c98:	08007cd9 	.word	0x08007cd9
 8007c9c:	08007cd9 	.word	0x08007cd9
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007cd9 	.word	0x08007cd9
 8007ca8:	08007cd9 	.word	0x08007cd9
 8007cac:	08007cd9 	.word	0x08007cd9
 8007cb0:	08007cdf 	.word	0x08007cdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fdb6 	bl	800882c <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cc4:	e00c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3324      	adds	r3, #36	; 0x24
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fe5f 	bl	8008990 <RCCEx_PLL3_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cd6:	e003      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ce6:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf2:	492f      	ldr	r1, [pc, #188]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8007cf8:	e001      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d037      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d820      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d5b 	.word	0x08007d5b
 8007d1c:	08007d31 	.word	0x08007d31
 8007d20:	08007d43 	.word	0x08007d43
 8007d24:	08007d5b 	.word	0x08007d5b
 8007d28:	08007d5b 	.word	0x08007d5b
 8007d2c:	08007d5b 	.word	0x08007d5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	2101      	movs	r1, #1
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fd78 	bl	800882c <RCCEx_PLL2_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d40:	e00c      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3324      	adds	r3, #36	; 0x24
 8007d46:	2101      	movs	r1, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fe21 	bl	8008990 <RCCEx_PLL3_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	75fb      	strb	r3, [r7, #23]
      break;
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d62:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f023 0207 	bic.w	r2, r3, #7
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6e:	4910      	ldr	r1, [pc, #64]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	654b      	str	r3, [r1, #84]	; 0x54
 8007d74:	e001      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d040      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d827      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007dbd 	.word	0x08007dbd
 8007da0:	08007dcf 	.word	0x08007dcf
 8007da4:	08007de7 	.word	0x08007de7
 8007da8:	08007de7 	.word	0x08007de7
 8007dac:	08007de7 	.word	0x08007de7
 8007db0:	58024400 	.word	0x58024400
 8007db4:	58024800 	.word	0x58024800
 8007db8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fd32 	bl	800882c <RCCEx_PLL2_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dcc:	e00c      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3324      	adds	r3, #36	; 0x24
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fddb 	bl	8008990 <RCCEx_PLL3_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dde:	e003      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
      break;
 8007de4:	e000      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dee:	4bb2      	ldr	r3, [pc, #712]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df2:	f023 0207 	bic.w	r2, r3, #7
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfc:	49ae      	ldr	r1, [pc, #696]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	658b      	str	r3, [r1, #88]	; 0x58
 8007e02:	e001      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d044      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1e:	d01b      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e24:	d805      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d022      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e2e:	d00a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007e30:	e01b      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e36:	d01d      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e3c:	d01c      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007e3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e42:	d01b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007e44:	e011      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fced 	bl	800882c <RCCEx_PLL2_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e56:	e012      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fd96 	bl	8008990 <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e68:	e009      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6e:	e006      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e84:	4b8c      	ldr	r3, [pc, #560]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e92:	4989      	ldr	r1, [pc, #548]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	654b      	str	r3, [r1, #84]	; 0x54
 8007e98:	e001      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d044      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb4:	d01b      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eba:	d805      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007ec6:	e01b      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ecc:	d01d      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007ece:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ed2:	d01c      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ed8:	d01b      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007eda:	e011      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fca2 	bl	800882c <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007eec:	e012      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3324      	adds	r3, #36	; 0x24
 8007ef2:	2102      	movs	r1, #2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fd4b 	bl	8008990 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007efe:	e009      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
      break;
 8007f04:	e006      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007f06:	bf00      	nop
 8007f08:	e004      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f1a:	4b67      	ldr	r3, [pc, #412]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f28:	4963      	ldr	r1, [pc, #396]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007f2e:	e001      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d044      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f4a:	d01b      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f50:	d805      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d022      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007f5c:	e01b      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f62:	d01d      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007f64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f68:	d01c      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007f6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f6e:	d01b      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007f70:	e011      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3304      	adds	r3, #4
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fc57 	bl	800882c <RCCEx_PLL2_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f82:	e012      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	2102      	movs	r1, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fd00 	bl	8008990 <RCCEx_PLL3_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f94:	e009      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9a:	e006      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e004      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007fa0:	bf00      	nop
 8007fa2:	e002      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007fa4:	bf00      	nop
 8007fa6:	e000      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fb0:	4b41      	ldr	r3, [pc, #260]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fbe:	493e      	ldr	r1, [pc, #248]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	658b      	str	r3, [r1, #88]	; 0x58
 8007fc4:	e001      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01a      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3324      	adds	r3, #36	; 0x24
 8007fe6:	2102      	movs	r1, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fcd1 	bl	8008990 <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ff8:	4b2f      	ldr	r3, [pc, #188]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008006:	492c      	ldr	r1, [pc, #176]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008008:	4313      	orrs	r3, r2
 800800a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01a      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800801e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008022:	d10a      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fcb0 	bl	8008990 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800803a:	4b1f      	ldr	r3, [pc, #124]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008048:	491b      	ldr	r1, [pc, #108]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800804a:	4313      	orrs	r3, r2
 800804c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d032      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d00d      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806a:	d016      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d111      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	2100      	movs	r1, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fbd8 	bl	800882c <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008080:	e00c      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	; 0x24
 8008086:	2102      	movs	r1, #2
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fc81 	bl	8008990 <RCCEx_PLL3_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008092:	e003      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
      break;
 8008098:	e000      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800809a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10c      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080a2:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080b0:	4901      	ldr	r1, [pc, #4]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	658b      	str	r3, [r1, #88]	; 0x58
 80080b6:	e003      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80080b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02f      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d6:	d00c      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80080d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080dc:	d015      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e2:	d10f      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e4:	4b79      	ldr	r3, [pc, #484]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	4a78      	ldr	r2, [pc, #480]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80080f0:	e00c      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3324      	adds	r3, #36	; 0x24
 80080f6:	2101      	movs	r1, #1
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fc49 	bl	8008990 <RCCEx_PLL3_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800810a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008112:	4b6e      	ldr	r3, [pc, #440]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008120:	496a      	ldr	r1, [pc, #424]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008122:	4313      	orrs	r3, r2
 8008124:	654b      	str	r3, [r1, #84]	; 0x54
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d029      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008144:	d007      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008146:	e00f      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008148:	4b60      	ldr	r3, [pc, #384]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4a5f      	ldr	r2, [pc, #380]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800814e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008154:	e00b      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	2102      	movs	r1, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fb65 	bl	800882c <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008166:	e002      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
      break;
 800816c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008174:	4b55      	ldr	r3, [pc, #340]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008180:	4952      	ldr	r1, [pc, #328]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008182:	4313      	orrs	r3, r2
 8008184:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008186:	e001      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	2102      	movs	r1, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fbf6 	bl	8008990 <RCCEx_PLL3_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d02f      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c2:	d00c      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c8:	d802      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d011      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80081ce:	e00d      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d4:	d00f      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80081d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081da:	d00e      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80081dc:	e006      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081de:	4b3b      	ldr	r3, [pc, #236]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	4a3a      	ldr	r2, [pc, #232]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80081ea:	e007      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
      break;
 80081f0:	e004      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80081f2:	bf00      	nop
 80081f4:	e002      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80081f6:	bf00      	nop
 80081f8:	e000      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80081fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008202:	4b32      	ldr	r3, [pc, #200]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800820e:	492f      	ldr	r1, [pc, #188]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008210:	4313      	orrs	r3, r2
 8008212:	654b      	str	r3, [r1, #84]	; 0x54
 8008214:	e001      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008226:	4b29      	ldr	r3, [pc, #164]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	4926      	ldr	r1, [pc, #152]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008234:	4313      	orrs	r3, r2
 8008236:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008244:	4b21      	ldr	r3, [pc, #132]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008252:	491e      	ldr	r1, [pc, #120]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008254:	4313      	orrs	r3, r2
 8008256:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008264:	4b19      	ldr	r3, [pc, #100]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008270:	4916      	ldr	r1, [pc, #88]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008272:	4313      	orrs	r3, r2
 8008274:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00d      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008282:	4b12      	ldr	r3, [pc, #72]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	4a11      	ldr	r2, [pc, #68]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800828c:	6113      	str	r3, [r2, #16]
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008298:	490c      	ldr	r1, [pc, #48]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800829a:	4313      	orrs	r3, r2
 800829c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da08      	bge.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b2:	4906      	ldr	r1, [pc, #24]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80082b8:	7dbb      	ldrb	r3, [r7, #22]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e000      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	58024400 	.word	0x58024400

080082d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082d4:	f7ff f8b2 	bl	800743c <HAL_RCC_GetHCLKFreq>
 80082d8:	4601      	mov	r1, r0
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	091b      	lsrs	r3, r3, #4
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	4a04      	ldr	r2, [pc, #16]	; (80082f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082e6:	5cd3      	ldrb	r3, [r2, r3]
 80082e8:	f003 031f 	and.w	r3, r3, #31
 80082ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	58024400 	.word	0x58024400
 80082f8:	0800b4dc 	.word	0x0800b4dc

080082fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	; 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008304:	4b9d      	ldr	r3, [pc, #628]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800830e:	4b9b      	ldr	r3, [pc, #620]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	0b1b      	lsrs	r3, r3, #12
 8008314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008318:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800831a:	4b98      	ldr	r3, [pc, #608]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008326:	4b95      	ldr	r3, [pc, #596]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 810a 	beq.w	800855e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d05a      	beq.n	8008406 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008350:	2b01      	cmp	r3, #1
 8008352:	d302      	bcc.n	800835a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008354:	2b02      	cmp	r3, #2
 8008356:	d078      	beq.n	800844a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008358:	e099      	b.n	800848e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800835a:	4b88      	ldr	r3, [pc, #544]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d02d      	beq.n	80083c2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008366:	4b85      	ldr	r3, [pc, #532]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	08db      	lsrs	r3, r3, #3
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	4a83      	ldr	r2, [pc, #524]	; (8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008372:	fa22 f303 	lsr.w	r3, r2, r3
 8008376:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008390:	4b7a      	ldr	r3, [pc, #488]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083c0:	e087      	b.n	80084d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80083d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d4:	4b69      	ldr	r3, [pc, #420]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008400:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008404:	e065      	b.n	80084d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008410:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008418:	4b58      	ldr	r3, [pc, #352]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008428:	ed97 6a03 	vldr	s12, [r7, #12]
 800842c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008444:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008448:	e043      	b.n	80084d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008590 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845c:	4b47      	ldr	r3, [pc, #284]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008470:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008488:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800848c:	e021      	b.n	80084d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008498:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800849c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a0:	4b36      	ldr	r3, [pc, #216]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	ee07 3a90 	vmov	s15, r3
 80084ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80084b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084d0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80084d2:	4b2a      	ldr	r3, [pc, #168]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	0a5b      	lsrs	r3, r3, #9
 80084d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f8:	ee17 2a90 	vmov	r2, s15
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800851a:	edd7 6a07 	vldr	s13, [r7, #28]
 800851e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008526:	ee17 2a90 	vmov	r2, s15
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	0e1b      	lsrs	r3, r3, #24
 8008534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008548:	edd7 6a07 	vldr	s13, [r7, #28]
 800854c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008554:	ee17 2a90 	vmov	r2, s15
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800855c:	e008      	b.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	3724      	adds	r7, #36	; 0x24
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	58024400 	.word	0x58024400
 8008580:	03d09000 	.word	0x03d09000
 8008584:	46000000 	.word	0x46000000
 8008588:	4c742400 	.word	0x4c742400
 800858c:	4a742400 	.word	0x4a742400
 8008590:	4bf42400 	.word	0x4bf42400

08008594 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008594:	b480      	push	{r7}
 8008596:	b089      	sub	sp, #36	; 0x24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800859c:	4b9d      	ldr	r3, [pc, #628]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80085a6:	4b9b      	ldr	r3, [pc, #620]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	0d1b      	lsrs	r3, r3, #20
 80085ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085b2:	4b98      	ldr	r3, [pc, #608]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	0a1b      	lsrs	r3, r3, #8
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80085be:	4b95      	ldr	r3, [pc, #596]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c2:	08db      	lsrs	r3, r3, #3
 80085c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 810a 	beq.w	80087f6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d05a      	beq.n	800869e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d302      	bcc.n	80085f2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d078      	beq.n	80086e2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80085f0:	e099      	b.n	8008726 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f2:	4b88      	ldr	r3, [pc, #544]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d02d      	beq.n	800865a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085fe:	4b85      	ldr	r3, [pc, #532]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	08db      	lsrs	r3, r3, #3
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	4a83      	ldr	r2, [pc, #524]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b7a      	ldr	r3, [pc, #488]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	ed97 6a03 	vldr	s12, [r7, #12]
 800863c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008658:	e087      	b.n	800876a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008664:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866c:	4b69      	ldr	r3, [pc, #420]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008680:	eddf 5a66 	vldr	s11, [pc, #408]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800869c:	e065      	b.n	800876a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80086ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b0:	4b58      	ldr	r3, [pc, #352]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80086c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086e0:	e043      	b.n	800876a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80086f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f4:	4b47      	ldr	r3, [pc, #284]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	ed97 6a03 	vldr	s12, [r7, #12]
 8008708:	eddf 5a44 	vldr	s11, [pc, #272]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800870c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008724:	e021      	b.n	800876a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008738:	4b36      	ldr	r3, [pc, #216]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	ee07 3a90 	vmov	s15, r3
 8008744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008748:	ed97 6a03 	vldr	s12, [r7, #12]
 800874c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800875c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008768:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800876a:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	0a5b      	lsrs	r3, r3, #9
 8008770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008784:	edd7 6a07 	vldr	s13, [r7, #28]
 8008788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800878c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008790:	ee17 2a90 	vmov	r2, s15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	0c1b      	lsrs	r3, r3, #16
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087be:	ee17 2a90 	vmov	r2, s15
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	0e1b      	lsrs	r3, r3, #24
 80087cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ec:	ee17 2a90 	vmov	r2, s15
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087f4:	e008      	b.n	8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	609a      	str	r2, [r3, #8]
}
 8008808:	bf00      	nop
 800880a:	3724      	adds	r7, #36	; 0x24
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	58024400 	.word	0x58024400
 8008818:	03d09000 	.word	0x03d09000
 800881c:	46000000 	.word	0x46000000
 8008820:	4c742400 	.word	0x4c742400
 8008824:	4a742400 	.word	0x4a742400
 8008828:	4bf42400 	.word	0x4bf42400

0800882c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800883a:	4b53      	ldr	r3, [pc, #332]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	2b03      	cmp	r3, #3
 8008844:	d101      	bne.n	800884a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e099      	b.n	800897e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800884a:	4b4f      	ldr	r3, [pc, #316]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a4e      	ldr	r2, [pc, #312]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008850:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008856:	f7f8 ffd5 	bl	8001804 <HAL_GetTick>
 800885a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800885c:	e008      	b.n	8008870 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800885e:	f7f8 ffd1 	bl	8001804 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e086      	b.n	800897e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008870:	4b45      	ldr	r3, [pc, #276]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f0      	bne.n	800885e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800887c:	4b42      	ldr	r3, [pc, #264]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	031b      	lsls	r3, r3, #12
 800888a:	493f      	ldr	r1, [pc, #252]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800888c:	4313      	orrs	r3, r2
 800888e:	628b      	str	r3, [r1, #40]	; 0x28
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	3b01      	subs	r3, #1
 8008896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	3b01      	subs	r3, #1
 80088a0:	025b      	lsls	r3, r3, #9
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	061b      	lsls	r3, r3, #24
 80088bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088c0:	4931      	ldr	r1, [pc, #196]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088c6:	4b30      	ldr	r3, [pc, #192]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	492d      	ldr	r1, [pc, #180]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088d8:	4b2b      	ldr	r3, [pc, #172]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f023 0220 	bic.w	r2, r3, #32
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	4928      	ldr	r1, [pc, #160]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088ea:	4b27      	ldr	r3, [pc, #156]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	4a26      	ldr	r2, [pc, #152]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088f0:	f023 0310 	bic.w	r3, r3, #16
 80088f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 80088f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088fa:	4b24      	ldr	r3, [pc, #144]	; (800898c <RCCEx_PLL2_Config+0x160>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	69d2      	ldr	r2, [r2, #28]
 8008902:	00d2      	lsls	r2, r2, #3
 8008904:	4920      	ldr	r1, [pc, #128]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800890a:	4b1f      	ldr	r3, [pc, #124]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008910:	f043 0310 	orr.w	r3, r3, #16
 8008914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	4a19      	ldr	r2, [pc, #100]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008928:	e00f      	b.n	800894a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d106      	bne.n	800893e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a14      	ldr	r2, [pc, #80]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800893a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800893c:	e005      	b.n	800894a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	4a11      	ldr	r2, [pc, #68]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008948:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800894a:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a0e      	ldr	r2, [pc, #56]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008956:	f7f8 ff55 	bl	8001804 <HAL_GetTick>
 800895a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800895c:	e008      	b.n	8008970 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800895e:	f7f8 ff51 	bl	8001804 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e006      	b.n	800897e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <RCCEx_PLL2_Config+0x15c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f0      	beq.n	800895e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
 800898c:	ffff0007 	.word	0xffff0007

08008990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800899e:	4b53      	ldr	r3, [pc, #332]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d101      	bne.n	80089ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e099      	b.n	8008ae2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089ae:	4b4f      	ldr	r3, [pc, #316]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a4e      	ldr	r2, [pc, #312]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ba:	f7f8 ff23 	bl	8001804 <HAL_GetTick>
 80089be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089c0:	e008      	b.n	80089d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089c2:	f7f8 ff1f 	bl	8001804 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e086      	b.n	8008ae2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089d4:	4b45      	ldr	r3, [pc, #276]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1f0      	bne.n	80089c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089e0:	4b42      	ldr	r3, [pc, #264]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	051b      	lsls	r3, r3, #20
 80089ee:	493f      	ldr	r1, [pc, #252]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	628b      	str	r3, [r1, #40]	; 0x28
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	025b      	lsls	r3, r3, #9
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	041b      	lsls	r3, r3, #16
 8008a12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a24:	4931      	ldr	r1, [pc, #196]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a2a:	4b30      	ldr	r3, [pc, #192]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	492d      	ldr	r1, [pc, #180]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a3c:	4b2b      	ldr	r3, [pc, #172]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	4928      	ldr	r1, [pc, #160]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a4e:	4b27      	ldr	r3, [pc, #156]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	4a26      	ldr	r2, [pc, #152]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <RCCEx_PLL3_Config+0x160>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	69d2      	ldr	r2, [r2, #28]
 8008a66:	00d2      	lsls	r2, r2, #3
 8008a68:	4920      	ldr	r1, [pc, #128]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a6e:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	4a1e      	ldr	r2, [pc, #120]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a19      	ldr	r2, [pc, #100]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a8c:	e00f      	b.n	8008aae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d106      	bne.n	8008aa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a94:	4b15      	ldr	r3, [pc, #84]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4a14      	ldr	r2, [pc, #80]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008a9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008aa0:	e005      	b.n	8008aae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	4a11      	ldr	r2, [pc, #68]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a0e      	ldr	r2, [pc, #56]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aba:	f7f8 fea3 	bl	8001804 <HAL_GetTick>
 8008abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ac0:	e008      	b.n	8008ad4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ac2:	f7f8 fe9f 	bl	8001804 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e006      	b.n	8008ae2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <RCCEx_PLL3_Config+0x15c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	58024400 	.word	0x58024400
 8008af0:	ffff0007 	.word	0xffff0007

08008af4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e0e2      	b.n	8008cd0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a70      	ldr	r2, [pc, #448]	; (8008cd8 <HAL_SPI_Init+0x1e4>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00f      	beq.n	8008b3a <HAL_SPI_Init+0x46>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a6f      	ldr	r2, [pc, #444]	; (8008cdc <HAL_SPI_Init+0x1e8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00a      	beq.n	8008b3a <HAL_SPI_Init+0x46>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a6d      	ldr	r2, [pc, #436]	; (8008ce0 <HAL_SPI_Init+0x1ec>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d005      	beq.n	8008b3a <HAL_SPI_Init+0x46>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	2b0f      	cmp	r3, #15
 8008b34:	d901      	bls.n	8008b3a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e0ca      	b.n	8008cd0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8d2 	bl	8008ce4 <SPI_GetPacketSize>
 8008b40:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a64      	ldr	r2, [pc, #400]	; (8008cd8 <HAL_SPI_Init+0x1e4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00c      	beq.n	8008b66 <HAL_SPI_Init+0x72>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a62      	ldr	r2, [pc, #392]	; (8008cdc <HAL_SPI_Init+0x1e8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d007      	beq.n	8008b66 <HAL_SPI_Init+0x72>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a61      	ldr	r2, [pc, #388]	; (8008ce0 <HAL_SPI_Init+0x1ec>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d002      	beq.n	8008b66 <HAL_SPI_Init+0x72>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d811      	bhi.n	8008b8a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b6a:	4a5b      	ldr	r2, [pc, #364]	; (8008cd8 <HAL_SPI_Init+0x1e4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a59      	ldr	r2, [pc, #356]	; (8008cdc <HAL_SPI_Init+0x1e8>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_SPI_Init+0x90>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a58      	ldr	r2, [pc, #352]	; (8008ce0 <HAL_SPI_Init+0x1ec>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d104      	bne.n	8008b8e <HAL_SPI_Init+0x9a>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d901      	bls.n	8008b8e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e0a0      	b.n	8008cd0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d106      	bne.n	8008ba8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f8 f9e2 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0201 	bic.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bc8:	d110      	bne.n	8008bec <HAL_SPI_Init+0xf8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd2:	d10b      	bne.n	8008bec <HAL_SPI_Init+0xf8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d107      	bne.n	8008bec <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bea:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	69da      	ldr	r2, [r3, #28]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfe:	ea42 0103 	orr.w	r1, r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4c:	ea42 0103 	orr.w	r1, r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d113      	bne.n	8008c8c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c76:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c8a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40013000 	.word	0x40013000
 8008cdc:	40003800 	.word	0x40003800
 8008ce0:	40003c00 	.word	0x40003c00

08008ce4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	3307      	adds	r3, #7
 8008d02:	08db      	lsrs	r3, r3, #3
 8008d04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e049      	b.n	8008dc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7f8 fb57 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f000 fb4d 	bl	80093f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e049      	b.n	8008e6e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d106      	bne.n	8008df4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f841 	bl	8008e76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f000 faf6 	bl	80093f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e049      	b.n	8008f30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d106      	bne.n	8008eb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f841 	bl	8008f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f000 fa95 	bl	80093f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e064      	b.n	8009030 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b14      	cmp	r3, #20
 8008f72:	d857      	bhi.n	8009024 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008f74:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008fd1 	.word	0x08008fd1
 8008f80:	08009025 	.word	0x08009025
 8008f84:	08009025 	.word	0x08009025
 8008f88:	08009025 	.word	0x08009025
 8008f8c:	08008fdf 	.word	0x08008fdf
 8008f90:	08009025 	.word	0x08009025
 8008f94:	08009025 	.word	0x08009025
 8008f98:	08009025 	.word	0x08009025
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08009025 	.word	0x08009025
 8008fa4:	08009025 	.word	0x08009025
 8008fa8:	08009025 	.word	0x08009025
 8008fac:	08008ffb 	.word	0x08008ffb
 8008fb0:	08009025 	.word	0x08009025
 8008fb4:	08009025 	.word	0x08009025
 8008fb8:	08009025 	.word	0x08009025
 8008fbc:	08009009 	.word	0x08009009
 8008fc0:	08009025 	.word	0x08009025
 8008fc4:	08009025 	.word	0x08009025
 8008fc8:	08009025 	.word	0x08009025
 8008fcc:	08009017 	.word	0x08009017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 faa8 	bl	800952c <TIM_OC1_SetConfig>
      break;
 8008fdc:	e023      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fb31 	bl	800964c <TIM_OC2_SetConfig>
      break;
 8008fea:	e01c      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fbb4 	bl	8009760 <TIM_OC3_SetConfig>
      break;
 8008ff8:	e015      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fc33 	bl	800986c <TIM_OC4_SetConfig>
      break;
 8009006:	e00e      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fc94 	bl	800993c <TIM_OC5_SetConfig>
      break;
 8009014:	e007      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fcef 	bl	8009a00 <TIM_OC6_SetConfig>
      break;
 8009022:	e000      	b.n	8009026 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8009024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800904e:	2302      	movs	r3, #2
 8009050:	e0fd      	b.n	800924e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b14      	cmp	r3, #20
 800905e:	f200 80f0 	bhi.w	8009242 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009062:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	080090bd 	.word	0x080090bd
 800906c:	08009243 	.word	0x08009243
 8009070:	08009243 	.word	0x08009243
 8009074:	08009243 	.word	0x08009243
 8009078:	080090fd 	.word	0x080090fd
 800907c:	08009243 	.word	0x08009243
 8009080:	08009243 	.word	0x08009243
 8009084:	08009243 	.word	0x08009243
 8009088:	0800913f 	.word	0x0800913f
 800908c:	08009243 	.word	0x08009243
 8009090:	08009243 	.word	0x08009243
 8009094:	08009243 	.word	0x08009243
 8009098:	0800917f 	.word	0x0800917f
 800909c:	08009243 	.word	0x08009243
 80090a0:	08009243 	.word	0x08009243
 80090a4:	08009243 	.word	0x08009243
 80090a8:	080091c1 	.word	0x080091c1
 80090ac:	08009243 	.word	0x08009243
 80090b0:	08009243 	.word	0x08009243
 80090b4:	08009243 	.word	0x08009243
 80090b8:	08009201 	.word	0x08009201
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fa32 	bl	800952c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0208 	orr.w	r2, r2, #8
 80090d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0204 	bic.w	r2, r2, #4
 80090e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6999      	ldr	r1, [r3, #24]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	619a      	str	r2, [r3, #24]
      break;
 80090fa:	e0a3      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 faa2 	bl	800964c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6999      	ldr	r1, [r3, #24]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	021a      	lsls	r2, r3, #8
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	619a      	str	r2, [r3, #24]
      break;
 800913c:	e082      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fb0b 	bl	8009760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0208 	orr.w	r2, r2, #8
 8009158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0204 	bic.w	r2, r2, #4
 8009168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69d9      	ldr	r1, [r3, #28]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	61da      	str	r2, [r3, #28]
      break;
 800917c:	e062      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fb71 	bl	800986c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69d9      	ldr	r1, [r3, #28]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	021a      	lsls	r2, r3, #8
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	61da      	str	r2, [r3, #28]
      break;
 80091be:	e041      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fbb8 	bl	800993c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0208 	orr.w	r2, r2, #8
 80091da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0204 	bic.w	r2, r2, #4
 80091ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	691a      	ldr	r2, [r3, #16]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091fe:	e021      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fbfa 	bl	8009a00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800921a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800922a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	021a      	lsls	r2, r3, #8
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009240:	e000      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_TIM_ConfigClockSource+0x18>
 800926c:	2302      	movs	r3, #2
 800926e:	e0b7      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x188>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4b57      	ldr	r3, [pc, #348]	; (80093e8 <HAL_TIM_ConfigClockSource+0x190>)
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009296:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b70      	cmp	r3, #112	; 0x70
 80092a6:	d02e      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0xae>
 80092a8:	2b70      	cmp	r3, #112	; 0x70
 80092aa:	d812      	bhi.n	80092d2 <HAL_TIM_ConfigClockSource+0x7a>
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	f000 8084 	beq.w	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092b2:	2b30      	cmp	r3, #48	; 0x30
 80092b4:	d806      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x6c>
 80092b6:	2b10      	cmp	r3, #16
 80092b8:	d07f      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d07d      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d07b      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80092c2:	e084      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80092c4:	2b50      	cmp	r3, #80	; 0x50
 80092c6:	d048      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x102>
 80092c8:	2b60      	cmp	r3, #96	; 0x60
 80092ca:	d056      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x122>
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d064      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x142>
      break;
 80092d0:	e07d      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80092d2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092d6:	d070      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092dc:	d809      	bhi.n	80092f2 <HAL_TIM_ConfigClockSource+0x9a>
 80092de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e2:	d027      	beq.n	8009334 <HAL_TIM_ConfigClockSource+0xdc>
 80092e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e8:	d067      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ee:	d06d      	beq.n	80093cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092f0:	e06d      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80092f2:	4a3e      	ldr	r2, [pc, #248]	; (80093ec <HAL_TIM_ConfigClockSource+0x194>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d060      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092f8:	4a3d      	ldr	r2, [pc, #244]	; (80093f0 <HAL_TIM_ConfigClockSource+0x198>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d05d      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
 80092fe:	4a3d      	ldr	r2, [pc, #244]	; (80093f4 <HAL_TIM_ConfigClockSource+0x19c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d05a      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009304:	e063      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6899      	ldr	r1, [r3, #8]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f000 fc55 	bl	8009bc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	609a      	str	r2, [r3, #8]
      break;
 8009332:	e04c      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f000 fc3e 	bl	8009bc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009356:	609a      	str	r2, [r3, #8]
      break;
 8009358:	e039      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fbae 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2150      	movs	r1, #80	; 0x50
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fc08 	bl	8009b88 <TIM_ITRx_SetConfig>
      break;
 8009378:	e029      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	461a      	mov	r2, r3
 8009388:	f000 fbcd 	bl	8009b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2160      	movs	r1, #96	; 0x60
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fbf8 	bl	8009b88 <TIM_ITRx_SetConfig>
      break;
 8009398:	e019      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 fb8e 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2140      	movs	r1, #64	; 0x40
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fbe8 	bl	8009b88 <TIM_ITRx_SetConfig>
      break;
 80093b8:	e009      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f000 fbdf 	bl	8009b88 <TIM_ITRx_SetConfig>
      break;
 80093ca:	e000      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x176>
      break;
 80093cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	ffceff88 	.word	0xffceff88
 80093ec:	00100030 	.word	0x00100030
 80093f0:	00100040 	.word	0x00100040
 80093f4:	00100020 	.word	0x00100020

080093f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a40      	ldr	r2, [pc, #256]	; (800950c <TIM_Base_SetConfig+0x114>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d013      	beq.n	8009438 <TIM_Base_SetConfig+0x40>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009416:	d00f      	beq.n	8009438 <TIM_Base_SetConfig+0x40>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a3d      	ldr	r2, [pc, #244]	; (8009510 <TIM_Base_SetConfig+0x118>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00b      	beq.n	8009438 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a3c      	ldr	r2, [pc, #240]	; (8009514 <TIM_Base_SetConfig+0x11c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d007      	beq.n	8009438 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a3b      	ldr	r2, [pc, #236]	; (8009518 <TIM_Base_SetConfig+0x120>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3a      	ldr	r2, [pc, #232]	; (800951c <TIM_Base_SetConfig+0x124>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d108      	bne.n	800944a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a2f      	ldr	r2, [pc, #188]	; (800950c <TIM_Base_SetConfig+0x114>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01f      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009458:	d01b      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a2c      	ldr	r2, [pc, #176]	; (8009510 <TIM_Base_SetConfig+0x118>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d017      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2b      	ldr	r2, [pc, #172]	; (8009514 <TIM_Base_SetConfig+0x11c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d013      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2a      	ldr	r2, [pc, #168]	; (8009518 <TIM_Base_SetConfig+0x120>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a29      	ldr	r2, [pc, #164]	; (800951c <TIM_Base_SetConfig+0x124>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a28      	ldr	r2, [pc, #160]	; (8009520 <TIM_Base_SetConfig+0x128>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a27      	ldr	r2, [pc, #156]	; (8009524 <TIM_Base_SetConfig+0x12c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_Base_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a26      	ldr	r2, [pc, #152]	; (8009528 <TIM_Base_SetConfig+0x130>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d108      	bne.n	80094a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <TIM_Base_SetConfig+0x114>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00f      	beq.n	80094f0 <TIM_Base_SetConfig+0xf8>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a12      	ldr	r2, [pc, #72]	; (800951c <TIM_Base_SetConfig+0x124>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00b      	beq.n	80094f0 <TIM_Base_SetConfig+0xf8>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a11      	ldr	r2, [pc, #68]	; (8009520 <TIM_Base_SetConfig+0x128>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d007      	beq.n	80094f0 <TIM_Base_SetConfig+0xf8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a10      	ldr	r2, [pc, #64]	; (8009524 <TIM_Base_SetConfig+0x12c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <TIM_Base_SetConfig+0xf8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a0f      	ldr	r2, [pc, #60]	; (8009528 <TIM_Base_SetConfig+0x130>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d103      	bne.n	80094f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	691a      	ldr	r2, [r3, #16]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	615a      	str	r2, [r3, #20]
}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40010000 	.word	0x40010000
 8009510:	40000400 	.word	0x40000400
 8009514:	40000800 	.word	0x40000800
 8009518:	40000c00 	.word	0x40000c00
 800951c:	40010400 	.word	0x40010400
 8009520:	40014000 	.word	0x40014000
 8009524:	40014400 	.word	0x40014400
 8009528:	40014800 	.word	0x40014800

0800952c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0201 	bic.w	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4b37      	ldr	r3, [pc, #220]	; (8009634 <TIM_OC1_SetConfig+0x108>)
 8009558:	4013      	ands	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f023 0302 	bic.w	r3, r3, #2
 8009574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a2d      	ldr	r2, [pc, #180]	; (8009638 <TIM_OC1_SetConfig+0x10c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00f      	beq.n	80095a8 <TIM_OC1_SetConfig+0x7c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a2c      	ldr	r2, [pc, #176]	; (800963c <TIM_OC1_SetConfig+0x110>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00b      	beq.n	80095a8 <TIM_OC1_SetConfig+0x7c>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a2b      	ldr	r2, [pc, #172]	; (8009640 <TIM_OC1_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d007      	beq.n	80095a8 <TIM_OC1_SetConfig+0x7c>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <TIM_OC1_SetConfig+0x118>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_OC1_SetConfig+0x7c>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a29      	ldr	r2, [pc, #164]	; (8009648 <TIM_OC1_SetConfig+0x11c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d10c      	bne.n	80095c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f023 0308 	bic.w	r3, r3, #8
 80095ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f023 0304 	bic.w	r3, r3, #4
 80095c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a1c      	ldr	r2, [pc, #112]	; (8009638 <TIM_OC1_SetConfig+0x10c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00f      	beq.n	80095ea <TIM_OC1_SetConfig+0xbe>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1b      	ldr	r2, [pc, #108]	; (800963c <TIM_OC1_SetConfig+0x110>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00b      	beq.n	80095ea <TIM_OC1_SetConfig+0xbe>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1a      	ldr	r2, [pc, #104]	; (8009640 <TIM_OC1_SetConfig+0x114>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_OC1_SetConfig+0xbe>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a19      	ldr	r2, [pc, #100]	; (8009644 <TIM_OC1_SetConfig+0x118>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_OC1_SetConfig+0xbe>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a18      	ldr	r2, [pc, #96]	; (8009648 <TIM_OC1_SetConfig+0x11c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d111      	bne.n	800960e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4313      	orrs	r3, r2
 8009602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	621a      	str	r2, [r3, #32]
}
 8009628:	bf00      	nop
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	fffeff8f 	.word	0xfffeff8f
 8009638:	40010000 	.word	0x40010000
 800963c:	40010400 	.word	0x40010400
 8009640:	40014000 	.word	0x40014000
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800

0800964c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f023 0210 	bic.w	r2, r3, #16
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4b34      	ldr	r3, [pc, #208]	; (8009748 <TIM_OC2_SetConfig+0xfc>)
 8009678:	4013      	ands	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0320 	bic.w	r3, r3, #32
 8009696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a29      	ldr	r2, [pc, #164]	; (800974c <TIM_OC2_SetConfig+0x100>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC2_SetConfig+0x68>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a28      	ldr	r2, [pc, #160]	; (8009750 <TIM_OC2_SetConfig+0x104>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d10d      	bne.n	80096d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <TIM_OC2_SetConfig+0x100>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00f      	beq.n	80096f8 <TIM_OC2_SetConfig+0xac>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <TIM_OC2_SetConfig+0x104>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d00b      	beq.n	80096f8 <TIM_OC2_SetConfig+0xac>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <TIM_OC2_SetConfig+0x108>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d007      	beq.n	80096f8 <TIM_OC2_SetConfig+0xac>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <TIM_OC2_SetConfig+0x10c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d003      	beq.n	80096f8 <TIM_OC2_SetConfig+0xac>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a1a      	ldr	r2, [pc, #104]	; (800975c <TIM_OC2_SetConfig+0x110>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d113      	bne.n	8009720 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	4313      	orrs	r3, r2
 800971e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	feff8fff 	.word	0xfeff8fff
 800974c:	40010000 	.word	0x40010000
 8009750:	40010400 	.word	0x40010400
 8009754:	40014000 	.word	0x40014000
 8009758:	40014400 	.word	0x40014400
 800975c:	40014800 	.word	0x40014800

08009760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0303 	bic.w	r3, r3, #3
 8009796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a27      	ldr	r2, [pc, #156]	; (8009858 <TIM_OC3_SetConfig+0xf8>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d003      	beq.n	80097c6 <TIM_OC3_SetConfig+0x66>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a26      	ldr	r2, [pc, #152]	; (800985c <TIM_OC3_SetConfig+0xfc>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d10d      	bne.n	80097e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <TIM_OC3_SetConfig+0xf8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00f      	beq.n	800980a <TIM_OC3_SetConfig+0xaa>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1b      	ldr	r2, [pc, #108]	; (800985c <TIM_OC3_SetConfig+0xfc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00b      	beq.n	800980a <TIM_OC3_SetConfig+0xaa>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a1a      	ldr	r2, [pc, #104]	; (8009860 <TIM_OC3_SetConfig+0x100>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d007      	beq.n	800980a <TIM_OC3_SetConfig+0xaa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a19      	ldr	r2, [pc, #100]	; (8009864 <TIM_OC3_SetConfig+0x104>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d003      	beq.n	800980a <TIM_OC3_SetConfig+0xaa>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a18      	ldr	r2, [pc, #96]	; (8009868 <TIM_OC3_SetConfig+0x108>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d113      	bne.n	8009832 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	621a      	str	r2, [r3, #32]
}
 800984c:	bf00      	nop
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800

0800986c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	031b      	lsls	r3, r3, #12
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <TIM_OC4_SetConfig+0xbc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00f      	beq.n	80098ec <TIM_OC4_SetConfig+0x80>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a17      	ldr	r2, [pc, #92]	; (800992c <TIM_OC4_SetConfig+0xc0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00b      	beq.n	80098ec <TIM_OC4_SetConfig+0x80>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a16      	ldr	r2, [pc, #88]	; (8009930 <TIM_OC4_SetConfig+0xc4>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d007      	beq.n	80098ec <TIM_OC4_SetConfig+0x80>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a15      	ldr	r2, [pc, #84]	; (8009934 <TIM_OC4_SetConfig+0xc8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d003      	beq.n	80098ec <TIM_OC4_SetConfig+0x80>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a14      	ldr	r2, [pc, #80]	; (8009938 <TIM_OC4_SetConfig+0xcc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d109      	bne.n	8009900 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	019b      	lsls	r3, r3, #6
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	621a      	str	r2, [r3, #32]
}
 800991a:	bf00      	nop
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	40010000 	.word	0x40010000
 800992c:	40010400 	.word	0x40010400
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800

0800993c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800997c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	4313      	orrs	r3, r2
 8009988:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a17      	ldr	r2, [pc, #92]	; (80099ec <TIM_OC5_SetConfig+0xb0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00f      	beq.n	80099b2 <TIM_OC5_SetConfig+0x76>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <TIM_OC5_SetConfig+0xb4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d00b      	beq.n	80099b2 <TIM_OC5_SetConfig+0x76>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a15      	ldr	r2, [pc, #84]	; (80099f4 <TIM_OC5_SetConfig+0xb8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d007      	beq.n	80099b2 <TIM_OC5_SetConfig+0x76>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <TIM_OC5_SetConfig+0xbc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_OC5_SetConfig+0x76>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a13      	ldr	r2, [pc, #76]	; (80099fc <TIM_OC5_SetConfig+0xc0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d109      	bne.n	80099c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	621a      	str	r2, [r3, #32]
}
 80099e0:	bf00      	nop
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40010400 	.word	0x40010400
 80099f4:	40014000 	.word	0x40014000
 80099f8:	40014400 	.word	0x40014400
 80099fc:	40014800 	.word	0x40014800

08009a00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	051b      	lsls	r3, r3, #20
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a18      	ldr	r2, [pc, #96]	; (8009ab4 <TIM_OC6_SetConfig+0xb4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d00f      	beq.n	8009a78 <TIM_OC6_SetConfig+0x78>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a17      	ldr	r2, [pc, #92]	; (8009ab8 <TIM_OC6_SetConfig+0xb8>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00b      	beq.n	8009a78 <TIM_OC6_SetConfig+0x78>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a16      	ldr	r2, [pc, #88]	; (8009abc <TIM_OC6_SetConfig+0xbc>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d007      	beq.n	8009a78 <TIM_OC6_SetConfig+0x78>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a15      	ldr	r2, [pc, #84]	; (8009ac0 <TIM_OC6_SetConfig+0xc0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d003      	beq.n	8009a78 <TIM_OC6_SetConfig+0x78>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a14      	ldr	r2, [pc, #80]	; (8009ac4 <TIM_OC6_SetConfig+0xc4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d109      	bne.n	8009a8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	029b      	lsls	r3, r3, #10
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40010000 	.word	0x40010000
 8009ab8:	40010400 	.word	0x40010400
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	40014400 	.word	0x40014400
 8009ac4:	40014800 	.word	0x40014800

08009ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f023 0201 	bic.w	r2, r3, #1
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 030a 	bic.w	r3, r3, #10
 8009b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	f023 0210 	bic.w	r2, r3, #16
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	031b      	lsls	r3, r3, #12
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	621a      	str	r2, [r3, #32]
}
 8009b7a:	bf00      	nop
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <TIM_ITRx_SetConfig+0x38>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	f043 0307 	orr.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	609a      	str	r2, [r3, #8]
}
 8009bb2:	bf00      	nop
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	ffcfff8f 	.word	0xffcfff8f

08009bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	021a      	lsls	r2, r3, #8
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	609a      	str	r2, [r3, #8]
}
 8009bf8:	bf00      	nop
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e068      	b.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a2e      	ldr	r2, [pc, #184]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d004      	beq.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a2d      	ldr	r2, [pc, #180]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d108      	bne.n	8009c62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a1e      	ldr	r2, [pc, #120]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01d      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c8e:	d018      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1b      	ldr	r2, [pc, #108]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a1a      	ldr	r2, [pc, #104]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a18      	ldr	r2, [pc, #96]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d009      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a13      	ldr	r2, [pc, #76]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a14      	ldr	r2, [pc, #80]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10c      	bne.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40000c00 	.word	0x40000c00
 8009d10:	40001800 	.word	0x40001800

08009d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e042      	b.n	8009dac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7f7 fc69 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2224      	movs	r2, #36	; 0x24
 8009d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0201 	bic.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8c2 	bl	8009ee0 <UART_SetConfig>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e022      	b.n	8009dac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fe66 	bl	800aa40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0201 	orr.w	r2, r2, #1
 8009da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 feed 	bl	800ab84 <UART_CheckIdleState>
 8009daa:	4603      	mov	r3, r0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	f040 8083 	bne.w	8009ed6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_UART_Transmit+0x28>
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e07b      	b.n	8009ed8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_UART_Transmit+0x3a>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e074      	b.n	8009ed8 <HAL_UART_Transmit+0x124>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2221      	movs	r2, #33	; 0x21
 8009e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009e06:	f7f7 fcfd 	bl	8001804 <HAL_GetTick>
 8009e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	88fa      	ldrh	r2, [r7, #6]
 8009e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e24:	d108      	bne.n	8009e38 <HAL_UART_Transmit+0x84>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d104      	bne.n	8009e38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	61bb      	str	r3, [r7, #24]
 8009e36:	e003      	b.n	8009e40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009e48:	e02c      	b.n	8009ea4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2200      	movs	r2, #0
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fedd 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e039      	b.n	8009ed8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	3302      	adds	r3, #2
 8009e7e:	61bb      	str	r3, [r7, #24]
 8009e80:	e007      	b.n	8009e92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1cc      	bne.n	8009e4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2140      	movs	r1, #64	; 0x40
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 feaa 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e006      	b.n	8009ed8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e000      	b.n	8009ed8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009ed6:	2302      	movs	r3, #2
  }
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009ee4:	b08e      	sub	sp, #56	; 0x38
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4bc1      	ldr	r3, [pc, #772]	; (800a220 <UART_SetConfig+0x340>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f22:	430b      	orrs	r3, r1
 8009f24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4ab7      	ldr	r2, [pc, #732]	; (800a224 <UART_SetConfig+0x344>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d004      	beq.n	8009f56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f52:	4313      	orrs	r3, r2
 8009f54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	4bb2      	ldr	r3, [pc, #712]	; (800a228 <UART_SetConfig+0x348>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f66:	430b      	orrs	r3, r1
 8009f68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	f023 010f 	bic.w	r1, r3, #15
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4aa9      	ldr	r2, [pc, #676]	; (800a22c <UART_SetConfig+0x34c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d177      	bne.n	800a07a <UART_SetConfig+0x19a>
 8009f8a:	4ba9      	ldr	r3, [pc, #676]	; (800a230 <UART_SetConfig+0x350>)
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f92:	2b28      	cmp	r3, #40	; 0x28
 8009f94:	d86c      	bhi.n	800a070 <UART_SetConfig+0x190>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0xbc>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	0800a041 	.word	0x0800a041
 8009fa0:	0800a071 	.word	0x0800a071
 8009fa4:	0800a071 	.word	0x0800a071
 8009fa8:	0800a071 	.word	0x0800a071
 8009fac:	0800a071 	.word	0x0800a071
 8009fb0:	0800a071 	.word	0x0800a071
 8009fb4:	0800a071 	.word	0x0800a071
 8009fb8:	0800a071 	.word	0x0800a071
 8009fbc:	0800a049 	.word	0x0800a049
 8009fc0:	0800a071 	.word	0x0800a071
 8009fc4:	0800a071 	.word	0x0800a071
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	0800a071 	.word	0x0800a071
 8009fd0:	0800a071 	.word	0x0800a071
 8009fd4:	0800a071 	.word	0x0800a071
 8009fd8:	0800a071 	.word	0x0800a071
 8009fdc:	0800a051 	.word	0x0800a051
 8009fe0:	0800a071 	.word	0x0800a071
 8009fe4:	0800a071 	.word	0x0800a071
 8009fe8:	0800a071 	.word	0x0800a071
 8009fec:	0800a071 	.word	0x0800a071
 8009ff0:	0800a071 	.word	0x0800a071
 8009ff4:	0800a071 	.word	0x0800a071
 8009ff8:	0800a071 	.word	0x0800a071
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a071 	.word	0x0800a071
 800a004:	0800a071 	.word	0x0800a071
 800a008:	0800a071 	.word	0x0800a071
 800a00c:	0800a071 	.word	0x0800a071
 800a010:	0800a071 	.word	0x0800a071
 800a014:	0800a071 	.word	0x0800a071
 800a018:	0800a071 	.word	0x0800a071
 800a01c:	0800a061 	.word	0x0800a061
 800a020:	0800a071 	.word	0x0800a071
 800a024:	0800a071 	.word	0x0800a071
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a071 	.word	0x0800a071
 800a034:	0800a071 	.word	0x0800a071
 800a038:	0800a071 	.word	0x0800a071
 800a03c:	0800a069 	.word	0x0800a069
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e233      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e22f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a050:	2308      	movs	r3, #8
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e22b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a058:	2310      	movs	r3, #16
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e227      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a060:	2320      	movs	r3, #32
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e223      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a068:	2340      	movs	r3, #64	; 0x40
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e21f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	bf00      	nop
 800a078:	e21a      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a6d      	ldr	r2, [pc, #436]	; (800a234 <UART_SetConfig+0x354>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d132      	bne.n	800a0ea <UART_SetConfig+0x20a>
 800a084:	4b6a      	ldr	r3, [pc, #424]	; (800a230 <UART_SetConfig+0x350>)
 800a086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d827      	bhi.n	800a0e0 <UART_SetConfig+0x200>
 800a090:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <UART_SetConfig+0x1b8>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a0b1 	.word	0x0800a0b1
 800a09c:	0800a0b9 	.word	0x0800a0b9
 800a0a0:	0800a0c1 	.word	0x0800a0c1
 800a0a4:	0800a0c9 	.word	0x0800a0c9
 800a0a8:	0800a0d1 	.word	0x0800a0d1
 800a0ac:	0800a0d9 	.word	0x0800a0d9
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e1fb      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0be:	e1f7      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e1f3      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e1ef      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0d0:	2320      	movs	r3, #32
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	e1eb      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	e1e7      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0e0:	2380      	movs	r3, #128	; 0x80
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	bf00      	nop
 800a0e8:	e1e2      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a52      	ldr	r2, [pc, #328]	; (800a238 <UART_SetConfig+0x358>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d132      	bne.n	800a15a <UART_SetConfig+0x27a>
 800a0f4:	4b4e      	ldr	r3, [pc, #312]	; (800a230 <UART_SetConfig+0x350>)
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d827      	bhi.n	800a150 <UART_SetConfig+0x270>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0x228>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a121 	.word	0x0800a121
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a131 	.word	0x0800a131
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a141 	.word	0x0800a141
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2300      	movs	r3, #0
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e1c3      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e1bf      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e1bb      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e1b7      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e1b3      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e1af      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	bf00      	nop
 800a158:	e1aa      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a37      	ldr	r2, [pc, #220]	; (800a23c <UART_SetConfig+0x35c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d132      	bne.n	800a1ca <UART_SetConfig+0x2ea>
 800a164:	4b32      	ldr	r3, [pc, #200]	; (800a230 <UART_SetConfig+0x350>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	2b05      	cmp	r3, #5
 800a16e:	d827      	bhi.n	800a1c0 <UART_SetConfig+0x2e0>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <UART_SetConfig+0x298>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a191 	.word	0x0800a191
 800a17c:	0800a199 	.word	0x0800a199
 800a180:	0800a1a1 	.word	0x0800a1a1
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	2300      	movs	r3, #0
 800a192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a196:	e18b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a198:	2304      	movs	r3, #4
 800a19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19e:	e187      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a6:	e183      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ae:	e17f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1b0:	2320      	movs	r3, #32
 800a1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b6:	e17b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1b8:	2340      	movs	r3, #64	; 0x40
 800a1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1be:	e177      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1c0:	2380      	movs	r3, #128	; 0x80
 800a1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c6:	bf00      	nop
 800a1c8:	e172      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a1c      	ldr	r2, [pc, #112]	; (800a240 <UART_SetConfig+0x360>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d144      	bne.n	800a25e <UART_SetConfig+0x37e>
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <UART_SetConfig+0x350>)
 800a1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d839      	bhi.n	800a254 <UART_SetConfig+0x374>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <UART_SetConfig+0x308>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a201 	.word	0x0800a201
 800a1ec:	0800a209 	.word	0x0800a209
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a245 	.word	0x0800a245
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	2300      	movs	r3, #0
 800a202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a206:	e153      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a208:	2304      	movs	r3, #4
 800a20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20e:	e14f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a210:	2308      	movs	r3, #8
 800a212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a216:	e14b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a218:	2310      	movs	r3, #16
 800a21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21e:	e147      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a220:	cfff69f3 	.word	0xcfff69f3
 800a224:	58000c00 	.word	0x58000c00
 800a228:	11fff4ff 	.word	0x11fff4ff
 800a22c:	40011000 	.word	0x40011000
 800a230:	58024400 	.word	0x58024400
 800a234:	40004400 	.word	0x40004400
 800a238:	40004800 	.word	0x40004800
 800a23c:	40004c00 	.word	0x40004c00
 800a240:	40005000 	.word	0x40005000
 800a244:	2320      	movs	r3, #32
 800a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24a:	e131      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a24c:	2340      	movs	r3, #64	; 0x40
 800a24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a252:	e12d      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a254:	2380      	movs	r3, #128	; 0x80
 800a256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25a:	bf00      	nop
 800a25c:	e128      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4ab6      	ldr	r2, [pc, #728]	; (800a53c <UART_SetConfig+0x65c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d178      	bne.n	800a35a <UART_SetConfig+0x47a>
 800a268:	4bb5      	ldr	r3, [pc, #724]	; (800a540 <UART_SetConfig+0x660>)
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a270:	2b28      	cmp	r3, #40	; 0x28
 800a272:	d86d      	bhi.n	800a350 <UART_SetConfig+0x470>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <UART_SetConfig+0x39c>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a321 	.word	0x0800a321
 800a280:	0800a351 	.word	0x0800a351
 800a284:	0800a351 	.word	0x0800a351
 800a288:	0800a351 	.word	0x0800a351
 800a28c:	0800a351 	.word	0x0800a351
 800a290:	0800a351 	.word	0x0800a351
 800a294:	0800a351 	.word	0x0800a351
 800a298:	0800a351 	.word	0x0800a351
 800a29c:	0800a329 	.word	0x0800a329
 800a2a0:	0800a351 	.word	0x0800a351
 800a2a4:	0800a351 	.word	0x0800a351
 800a2a8:	0800a351 	.word	0x0800a351
 800a2ac:	0800a351 	.word	0x0800a351
 800a2b0:	0800a351 	.word	0x0800a351
 800a2b4:	0800a351 	.word	0x0800a351
 800a2b8:	0800a351 	.word	0x0800a351
 800a2bc:	0800a331 	.word	0x0800a331
 800a2c0:	0800a351 	.word	0x0800a351
 800a2c4:	0800a351 	.word	0x0800a351
 800a2c8:	0800a351 	.word	0x0800a351
 800a2cc:	0800a351 	.word	0x0800a351
 800a2d0:	0800a351 	.word	0x0800a351
 800a2d4:	0800a351 	.word	0x0800a351
 800a2d8:	0800a351 	.word	0x0800a351
 800a2dc:	0800a339 	.word	0x0800a339
 800a2e0:	0800a351 	.word	0x0800a351
 800a2e4:	0800a351 	.word	0x0800a351
 800a2e8:	0800a351 	.word	0x0800a351
 800a2ec:	0800a351 	.word	0x0800a351
 800a2f0:	0800a351 	.word	0x0800a351
 800a2f4:	0800a351 	.word	0x0800a351
 800a2f8:	0800a351 	.word	0x0800a351
 800a2fc:	0800a341 	.word	0x0800a341
 800a300:	0800a351 	.word	0x0800a351
 800a304:	0800a351 	.word	0x0800a351
 800a308:	0800a351 	.word	0x0800a351
 800a30c:	0800a351 	.word	0x0800a351
 800a310:	0800a351 	.word	0x0800a351
 800a314:	0800a351 	.word	0x0800a351
 800a318:	0800a351 	.word	0x0800a351
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e0c3      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a328:	2304      	movs	r3, #4
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e0bf      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a330:	2308      	movs	r3, #8
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e0bb      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a338:	2310      	movs	r3, #16
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e0b7      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a340:	2320      	movs	r3, #32
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	e0b3      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a348:	2340      	movs	r3, #64	; 0x40
 800a34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34e:	e0af      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a350:	2380      	movs	r3, #128	; 0x80
 800a352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a356:	bf00      	nop
 800a358:	e0aa      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a79      	ldr	r2, [pc, #484]	; (800a544 <UART_SetConfig+0x664>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d132      	bne.n	800a3ca <UART_SetConfig+0x4ea>
 800a364:	4b76      	ldr	r3, [pc, #472]	; (800a540 <UART_SetConfig+0x660>)
 800a366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a368:	f003 0307 	and.w	r3, r3, #7
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d827      	bhi.n	800a3c0 <UART_SetConfig+0x4e0>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0x498>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a391 	.word	0x0800a391
 800a37c:	0800a399 	.word	0x0800a399
 800a380:	0800a3a1 	.word	0x0800a3a1
 800a384:	0800a3a9 	.word	0x0800a3a9
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	2300      	movs	r3, #0
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e08b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e087      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e083      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e07f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b6:	e07b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e077      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	bf00      	nop
 800a3c8:	e072      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a5e      	ldr	r2, [pc, #376]	; (800a548 <UART_SetConfig+0x668>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d132      	bne.n	800a43a <UART_SetConfig+0x55a>
 800a3d4:	4b5a      	ldr	r3, [pc, #360]	; (800a540 <UART_SetConfig+0x660>)
 800a3d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d8:	f003 0307 	and.w	r3, r3, #7
 800a3dc:	2b05      	cmp	r3, #5
 800a3de:	d827      	bhi.n	800a430 <UART_SetConfig+0x550>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0x508>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a409 	.word	0x0800a409
 800a3f0:	0800a411 	.word	0x0800a411
 800a3f4:	0800a419 	.word	0x0800a419
 800a3f8:	0800a421 	.word	0x0800a421
 800a3fc:	0800a429 	.word	0x0800a429
 800a400:	2300      	movs	r3, #0
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a406:	e053      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a408:	2304      	movs	r3, #4
 800a40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40e:	e04f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a410:	2308      	movs	r3, #8
 800a412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a416:	e04b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a418:	2310      	movs	r3, #16
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e047      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a420:	2320      	movs	r3, #32
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e043      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a428:	2340      	movs	r3, #64	; 0x40
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e03f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a430:	2380      	movs	r3, #128	; 0x80
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	bf00      	nop
 800a438:	e03a      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a43      	ldr	r2, [pc, #268]	; (800a54c <UART_SetConfig+0x66c>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d132      	bne.n	800a4aa <UART_SetConfig+0x5ca>
 800a444:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <UART_SetConfig+0x660>)
 800a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d827      	bhi.n	800a4a0 <UART_SetConfig+0x5c0>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <UART_SetConfig+0x578>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a479 	.word	0x0800a479
 800a460:	0800a481 	.word	0x0800a481
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a491 	.word	0x0800a491
 800a46c:	0800a499 	.word	0x0800a499
 800a470:	2302      	movs	r3, #2
 800a472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a476:	e01b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47e:	e017      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a486:	e013      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e00f      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a490:	2320      	movs	r3, #32
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e00b      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a498:	2340      	movs	r3, #64	; 0x40
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e007      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a4a0:	2380      	movs	r3, #128	; 0x80
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	bf00      	nop
 800a4a8:	e002      	b.n	800a4b0 <UART_SetConfig+0x5d0>
 800a4aa:	2380      	movs	r3, #128	; 0x80
 800a4ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a25      	ldr	r2, [pc, #148]	; (800a54c <UART_SetConfig+0x66c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	f040 80b8 	bne.w	800a62c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	d019      	beq.n	800a4f8 <UART_SetConfig+0x618>
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	dc04      	bgt.n	800a4d2 <UART_SetConfig+0x5f2>
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d009      	beq.n	800a4e0 <UART_SetConfig+0x600>
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d00b      	beq.n	800a4e8 <UART_SetConfig+0x608>
 800a4d0:	e042      	b.n	800a558 <UART_SetConfig+0x678>
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	d02b      	beq.n	800a52e <UART_SetConfig+0x64e>
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d02c      	beq.n	800a534 <UART_SetConfig+0x654>
 800a4da:	2b10      	cmp	r3, #16
 800a4dc:	d014      	beq.n	800a508 <UART_SetConfig+0x628>
 800a4de:	e03b      	b.n	800a558 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4e0:	f7fd fef6 	bl	80082d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4e6:	e03d      	b.n	800a564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fd ff05 	bl	80082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4f6:	e035      	b.n	800a564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4f8:	f107 0308 	add.w	r3, r7, #8
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe f849 	bl	8008594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a506:	e02d      	b.n	800a564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <UART_SetConfig+0x660>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a514:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <UART_SetConfig+0x660>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	08db      	lsrs	r3, r3, #3
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	4a0c      	ldr	r2, [pc, #48]	; (800a550 <UART_SetConfig+0x670>)
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a526:	e01d      	b.n	800a564 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a528:	4b09      	ldr	r3, [pc, #36]	; (800a550 <UART_SetConfig+0x670>)
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a52c:	e01a      	b.n	800a564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <UART_SetConfig+0x674>)
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a532:	e017      	b.n	800a564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a53a:	e013      	b.n	800a564 <UART_SetConfig+0x684>
 800a53c:	40011400 	.word	0x40011400
 800a540:	58024400 	.word	0x58024400
 800a544:	40007800 	.word	0x40007800
 800a548:	40007c00 	.word	0x40007c00
 800a54c:	58000c00 	.word	0x58000c00
 800a550:	03d09000 	.word	0x03d09000
 800a554:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a562:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 824d 	beq.w	800aa06 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	4aad      	ldr	r2, [pc, #692]	; (800a828 <UART_SetConfig+0x948>)
 800a572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a576:	461a      	mov	r2, r3
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a57e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	4613      	mov	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	4413      	add	r3, r2
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d305      	bcc.n	800a59c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a596:	6a3a      	ldr	r2, [r7, #32]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d903      	bls.n	800a5a4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a5a2:	e230      	b.n	800aa06 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f04f 0100 	mov.w	r1, #0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	4a9d      	ldr	r2, [pc, #628]	; (800a828 <UART_SetConfig+0x948>)
 800a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f04f 0400 	mov.w	r4, #0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4623      	mov	r3, r4
 800a5c0:	f7f5 fe8a 	bl	80002d8 <__aeabi_uldivmod>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	f04f 0400 	mov.w	r4, #0
 800a5d4:	0214      	lsls	r4, r2, #8
 800a5d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5da:	020b      	lsls	r3, r1, #8
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6852      	ldr	r2, [r2, #4]
 800a5e0:	0852      	lsrs	r2, r2, #1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	eb13 0b01 	adds.w	fp, r3, r1
 800a5ec:	eb44 0c02 	adc.w	ip, r4, r2
 800a5f0:	4658      	mov	r0, fp
 800a5f2:	4661      	mov	r1, ip
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f04f 0400 	mov.w	r4, #0
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4623      	mov	r3, r4
 800a600:	f7f5 fe6a 	bl	80002d8 <__aeabi_uldivmod>
 800a604:	4603      	mov	r3, r0
 800a606:	460c      	mov	r4, r1
 800a608:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a610:	d308      	bcc.n	800a624 <UART_SetConfig+0x744>
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a618:	d204      	bcs.n	800a624 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e1f0      	b.n	800aa06 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a62a:	e1ec      	b.n	800aa06 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a634:	f040 8100 	bne.w	800a838 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a63c:	2b40      	cmp	r3, #64	; 0x40
 800a63e:	f200 80b7 	bhi.w	800a7b0 <UART_SetConfig+0x8d0>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <UART_SetConfig+0x768>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a74d 	.word	0x0800a74d
 800a64c:	0800a755 	.word	0x0800a755
 800a650:	0800a7b1 	.word	0x0800a7b1
 800a654:	0800a7b1 	.word	0x0800a7b1
 800a658:	0800a75d 	.word	0x0800a75d
 800a65c:	0800a7b1 	.word	0x0800a7b1
 800a660:	0800a7b1 	.word	0x0800a7b1
 800a664:	0800a7b1 	.word	0x0800a7b1
 800a668:	0800a76d 	.word	0x0800a76d
 800a66c:	0800a7b1 	.word	0x0800a7b1
 800a670:	0800a7b1 	.word	0x0800a7b1
 800a674:	0800a7b1 	.word	0x0800a7b1
 800a678:	0800a7b1 	.word	0x0800a7b1
 800a67c:	0800a7b1 	.word	0x0800a7b1
 800a680:	0800a7b1 	.word	0x0800a7b1
 800a684:	0800a7b1 	.word	0x0800a7b1
 800a688:	0800a77d 	.word	0x0800a77d
 800a68c:	0800a7b1 	.word	0x0800a7b1
 800a690:	0800a7b1 	.word	0x0800a7b1
 800a694:	0800a7b1 	.word	0x0800a7b1
 800a698:	0800a7b1 	.word	0x0800a7b1
 800a69c:	0800a7b1 	.word	0x0800a7b1
 800a6a0:	0800a7b1 	.word	0x0800a7b1
 800a6a4:	0800a7b1 	.word	0x0800a7b1
 800a6a8:	0800a7b1 	.word	0x0800a7b1
 800a6ac:	0800a7b1 	.word	0x0800a7b1
 800a6b0:	0800a7b1 	.word	0x0800a7b1
 800a6b4:	0800a7b1 	.word	0x0800a7b1
 800a6b8:	0800a7b1 	.word	0x0800a7b1
 800a6bc:	0800a7b1 	.word	0x0800a7b1
 800a6c0:	0800a7b1 	.word	0x0800a7b1
 800a6c4:	0800a7b1 	.word	0x0800a7b1
 800a6c8:	0800a7a3 	.word	0x0800a7a3
 800a6cc:	0800a7b1 	.word	0x0800a7b1
 800a6d0:	0800a7b1 	.word	0x0800a7b1
 800a6d4:	0800a7b1 	.word	0x0800a7b1
 800a6d8:	0800a7b1 	.word	0x0800a7b1
 800a6dc:	0800a7b1 	.word	0x0800a7b1
 800a6e0:	0800a7b1 	.word	0x0800a7b1
 800a6e4:	0800a7b1 	.word	0x0800a7b1
 800a6e8:	0800a7b1 	.word	0x0800a7b1
 800a6ec:	0800a7b1 	.word	0x0800a7b1
 800a6f0:	0800a7b1 	.word	0x0800a7b1
 800a6f4:	0800a7b1 	.word	0x0800a7b1
 800a6f8:	0800a7b1 	.word	0x0800a7b1
 800a6fc:	0800a7b1 	.word	0x0800a7b1
 800a700:	0800a7b1 	.word	0x0800a7b1
 800a704:	0800a7b1 	.word	0x0800a7b1
 800a708:	0800a7b1 	.word	0x0800a7b1
 800a70c:	0800a7b1 	.word	0x0800a7b1
 800a710:	0800a7b1 	.word	0x0800a7b1
 800a714:	0800a7b1 	.word	0x0800a7b1
 800a718:	0800a7b1 	.word	0x0800a7b1
 800a71c:	0800a7b1 	.word	0x0800a7b1
 800a720:	0800a7b1 	.word	0x0800a7b1
 800a724:	0800a7b1 	.word	0x0800a7b1
 800a728:	0800a7b1 	.word	0x0800a7b1
 800a72c:	0800a7b1 	.word	0x0800a7b1
 800a730:	0800a7b1 	.word	0x0800a7b1
 800a734:	0800a7b1 	.word	0x0800a7b1
 800a738:	0800a7b1 	.word	0x0800a7b1
 800a73c:	0800a7b1 	.word	0x0800a7b1
 800a740:	0800a7b1 	.word	0x0800a7b1
 800a744:	0800a7b1 	.word	0x0800a7b1
 800a748:	0800a7a9 	.word	0x0800a7a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a74c:	f7fc fea6 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800a750:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a752:	e033      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a754:	f7fc feb8 	bl	80074c8 <HAL_RCC_GetPCLK2Freq>
 800a758:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a75a:	e02f      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a75c:	f107 0314 	add.w	r3, r7, #20
 800a760:	4618      	mov	r0, r3
 800a762:	f7fd fdcb 	bl	80082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a76a:	e027      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	4618      	mov	r0, r3
 800a772:	f7fd ff0f 	bl	8008594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a77a:	e01f      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a77c:	4b2b      	ldr	r3, [pc, #172]	; (800a82c <UART_SetConfig+0x94c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 0320 	and.w	r3, r3, #32
 800a784:	2b00      	cmp	r3, #0
 800a786:	d009      	beq.n	800a79c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a788:	4b28      	ldr	r3, [pc, #160]	; (800a82c <UART_SetConfig+0x94c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	08db      	lsrs	r3, r3, #3
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	4a27      	ldr	r2, [pc, #156]	; (800a830 <UART_SetConfig+0x950>)
 800a794:	fa22 f303 	lsr.w	r3, r2, r3
 800a798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a79a:	e00f      	b.n	800a7bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a79c:	4b24      	ldr	r3, [pc, #144]	; (800a830 <UART_SetConfig+0x950>)
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7a0:	e00c      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <UART_SetConfig+0x954>)
 800a7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7a6:	e009      	b.n	800a7bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ae:	e005      	b.n	800a7bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 8121 	beq.w	800aa06 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	4a17      	ldr	r2, [pc, #92]	; (800a828 <UART_SetConfig+0x948>)
 800a7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d6:	005a      	lsls	r2, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	085b      	lsrs	r3, r3, #1
 800a7de:	441a      	add	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	2b0f      	cmp	r3, #15
 800a7f0:	d916      	bls.n	800a820 <UART_SetConfig+0x940>
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f8:	d212      	bcs.n	800a820 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f023 030f 	bic.w	r3, r3, #15
 800a802:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	085b      	lsrs	r3, r3, #1
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f003 0307 	and.w	r3, r3, #7
 800a80e:	b29a      	uxth	r2, r3
 800a810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a812:	4313      	orrs	r3, r2
 800a814:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a81c:	60da      	str	r2, [r3, #12]
 800a81e:	e0f2      	b.n	800aa06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a826:	e0ee      	b.n	800aa06 <UART_SetConfig+0xb26>
 800a828:	0800b4f4 	.word	0x0800b4f4
 800a82c:	58024400 	.word	0x58024400
 800a830:	03d09000 	.word	0x03d09000
 800a834:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a83c:	2b40      	cmp	r3, #64	; 0x40
 800a83e:	f200 80b7 	bhi.w	800a9b0 <UART_SetConfig+0xad0>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <UART_SetConfig+0x968>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a94d 	.word	0x0800a94d
 800a84c:	0800a955 	.word	0x0800a955
 800a850:	0800a9b1 	.word	0x0800a9b1
 800a854:	0800a9b1 	.word	0x0800a9b1
 800a858:	0800a95d 	.word	0x0800a95d
 800a85c:	0800a9b1 	.word	0x0800a9b1
 800a860:	0800a9b1 	.word	0x0800a9b1
 800a864:	0800a9b1 	.word	0x0800a9b1
 800a868:	0800a96d 	.word	0x0800a96d
 800a86c:	0800a9b1 	.word	0x0800a9b1
 800a870:	0800a9b1 	.word	0x0800a9b1
 800a874:	0800a9b1 	.word	0x0800a9b1
 800a878:	0800a9b1 	.word	0x0800a9b1
 800a87c:	0800a9b1 	.word	0x0800a9b1
 800a880:	0800a9b1 	.word	0x0800a9b1
 800a884:	0800a9b1 	.word	0x0800a9b1
 800a888:	0800a97d 	.word	0x0800a97d
 800a88c:	0800a9b1 	.word	0x0800a9b1
 800a890:	0800a9b1 	.word	0x0800a9b1
 800a894:	0800a9b1 	.word	0x0800a9b1
 800a898:	0800a9b1 	.word	0x0800a9b1
 800a89c:	0800a9b1 	.word	0x0800a9b1
 800a8a0:	0800a9b1 	.word	0x0800a9b1
 800a8a4:	0800a9b1 	.word	0x0800a9b1
 800a8a8:	0800a9b1 	.word	0x0800a9b1
 800a8ac:	0800a9b1 	.word	0x0800a9b1
 800a8b0:	0800a9b1 	.word	0x0800a9b1
 800a8b4:	0800a9b1 	.word	0x0800a9b1
 800a8b8:	0800a9b1 	.word	0x0800a9b1
 800a8bc:	0800a9b1 	.word	0x0800a9b1
 800a8c0:	0800a9b1 	.word	0x0800a9b1
 800a8c4:	0800a9b1 	.word	0x0800a9b1
 800a8c8:	0800a9a3 	.word	0x0800a9a3
 800a8cc:	0800a9b1 	.word	0x0800a9b1
 800a8d0:	0800a9b1 	.word	0x0800a9b1
 800a8d4:	0800a9b1 	.word	0x0800a9b1
 800a8d8:	0800a9b1 	.word	0x0800a9b1
 800a8dc:	0800a9b1 	.word	0x0800a9b1
 800a8e0:	0800a9b1 	.word	0x0800a9b1
 800a8e4:	0800a9b1 	.word	0x0800a9b1
 800a8e8:	0800a9b1 	.word	0x0800a9b1
 800a8ec:	0800a9b1 	.word	0x0800a9b1
 800a8f0:	0800a9b1 	.word	0x0800a9b1
 800a8f4:	0800a9b1 	.word	0x0800a9b1
 800a8f8:	0800a9b1 	.word	0x0800a9b1
 800a8fc:	0800a9b1 	.word	0x0800a9b1
 800a900:	0800a9b1 	.word	0x0800a9b1
 800a904:	0800a9b1 	.word	0x0800a9b1
 800a908:	0800a9b1 	.word	0x0800a9b1
 800a90c:	0800a9b1 	.word	0x0800a9b1
 800a910:	0800a9b1 	.word	0x0800a9b1
 800a914:	0800a9b1 	.word	0x0800a9b1
 800a918:	0800a9b1 	.word	0x0800a9b1
 800a91c:	0800a9b1 	.word	0x0800a9b1
 800a920:	0800a9b1 	.word	0x0800a9b1
 800a924:	0800a9b1 	.word	0x0800a9b1
 800a928:	0800a9b1 	.word	0x0800a9b1
 800a92c:	0800a9b1 	.word	0x0800a9b1
 800a930:	0800a9b1 	.word	0x0800a9b1
 800a934:	0800a9b1 	.word	0x0800a9b1
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a9b1 	.word	0x0800a9b1
 800a940:	0800a9b1 	.word	0x0800a9b1
 800a944:	0800a9b1 	.word	0x0800a9b1
 800a948:	0800a9a9 	.word	0x0800a9a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a94c:	f7fc fda6 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800a950:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a952:	e033      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a954:	f7fc fdb8 	bl	80074c8 <HAL_RCC_GetPCLK2Freq>
 800a958:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a95a:	e02f      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a95c:	f107 0314 	add.w	r3, r7, #20
 800a960:	4618      	mov	r0, r3
 800a962:	f7fd fccb 	bl	80082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a96a:	e027      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4618      	mov	r0, r3
 800a972:	f7fd fe0f 	bl	8008594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a97a:	e01f      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a97c:	4b2c      	ldr	r3, [pc, #176]	; (800aa30 <UART_SetConfig+0xb50>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b00      	cmp	r3, #0
 800a986:	d009      	beq.n	800a99c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a988:	4b29      	ldr	r3, [pc, #164]	; (800aa30 <UART_SetConfig+0xb50>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	08db      	lsrs	r3, r3, #3
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	4a28      	ldr	r2, [pc, #160]	; (800aa34 <UART_SetConfig+0xb54>)
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a99a:	e00f      	b.n	800a9bc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a99c:	4b25      	ldr	r3, [pc, #148]	; (800aa34 <UART_SetConfig+0xb54>)
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a0:	e00c      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9a2:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <UART_SetConfig+0xb58>)
 800a9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a6:	e009      	b.n	800a9bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9ae:	e005      	b.n	800a9bc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a9ba:	bf00      	nop
    }

    if (pclk != 0U)
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d021      	beq.n	800aa06 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	4a1d      	ldr	r2, [pc, #116]	; (800aa3c <UART_SetConfig+0xb5c>)
 800a9c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	441a      	add	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	2b0f      	cmp	r3, #15
 800a9ec:	d908      	bls.n	800aa00 <UART_SetConfig+0xb20>
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f4:	d204      	bcs.n	800aa00 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9fc:	60da      	str	r2, [r3, #12]
 800a9fe:	e002      	b.n	800aa06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800aa22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3738      	adds	r7, #56	; 0x38
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800aa30:	58024400 	.word	0x58024400
 800aa34:	03d09000 	.word	0x03d09000
 800aa38:	003d0900 	.word	0x003d0900
 800aa3c:	0800b4f4 	.word	0x0800b4f4

0800aa40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf6:	f003 0320 	and.w	r3, r3, #32
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01a      	beq.n	800ab56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab3e:	d10a      	bne.n	800ab56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	605a      	str	r2, [r3, #4]
  }
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ab94:	f7f6 fe36 	bl	8001804 <HAL_GetTick>
 800ab98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	d10e      	bne.n	800abc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f82c 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e022      	b.n	800ac0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d10e      	bne.n	800abf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f816 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e00c      	b.n	800ac0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac24:	e062      	b.n	800acec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2c:	d05e      	beq.n	800acec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac2e:	f7f6 fde9 	bl	8001804 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d302      	bcc.n	800ac44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d11d      	bne.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0201 	bic.w	r2, r2, #1
 800ac62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e045      	b.n	800ad0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0304 	and.w	r3, r3, #4
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d02e      	beq.n	800acec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac9c:	d126      	bne.n	800acec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aca6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2220      	movs	r2, #32
 800accc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2220      	movs	r2, #32
 800acd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2220      	movs	r2, #32
 800acdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e00f      	b.n	800ad0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	69da      	ldr	r2, [r3, #28]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	4013      	ands	r3, r2
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	bf0c      	ite	eq
 800acfc:	2301      	moveq	r3, #1
 800acfe:	2300      	movne	r3, #0
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d08d      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_UARTEx_DisableFifoMode+0x16>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e027      	b.n	800ad7a <HAL_UARTEx_DisableFifoMode+0x66>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2224      	movs	r2, #36	; 0x24
 800ad36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e02d      	b.n	800adfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2224      	movs	r2, #36	; 0x24
 800adaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 0201 	bic.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f850 	bl	800ae80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e02d      	b.n	800ae76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2224      	movs	r2, #36	; 0x24
 800ae26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0201 	bic.w	r2, r2, #1
 800ae40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f812 	bl	800ae80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b089      	sub	sp, #36	; 0x24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ae88:	4a2f      	ldr	r2, [pc, #188]	; (800af48 <UARTEx_SetNbDataToProcess+0xc8>)
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae96:	4a2d      	ldr	r2, [pc, #180]	; (800af4c <UARTEx_SetNbDataToProcess+0xcc>)
 800ae98:	f107 030c 	add.w	r3, r7, #12
 800ae9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aea0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d108      	bne.n	800aebe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aebc:	e03d      	b.n	800af3a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aebe:	2310      	movs	r3, #16
 800aec0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aec2:	2310      	movs	r3, #16
 800aec4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	0e5b      	lsrs	r3, r3, #25
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	f003 0307 	and.w	r3, r3, #7
 800aed4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	0f5b      	lsrs	r3, r3, #29
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aee6:	7fbb      	ldrb	r3, [r7, #30]
 800aee8:	7f3a      	ldrb	r2, [r7, #28]
 800aeea:	f107 0120 	add.w	r1, r7, #32
 800aeee:	440a      	add	r2, r1
 800aef0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aef4:	fb02 f303 	mul.w	r3, r2, r3
 800aef8:	7f3a      	ldrb	r2, [r7, #28]
 800aefa:	f107 0120 	add.w	r1, r7, #32
 800aefe:	440a      	add	r2, r1
 800af00:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800af04:	fb93 f3f2 	sdiv	r3, r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	7f7a      	ldrb	r2, [r7, #29]
 800af14:	f107 0120 	add.w	r1, r7, #32
 800af18:	440a      	add	r2, r1
 800af1a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
 800af22:	7f7a      	ldrb	r2, [r7, #29]
 800af24:	f107 0120 	add.w	r1, r7, #32
 800af28:	440a      	add	r2, r1
 800af2a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800af2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af32:	b29a      	uxth	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af3a:	bf00      	nop
 800af3c:	3724      	adds	r7, #36	; 0x24
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	0800b4cc 	.word	0x0800b4cc
 800af4c:	0800b4d4 	.word	0x0800b4d4

0800af50 <OV2640_Init>:
static void OV2640_AutoExposure(uint8_t level);
static void OV2640_JPEGConfig(ImageFormat_TypeDef ImageFormat);
static void OV2640_BrightnessConfig(uint8_t Brightness);
static void  ov2640_config(void);
uint8_t OV2640_Init(I2C_HandleTypeDef *hi2c2, DCMI_HandleTypeDef *hdcmi, UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
	mI2C = hi2c2;
 800af5c:	4a0b      	ldr	r2, [pc, #44]	; (800af8c <OV2640_Init+0x3c>)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6013      	str	r3, [r2, #0]
	mHuart = huart;
 800af62:	4a0b      	ldr	r2, [pc, #44]	; (800af90 <OV2640_Init+0x40>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6013      	str	r3, [r2, #0]
	DCMI_hdcmi = hdcmi;
 800af68:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <OV2640_Init+0x44>)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6013      	str	r3, [r2, #0]
	if(OV2640_ReadID(&OV2640ID))return 1;
 800af6e:	480a      	ldr	r0, [pc, #40]	; (800af98 <OV2640_Init+0x48>)
 800af70:	f000 f814 	bl	800af9c <OV2640_ReadID>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <OV2640_Init+0x2e>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e002      	b.n	800af84 <OV2640_Init+0x34>
	ov2640_config();
 800af7e:	f000 f88f 	bl	800b0a0 <ov2640_config>
	return 0;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	2400a348 	.word	0x2400a348
 800af90:	2400a340 	.word	0x2400a340
 800af94:	2400a33c 	.word	0x2400a33c
 800af98:	2400a344 	.word	0x2400a344

0800af9c <OV2640_ReadID>:

uint8_t OV2640_ReadID(OV2640_IDTypeDef* OV2640ID)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	i2c_sent(OV2640_DSP_RA_DLMT, 0x01);
 800afa4:	2101      	movs	r1, #1
 800afa6:	20ff      	movs	r0, #255	; 0xff
 800afa8:	f000 f83a 	bl	800b020 <i2c_sent>

	OV2640ID->Manufacturer_ID1 =i2c_receive(OV2640_SENSOR_MIDH);
 800afac:	201c      	movs	r0, #28
 800afae:	f000 f857 	bl	800b060 <i2c_receive>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	701a      	strb	r2, [r3, #0]
	if(OV2640ID->Manufacturer_ID1 != 0x7F)return 1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b7f      	cmp	r3, #127	; 0x7f
 800afc0:	d001      	beq.n	800afc6 <OV2640_ReadID+0x2a>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e027      	b.n	800b016 <OV2640_ReadID+0x7a>

	OV2640ID->Manufacturer_ID2 =i2c_receive(OV2640_SENSOR_MIDL);
 800afc6:	201d      	movs	r0, #29
 800afc8:	f000 f84a 	bl	800b060 <i2c_receive>
 800afcc:	4603      	mov	r3, r0
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	705a      	strb	r2, [r3, #1]
	if(OV2640ID->Manufacturer_ID2 != 0xA2)return 2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	785b      	ldrb	r3, [r3, #1]
 800afd8:	2ba2      	cmp	r3, #162	; 0xa2
 800afda:	d001      	beq.n	800afe0 <OV2640_ReadID+0x44>
 800afdc:	2302      	movs	r3, #2
 800afde:	e01a      	b.n	800b016 <OV2640_ReadID+0x7a>

	OV2640ID->Version =i2c_receive(OV2640_SENSOR_PIDH);
 800afe0:	200a      	movs	r0, #10
 800afe2:	f000 f83d 	bl	800b060 <i2c_receive>
 800afe6:	4603      	mov	r3, r0
 800afe8:	461a      	mov	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	709a      	strb	r2, [r3, #2]
	if(OV2640ID->Version != 0x26)return 3;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	789b      	ldrb	r3, [r3, #2]
 800aff2:	2b26      	cmp	r3, #38	; 0x26
 800aff4:	d001      	beq.n	800affa <OV2640_ReadID+0x5e>
 800aff6:	2303      	movs	r3, #3
 800aff8:	e00d      	b.n	800b016 <OV2640_ReadID+0x7a>

	OV2640ID->PID =i2c_receive(OV2640_SENSOR_PIDL);
 800affa:	200b      	movs	r0, #11
 800affc:	f000 f830 	bl	800b060 <i2c_receive>
 800b000:	4603      	mov	r3, r0
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	70da      	strb	r2, [r3, #3]
	if(OV2640ID->PID != 0x42)return 4;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	78db      	ldrb	r3, [r3, #3]
 800b00c:	2b42      	cmp	r3, #66	; 0x42
 800b00e:	d001      	beq.n	800b014 <OV2640_ReadID+0x78>
 800b010:	2304      	movs	r3, #4
 800b012:	e000      	b.n	800b016 <OV2640_ReadID+0x7a>

	return 0;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <i2c_sent>:

void i2c_sent(uint8_t sub_address,uint8_t data)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af02      	add	r7, sp, #8
 800b026:	4603      	mov	r3, r0
 800b028:	460a      	mov	r2, r1
 800b02a:	71fb      	strb	r3, [r7, #7]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71bb      	strb	r3, [r7, #6]
	uint8_t sent_data[2];
	sent_data[0]=sub_address;
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	733b      	strb	r3, [r7, #12]
	sent_data[1]=data;
 800b034:	79bb      	ldrb	r3, [r7, #6]
 800b036:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(mI2C, (uint16_t)I2C_ADDRESS, (uint8_t*)sent_data, 2, 10000);
 800b038:	4b07      	ldr	r3, [pc, #28]	; (800b058 <i2c_sent+0x38>)
 800b03a:	6818      	ldr	r0, [r3, #0]
 800b03c:	4b07      	ldr	r3, [pc, #28]	; (800b05c <i2c_sent+0x3c>)
 800b03e:	8819      	ldrh	r1, [r3, #0]
 800b040:	f107 020c 	add.w	r2, r7, #12
 800b044:	f242 7310 	movw	r3, #10000	; 0x2710
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2302      	movs	r3, #2
 800b04c:	f7fa fdac 	bl	8005ba8 <HAL_I2C_Master_Transmit>
}
 800b050:	bf00      	nop
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	2400a348 	.word	0x2400a348
 800b05c:	2400000e 	.word	0x2400000e

0800b060 <i2c_receive>:

uint8_t i2c_receive(uint8_t sub_address)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af04      	add	r7, sp, #16
 800b066:	4603      	mov	r3, r0
 800b068:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_I2C_Mem_Read(mI2C,(uint16_t)I2C_ADDRESS,sub_address,1,(uint8_t*)&data,1,10000);
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <i2c_receive+0x38>)
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	4b0b      	ldr	r3, [pc, #44]	; (800b09c <i2c_receive+0x3c>)
 800b070:	8819      	ldrh	r1, [r3, #0]
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	b29a      	uxth	r2, r3
 800b076:	f242 7310 	movw	r3, #10000	; 0x2710
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	2301      	movs	r3, #1
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	f107 030f 	add.w	r3, r7, #15
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	2301      	movs	r3, #1
 800b088:	f7fa fe82 	bl	8005d90 <HAL_I2C_Mem_Read>
	return data;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	2400a348 	.word	0x2400a348
 800b09c:	2400000e 	.word	0x2400000e

0800b0a0 <ov2640_config>:

void ov2640_config(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	af00      	add	r7, sp, #0
	OV2640_JPEGConfig(JPEG_176x144);
 800b0a4:	2003      	movs	r0, #3
 800b0a6:	f000 f809 	bl	800b0bc <OV2640_JPEGConfig>
	OV2640_BrightnessConfig(0x20);
 800b0aa:	2020      	movs	r0, #32
 800b0ac:	f000 f8fc 	bl	800b2a8 <OV2640_BrightnessConfig>
	OV2640_AutoExposure(0);
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	f000 f91b 	bl	800b2ec <OV2640_AutoExposure>

}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <OV2640_JPEGConfig>:

void OV2640_JPEGConfig(ImageFormat_TypeDef ImageFormat)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  //OV2640_Reset();
  //delay_ms(200);

  for(i=0; i<(sizeof(OV2640_JPEG_INIT)/2); i++)
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e00e      	b.n	800b0ea <OV2640_JPEGConfig+0x2e>
  {
    i2c_sent(OV2640_JPEG_INIT[i][0], OV2640_JPEG_INIT[i][1]);
 800b0cc:	4a6e      	ldr	r2, [pc, #440]	; (800b288 <OV2640_JPEGConfig+0x1cc>)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b0d4:	4a6c      	ldr	r2, [pc, #432]	; (800b288 <OV2640_JPEGConfig+0x1cc>)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	4413      	add	r3, r2
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	f7ff ff9e 	bl	800b020 <i2c_sent>
  for(i=0; i<(sizeof(OV2640_JPEG_INIT)/2); i++)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2bbd      	cmp	r3, #189	; 0xbd
 800b0ee:	d9ed      	bls.n	800b0cc <OV2640_JPEGConfig+0x10>
		//delay_ms(1);
  }


  for(i=0; i<(sizeof(OV2640_YUV422)/2); i++)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e00e      	b.n	800b114 <OV2640_JPEGConfig+0x58>
  {
    i2c_sent(OV2640_YUV422[i][0], OV2640_YUV422[i][1]);
 800b0f6:	4a65      	ldr	r2, [pc, #404]	; (800b28c <OV2640_JPEGConfig+0x1d0>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b0fe:	4a63      	ldr	r2, [pc, #396]	; (800b28c <OV2640_JPEGConfig+0x1d0>)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	4413      	add	r3, r2
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	4619      	mov	r1, r3
 800b10a:	f7ff ff89 	bl	800b020 <i2c_sent>
  for(i=0; i<(sizeof(OV2640_YUV422)/2); i++)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b08      	cmp	r3, #8
 800b118:	d9ed      	bls.n	800b0f6 <OV2640_JPEGConfig+0x3a>
		//delay_ms(1);
  }

  i2c_sent(0xff, 0x01);
 800b11a:	2101      	movs	r1, #1
 800b11c:	20ff      	movs	r0, #255	; 0xff
 800b11e:	f7ff ff7f 	bl	800b020 <i2c_sent>
  i2c_sent(0x15, 0x00);
 800b122:	2100      	movs	r1, #0
 800b124:	2015      	movs	r0, #21
 800b126:	f7ff ff7b 	bl	800b020 <i2c_sent>


  for(i=0; i<(sizeof(OV2640_JPEG)/2); i++)
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	e00e      	b.n	800b14e <OV2640_JPEGConfig+0x92>
  {
    i2c_sent(OV2640_JPEG[i][0], OV2640_JPEG[i][1]);
 800b130:	4a57      	ldr	r2, [pc, #348]	; (800b290 <OV2640_JPEGConfig+0x1d4>)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b138:	4a55      	ldr	r2, [pc, #340]	; (800b290 <OV2640_JPEGConfig+0x1d4>)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4413      	add	r3, r2
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	4619      	mov	r1, r3
 800b144:	f7ff ff6c 	bl	800b020 <i2c_sent>
  for(i=0; i<(sizeof(OV2640_JPEG)/2); i++)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3301      	adds	r3, #1
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b07      	cmp	r3, #7
 800b152:	d9ed      	bls.n	800b130 <OV2640_JPEGConfig+0x74>
		//delay_ms(1);
  }

  //delay_ms(100);

  switch(ImageFormat)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	3b02      	subs	r3, #2
 800b158:	2b04      	cmp	r3, #4
 800b15a:	d87b      	bhi.n	800b254 <OV2640_JPEGConfig+0x198>
 800b15c:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <OV2640_JPEGConfig+0xa8>)
 800b15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b162:	bf00      	nop
 800b164:	0800b179 	.word	0x0800b179
 800b168:	0800b1a5 	.word	0x0800b1a5
 800b16c:	0800b1d1 	.word	0x0800b1d1
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b229 	.word	0x0800b229
  {
    case JPEG_160x120:
    {
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	e00e      	b.n	800b19c <OV2640_JPEGConfig+0xe0>
      {
        i2c_sent(OV2640_160x120_JPEG[i][0], OV2640_160x120_JPEG[i][1]);
 800b17e:	4a45      	ldr	r2, [pc, #276]	; (800b294 <OV2640_JPEGConfig+0x1d8>)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b186:	4a43      	ldr	r2, [pc, #268]	; (800b294 <OV2640_JPEGConfig+0x1d8>)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	4413      	add	r3, r2
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	4619      	mov	r1, r3
 800b192:	f7ff ff45 	bl	800b020 <i2c_sent>
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b26      	cmp	r3, #38	; 0x26
 800b1a0:	d9ed      	bls.n	800b17e <OV2640_JPEGConfig+0xc2>
		//delay_ms(1);
      }
      break;
 800b1a2:	e06d      	b.n	800b280 <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_176x144:
    {
      for(i=0; i<(sizeof(OV2640_176x144_JPEG)/2); i++)
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	e00e      	b.n	800b1c8 <OV2640_JPEGConfig+0x10c>
      {
        i2c_sent(OV2640_176x144_JPEG[i][0], OV2640_176x144_JPEG[i][1]);
 800b1aa:	4a3b      	ldr	r2, [pc, #236]	; (800b298 <OV2640_JPEGConfig+0x1dc>)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b1b2:	4a39      	ldr	r2, [pc, #228]	; (800b298 <OV2640_JPEGConfig+0x1dc>)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	4413      	add	r3, r2
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	f7ff ff2f 	bl	800b020 <i2c_sent>
      for(i=0; i<(sizeof(OV2640_176x144_JPEG)/2); i++)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b26      	cmp	r3, #38	; 0x26
 800b1cc:	d9ed      	bls.n	800b1aa <OV2640_JPEGConfig+0xee>
      }
      break;
 800b1ce:	e057      	b.n	800b280 <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_320x240:
    {
      for(i=0; i<(sizeof(OV2640_320x240_JPEG)/2); i++)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e00e      	b.n	800b1f4 <OV2640_JPEGConfig+0x138>
			{
				i2c_sent(OV2640_320x240_JPEG[i][0], OV2640_320x240_JPEG[i][1]);
 800b1d6:	4a31      	ldr	r2, [pc, #196]	; (800b29c <OV2640_JPEGConfig+0x1e0>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b1de:	4a2f      	ldr	r2, [pc, #188]	; (800b29c <OV2640_JPEGConfig+0x1e0>)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	785b      	ldrb	r3, [r3, #1]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f7ff ff19 	bl	800b020 <i2c_sent>
      for(i=0; i<(sizeof(OV2640_320x240_JPEG)/2); i++)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b27      	cmp	r3, #39	; 0x27
 800b1f8:	d9ed      	bls.n	800b1d6 <OV2640_JPEGConfig+0x11a>
				//delay_ms(1);
			}
      break;
 800b1fa:	e041      	b.n	800b280 <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_352x288:
    {
      for(i=0; i<(sizeof(OV2640_352x288_JPEG)/2); i++)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e00e      	b.n	800b220 <OV2640_JPEGConfig+0x164>
      {
        i2c_sent(OV2640_352x288_JPEG[i][0], OV2640_352x288_JPEG[i][1]);
 800b202:	4a27      	ldr	r2, [pc, #156]	; (800b2a0 <OV2640_JPEGConfig+0x1e4>)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b20a:	4a25      	ldr	r2, [pc, #148]	; (800b2a0 <OV2640_JPEGConfig+0x1e4>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	4413      	add	r3, r2
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	4619      	mov	r1, r3
 800b216:	f7ff ff03 	bl	800b020 <i2c_sent>
      for(i=0; i<(sizeof(OV2640_352x288_JPEG)/2); i++)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b26      	cmp	r3, #38	; 0x26
 800b224:	d9ed      	bls.n	800b202 <OV2640_JPEGConfig+0x146>
      }
      break;
 800b226:	e02b      	b.n	800b280 <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_800x600:
		{
			for(i=0; i<(sizeof(OV2640_800x600_JPEG)/2); i++)
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e00e      	b.n	800b24c <OV2640_JPEGConfig+0x190>
			{
				i2c_sent(OV2640_800x600_JPEG[i][0], OV2640_800x600_JPEG[i][1]);
 800b22e:	4a1d      	ldr	r2, [pc, #116]	; (800b2a4 <OV2640_JPEGConfig+0x1e8>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b236:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <OV2640_JPEGConfig+0x1e8>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	4413      	add	r3, r2
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	4619      	mov	r1, r3
 800b242:	f7ff feed 	bl	800b020 <i2c_sent>
			for(i=0; i<(sizeof(OV2640_800x600_JPEG)/2); i++)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b27      	cmp	r3, #39	; 0x27
 800b250:	d9ed      	bls.n	800b22e <OV2640_JPEGConfig+0x172>
			//delay_ms(1);
			}
			break;
 800b252:	e015      	b.n	800b280 <OV2640_JPEGConfig+0x1c4>
		}

    default:
    {
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	e00e      	b.n	800b278 <OV2640_JPEGConfig+0x1bc>
      {
        i2c_sent(OV2640_160x120_JPEG[i][0], OV2640_160x120_JPEG[i][1]);
 800b25a:	4a0e      	ldr	r2, [pc, #56]	; (800b294 <OV2640_JPEGConfig+0x1d8>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800b262:	4a0c      	ldr	r2, [pc, #48]	; (800b294 <OV2640_JPEGConfig+0x1d8>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	005b      	lsls	r3, r3, #1
 800b268:	4413      	add	r3, r2
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	4619      	mov	r1, r3
 800b26e:	f7ff fed7 	bl	800b020 <i2c_sent>
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3301      	adds	r3, #1
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b26      	cmp	r3, #38	; 0x26
 800b27c:	d9ed      	bls.n	800b25a <OV2640_JPEGConfig+0x19e>
      }
      break;
 800b27e:	bf00      	nop
    }
  }
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	0800b50c 	.word	0x0800b50c
 800b28c:	0800b688 	.word	0x0800b688
 800b290:	0800b69c 	.word	0x0800b69c
 800b294:	0800b6ac 	.word	0x0800b6ac
 800b298:	0800b6fc 	.word	0x0800b6fc
 800b29c:	0800b74c 	.word	0x0800b74c
 800b2a0:	0800b7ec 	.word	0x0800b7ec
 800b2a4:	0800b79c 	.word	0x0800b79c

0800b2a8 <OV2640_BrightnessConfig>:

void OV2640_BrightnessConfig(uint8_t Brightness)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
  i2c_sent(0xff, 0x00);
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	20ff      	movs	r0, #255	; 0xff
 800b2b6:	f7ff feb3 	bl	800b020 <i2c_sent>
  i2c_sent(0x7c, 0x00);
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	207c      	movs	r0, #124	; 0x7c
 800b2be:	f7ff feaf 	bl	800b020 <i2c_sent>
  i2c_sent(0x7d, 0x04);
 800b2c2:	2104      	movs	r1, #4
 800b2c4:	207d      	movs	r0, #125	; 0x7d
 800b2c6:	f7ff feab 	bl	800b020 <i2c_sent>
  i2c_sent(0x7c, 0x09);
 800b2ca:	2109      	movs	r1, #9
 800b2cc:	207c      	movs	r0, #124	; 0x7c
 800b2ce:	f7ff fea7 	bl	800b020 <i2c_sent>
  i2c_sent(0x7d, Brightness);
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	207d      	movs	r0, #125	; 0x7d
 800b2d8:	f7ff fea2 	bl	800b020 <i2c_sent>
  i2c_sent(0x7d, 0x00);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	207d      	movs	r0, #125	; 0x7d
 800b2e0:	f7ff fe9e 	bl	800b020 <i2c_sent>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <OV2640_AutoExposure>:

void OV2640_AutoExposure(uint8_t level)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	71fb      	strb	r3, [r7, #7]
	switch(level)
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d821      	bhi.n	800b340 <OV2640_AutoExposure+0x54>
 800b2fc:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <OV2640_AutoExposure+0x18>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b319 	.word	0x0800b319
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b329 	.word	0x0800b329
 800b310:	0800b331 	.word	0x0800b331
 800b314:	0800b339 	.word	0x0800b339
	{
		case 0:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL0);
 800b318:	480d      	ldr	r0, [pc, #52]	; (800b350 <OV2640_AutoExposure+0x64>)
 800b31a:	f000 f823 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b31e:	e013      	b.n	800b348 <OV2640_AutoExposure+0x5c>
		case 1:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL1);
 800b320:	480c      	ldr	r0, [pc, #48]	; (800b354 <OV2640_AutoExposure+0x68>)
 800b322:	f000 f81f 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b326:	e00f      	b.n	800b348 <OV2640_AutoExposure+0x5c>
		case 2:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL2);
 800b328:	480b      	ldr	r0, [pc, #44]	; (800b358 <OV2640_AutoExposure+0x6c>)
 800b32a:	f000 f81b 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b32e:	e00b      	b.n	800b348 <OV2640_AutoExposure+0x5c>
		case 3:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL3);
 800b330:	480a      	ldr	r0, [pc, #40]	; (800b35c <OV2640_AutoExposure+0x70>)
 800b332:	f000 f817 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b336:	e007      	b.n	800b348 <OV2640_AutoExposure+0x5c>
		case 4:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL4);
 800b338:	4809      	ldr	r0, [pc, #36]	; (800b360 <OV2640_AutoExposure+0x74>)
 800b33a:	f000 f813 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b33e:	e003      	b.n	800b348 <OV2640_AutoExposure+0x5c>
		default:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL0);
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <OV2640_AutoExposure+0x64>)
 800b342:	f000 f80f 	bl	800b364 <SCCB_WriteRegs>
			break;
 800b346:	bf00      	nop
	}

}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	0800b83c 	.word	0x0800b83c
 800b354:	0800b84c 	.word	0x0800b84c
 800b358:	0800b85c 	.word	0x0800b85c
 800b35c:	0800b86c 	.word	0x0800b86c
 800b360:	0800b87c 	.word	0x0800b87c

0800b364 <SCCB_WriteRegs>:

void SCCB_WriteRegs(const uint8_t* pbuf)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if((*pbuf == 0) && (*(pbuf + 1) == 0))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d104      	bne.n	800b37e <SCCB_WriteRegs+0x1a>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3301      	adds	r3, #1
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00b      	beq.n	800b396 <SCCB_WriteRegs+0x32>
		{
			break;
		}
		else
		{
			i2c_sent((uint8_t)*pbuf++, (uint8_t)*pbuf++);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	7818      	ldrb	r0, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	f7ff fe46 	bl	800b020 <i2c_sent>
		if((*pbuf == 0) && (*(pbuf + 1) == 0))
 800b394:	e7ea      	b.n	800b36c <SCCB_WriteRegs+0x8>
		}
	}
}
 800b396:	bf00      	nop
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <StartOV2640>:
{
	osSemaphoreRelease(sem_TakePhoto);
}*/

void StartOV2640()//拍照的线程
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <StartOV2640+0x38>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <StartOV2640+0x38>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0201 	orr.w	r2, r2, #1
 800b3b6:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800b3b8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800b3bc:	2100      	movs	r1, #0
 800b3be:	4807      	ldr	r0, [pc, #28]	; (800b3dc <StartOV2640+0x3c>)
 800b3c0:	f000 f870 	bl	800b4a4 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800b3c4:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <StartOV2640+0x38>)
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	4a04      	ldr	r2, [pc, #16]	; (800b3dc <StartOV2640+0x3c>)
 800b3ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3ce:	2102      	movs	r1, #2
 800b3d0:	f7f6 fbdc 	bl	8001b8c <HAL_DCMI_Start_DMA>

}
 800b3d4:	bf00      	nop
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2400a33c 	.word	0x2400a33c
 800b3dc:	2400002c 	.word	0x2400002c

0800b3e0 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800b3e8:	4b18      	ldr	r3, [pc, #96]	; (800b44c <HAL_DCMI_FrameEventCallback+0x6c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f6 fcef 	bl	8001dd0 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800b3f2:	4b16      	ldr	r3, [pc, #88]	; (800b44c <HAL_DCMI_FrameEventCallback+0x6c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f6 fc8a 	bl	8001d10 <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800b3fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b400:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b402:	e009      	b.n	800b418 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3b01      	subs	r3, #1
 800b408:	4a11      	ldr	r2, [pc, #68]	; (800b450 <HAL_DCMI_FrameEventCallback+0x70>)
 800b40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3b01      	subs	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dcf2      	bgt.n	800b404 <HAL_DCMI_FrameEventCallback+0x24>
 800b41e:	e000      	b.n	800b422 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800b420:	bf00      	nop
	}
	pictureLength*=4;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800b428:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <HAL_DCMI_FrameEventCallback+0x74>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d007      	beq.n	800b440 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800b430:	4b08      	ldr	r3, [pc, #32]	; (800b454 <HAL_DCMI_FrameEventCallback+0x74>)
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	b29a      	uxth	r2, r3
 800b438:	4b07      	ldr	r3, [pc, #28]	; (800b458 <HAL_DCMI_FrameEventCallback+0x78>)
 800b43a:	4905      	ldr	r1, [pc, #20]	; (800b450 <HAL_DCMI_FrameEventCallback+0x70>)
 800b43c:	f7fe fcba 	bl	8009db4 <HAL_UART_Transmit>

	StartOV2640();
 800b440:	f7ff ffae 	bl	800b3a0 <StartOV2640>
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	2400a33c 	.word	0x2400a33c
 800b450:	2400002c 	.word	0x2400002c
 800b454:	2400a340 	.word	0x2400a340
 800b458:	000186a0 	.word	0x000186a0

0800b45c <__libc_init_array>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	4e0d      	ldr	r6, [pc, #52]	; (800b494 <__libc_init_array+0x38>)
 800b460:	4c0d      	ldr	r4, [pc, #52]	; (800b498 <__libc_init_array+0x3c>)
 800b462:	1ba4      	subs	r4, r4, r6
 800b464:	10a4      	asrs	r4, r4, #2
 800b466:	2500      	movs	r5, #0
 800b468:	42a5      	cmp	r5, r4
 800b46a:	d109      	bne.n	800b480 <__libc_init_array+0x24>
 800b46c:	4e0b      	ldr	r6, [pc, #44]	; (800b49c <__libc_init_array+0x40>)
 800b46e:	4c0c      	ldr	r4, [pc, #48]	; (800b4a0 <__libc_init_array+0x44>)
 800b470:	f000 f820 	bl	800b4b4 <_init>
 800b474:	1ba4      	subs	r4, r4, r6
 800b476:	10a4      	asrs	r4, r4, #2
 800b478:	2500      	movs	r5, #0
 800b47a:	42a5      	cmp	r5, r4
 800b47c:	d105      	bne.n	800b48a <__libc_init_array+0x2e>
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b484:	4798      	blx	r3
 800b486:	3501      	adds	r5, #1
 800b488:	e7ee      	b.n	800b468 <__libc_init_array+0xc>
 800b48a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b48e:	4798      	blx	r3
 800b490:	3501      	adds	r5, #1
 800b492:	e7f2      	b.n	800b47a <__libc_init_array+0x1e>
 800b494:	0800b894 	.word	0x0800b894
 800b498:	0800b894 	.word	0x0800b894
 800b49c:	0800b894 	.word	0x0800b894
 800b4a0:	0800b898 	.word	0x0800b898

0800b4a4 <memset>:
 800b4a4:	4402      	add	r2, r0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d100      	bne.n	800b4ae <memset+0xa>
 800b4ac:	4770      	bx	lr
 800b4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b4b2:	e7f9      	b.n	800b4a8 <memset+0x4>

0800b4b4 <_init>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_fini>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr
