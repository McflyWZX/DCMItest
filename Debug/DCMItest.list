
DCMItest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa0  08009fa0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa0  08009fa0  00019fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1d0  24000010  08009fb8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a1e0  08009fb8  0002a1e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002282b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038f1  00000000  00000000  00042869  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00046160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00047108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000374d8  00000000  00000000  00047f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d2c  00000000  00000000  0007f410  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00158c59  00000000  00000000  0009113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e9d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  001e9e10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009bc0 	.word	0x08009bc0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009bc0 	.word	0x08009bc0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DCMI_Init+0x60>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_DCMI_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_DCMI_Init+0x60>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DCMI_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DCMI_Init+0x60>)
 8000608:	2208      	movs	r2, #8
 800060a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_DCMI_Init+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_DCMI_Init+0x60>)
 8000626:	f000 fecd 	bl	80013c4 <HAL_DCMI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fb70 	bl	8000d14 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2400a0a4 	.word	0x2400a0a4
 800063c:	48020000 	.word	0x48020000

08000640 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a7a      	ldr	r2, [pc, #488]	; (8000848 <HAL_DCMI_MspInit+0x208>)
 800065e:	4293      	cmp	r3, r2
 8000660:	f040 80ed 	bne.w	800083e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000664:	4b79      	ldr	r3, [pc, #484]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066a:	4a78      	ldr	r2, [pc, #480]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000674:	4b75      	ldr	r3, [pc, #468]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	623b      	str	r3, [r7, #32]
 8000680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a70      	ldr	r2, [pc, #448]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b6e      	ldr	r3, [pc, #440]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b6a      	ldr	r3, [pc, #424]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a69      	ldr	r2, [pc, #420]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b63      	ldr	r3, [pc, #396]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a61      	ldr	r2, [pc, #388]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a5a      	ldr	r2, [pc, #360]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000718:	2370      	movs	r3, #112	; 0x70
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000728:	230d      	movs	r3, #13
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <HAL_DCMI_MspInit+0x210>)
 8000734:	f004 fc74 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000748:	230d      	movs	r3, #13
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4840      	ldr	r0, [pc, #256]	; (8000854 <HAL_DCMI_MspInit+0x214>)
 8000754:	f004 fc64 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800076a:	230d      	movs	r3, #13
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <HAL_DCMI_MspInit+0x218>)
 8000776:	f004 fc53 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077a:	2308      	movs	r3, #8
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800078a:	230d      	movs	r3, #13
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <HAL_DCMI_MspInit+0x21c>)
 8000796:	f004 fc43 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007aa:	230d      	movs	r3, #13
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	482a      	ldr	r0, [pc, #168]	; (8000860 <HAL_DCMI_MspInit+0x220>)
 80007b6:	f004 fc33 	bl	8005020 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_DCMI_MspInit+0x228>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c2:	224b      	movs	r2, #75	; 0x4b
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000802:	2203      	movs	r2, #3
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000814:	f001 f91a 	bl	8001a4c <HAL_DMA_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800081e:	f000 fa79 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	204e      	movs	r0, #78	; 0x4e
 8000834:	f000 fd91 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f000 fda8 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48020000 	.word	0x48020000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021000 	.word	0x58021000
 8000854:	58020000 	.word	0x58020000
 8000858:	58020800 	.word	0x58020800
 800085c:	58020c00 	.word	0x58020c00
 8000860:	58020400 	.word	0x58020400
 8000864:	2400a02c 	.word	0x2400a02c
 8000868:	40020010 	.word	0x40020010

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x3c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x3c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200b      	movs	r0, #11
 8000896:	f000 fd60 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800089a:	200b      	movs	r0, #11
 800089c:	f000 fd77 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024400 	.word	0x58024400

080008ac <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	4a49      	ldr	r2, [pc, #292]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d2:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e0:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a42      	ldr	r2, [pc, #264]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x144>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a3a      	ldr	r2, [pc, #232]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <MX_GPIO_Init+0x144>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x144>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x144>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_GPIO_Init+0x144>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0x144>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0x144>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DCMI_GPIO_Port, LED_DCMI_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	481d      	ldr	r0, [pc, #116]	; (80009f4 <MX_GPIO_Init+0x148>)
 800097e:	f004 fcff 	bl	8005380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	481c      	ldr	r0, [pc, #112]	; (80009f8 <MX_GPIO_Init+0x14c>)
 8000988:	f004 fcfa 	bl	8005380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_DCMI_Pin;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_DCMI_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_GPIO_Init+0x148>)
 80009a6:	f004 fb3b 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0x150>)
 80009c8:	f004 fb2a 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0x14c>)
 80009e4:	f004 fb1c 	bl	8005020 <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	; 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58020400 	.word	0x58020400
 80009f8:	58020c00 	.word	0x58020c00
 80009fc:	58020000 	.word	0x58020000

08000a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_I2C1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a3c:	f004 fcba 	bl	80053b4 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 f965 	bl	8000d14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a4e:	f005 f917 	bl	8005c80 <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 f95c 	bl	8000d14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a60:	f005 f959 	bl	8005d16 <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f953 	bl	8000d14 <Error_Handler>
  }

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2400a0f4 	.word	0x2400a0f4
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	009034b6 	.word	0x009034b6

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12e      	bne.n	8000b00 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ac0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <HAL_I2C_MspInit+0x90>)
 8000ade:	f004 fa9f 	bl	8005020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020400 	.word	0x58020400

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b18:	f000 fa84 	bl	8001024 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1c:	f000 f83a 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f7ff fec4 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000b24:	f7ff fea2 	bl	800086c <MX_DMA_Init>
  MX_DCMI_Init();
 8000b28:	f7ff fd56 	bl	80005d8 <MX_DCMI_Init>
  MX_UART4_Init();
 8000b2c:	f000 f9b8 	bl	8000ea0 <MX_UART4_Init>
  MX_I2C1_Init();
 8000b30:	f7ff ff66 	bl	8000a00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <main+0x6c>)
 8000b3a:	f004 fc21 	bl	8005380 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b3e:	2064      	movs	r0, #100	; 0x64
 8000b40:	f000 fb02 	bl	8001148 <HAL_Delay>
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <main+0x6c>)
 8000b4a:	f004 fc19 	bl	8005380 <HAL_GPIO_WritePin>
  HAL_Delay(400);
 8000b4e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b52:	f000 faf9 	bl	8001148 <HAL_Delay>
  if(OV2640_Init(&hi2c1, &hdcmi, &huart4) == 0)
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <main+0x70>)
 8000b58:	490b      	ldr	r1, [pc, #44]	; (8000b88 <main+0x74>)
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <main+0x78>)
 8000b5c:	f008 fd7e 	bl	800965c <OV2640_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d105      	bne.n	8000b72 <main+0x5e>
  {
	  HAL_GPIO_WritePin(LED_DCMI_GPIO_Port, LED_DCMI_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <main+0x7c>)
 8000b6e:	f004 fc07 	bl	8005380 <HAL_GPIO_WritePin>
  }
  HAL_Delay(2000);
 8000b72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b76:	f000 fae7 	bl	8001148 <HAL_Delay>
  StartOV2640();
 8000b7a:	f008 ff97 	bl	8009aac <StartOV2640>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <main+0x6a>
 8000b80:	58020c00 	.word	0x58020c00
 8000b84:	2400a140 	.word	0x2400a140
 8000b88:	2400a0a4 	.word	0x2400a0a4
 8000b8c:	2400a0f4 	.word	0x2400a0f4
 8000b90:	58020400 	.word	0x58020400

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0cc      	sub	sp, #304	; 0x130
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b9e:	224c      	movs	r2, #76	; 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 f804 	bl	8009bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f008 fffd 	bl	8009bb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	23bc      	movs	r3, #188	; 0xbc
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f008 fff5 	bl	8009bb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f005 f8f2 	bl	8005db0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <SystemClock_Config+0x178>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	4a4d      	ldr	r2, [pc, #308]	; (8000d0c <SystemClock_Config+0x178>)
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bde:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <SystemClock_Config+0x178>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	f003 0201 	and.w	r2, r3, #1
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <SystemClock_Config+0x17c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <SystemClock_Config+0x17c>)
 8000bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <SystemClock_Config+0x17c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c06:	bf00      	nop
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <SystemClock_Config+0x17c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c14:	d1f8      	bne.n	8000c08 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c16:	2303      	movs	r3, #3
 8000c18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2340      	movs	r3, #64	; 0x40
 8000c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c42:	23c8      	movs	r3, #200	; 0xc8
 8000c44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 f8d7 	bl	8005e24 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000c7c:	f000 f84a 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	233f      	movs	r3, #63	; 0x3f
 8000c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2303      	movs	r3, #3
 8000c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c92:	2308      	movs	r3, #8
 8000c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c98:	2340      	movs	r3, #64	; 0x40
 8000c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 fcc3 	bl	8006644 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000cc4:	f000 f826 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	220a      	movs	r2, #10
 8000cce:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 f89a 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000cf2:	f000 f80f 	bl	8000d14 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f005 fe57 	bl	80069b0 <HAL_RCC_MCOConfig>
}
 8000d02:	bf00      	nop
 8000d04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58000400 	.word	0x58000400
 8000d10:	58024800 	.word	0x58024800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_MspInit+0x30>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x30>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x30>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58024400 	.word	0x58024400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f9ac 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA1_Stream0_IRQHandler+0x10>)
 8000dba:	f002 f96f 	bl	800309c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2400a02c 	.word	0x2400a02c

08000dc8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <DCMI_IRQHandler+0x10>)
 8000dce:	f000 fced 	bl	80017ac <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2400a0a4 	.word	0x2400a0a4

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <SystemInit+0xac>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <SystemInit+0xac>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <SystemInit+0xb0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <SystemInit+0xb0>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <SystemInit+0xb0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <SystemInit+0xb0>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4921      	ldr	r1, [pc, #132]	; (8000e8c <SystemInit+0xb0>)
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <SystemInit+0xb4>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <SystemInit+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <SystemInit+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <SystemInit+0xb0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <SystemInit+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <SystemInit+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SystemInit+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <SystemInit+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <SystemInit+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SystemInit+0xb0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <SystemInit+0xb0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SystemInit+0xb0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <SystemInit+0xb0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <SystemInit+0xb0>)
 8000e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SystemInit+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <SystemInit+0xb8>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <SystemInit+0xbc>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e6e:	d202      	bcs.n	8000e76 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <SystemInit+0xc0>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SystemInit+0xac>)
 8000e78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e94:	5c001000 	.word	0x5c001000
 8000e98:	ffff0000 	.word	0xffff0000
 8000e9c:	51008108 	.word	0x51008108

08000ea0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <MX_UART4_Init+0x94>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1500000;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_UART4_Init+0x90>)
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <MX_UART4_Init+0x98>)
 8000eae:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_UART4_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_UART4_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_UART4_Init+0x90>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_UART4_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <MX_UART4_Init+0x90>)
 8000ee8:	f007 fa9a 	bl	8008420 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8000ef2:	f7ff ff0f 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_UART4_Init+0x90>)
 8000efa:	f008 faca 	bl	8009492 <HAL_UARTEx_SetTxFifoThreshold>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8000f04:	f7ff ff06 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_UART4_Init+0x90>)
 8000f0c:	f008 faff 	bl	800950e <HAL_UARTEx_SetRxFifoThreshold>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8000f16:	f7ff fefd 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_UART4_Init+0x90>)
 8000f1c:	f008 fa80 	bl	8009420 <HAL_UARTEx_DisableFifoMode>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8000f26:	f7ff fef5 	bl	8000d14 <Error_Handler>
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2400a140 	.word	0x2400a140
 8000f34:	40004c00 	.word	0x40004c00
 8000f38:	0016e360 	.word	0x0016e360

08000f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12d      	bne.n	8000fba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000faa:	2308      	movs	r3, #8
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000fb6:	f004 f833 	bl	8005020 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004c00 	.word	0x40004c00
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020000 	.word	0x58020000

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff feef 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f008 fdb3 	bl	8009b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fd87 	bl	8000b14 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800100c:	08009fa8 	.word	0x08009fa8
  ldr  r0, =_sdata
 8001010:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001014:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001018:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 800101c:	2400a1e0 	.word	0x2400a1e0

08001020 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC3_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f98a 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001030:	f005 fd28 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8001034:	4601      	mov	r1, r0
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_Init+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_Init+0x6c>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa21 f303 	lsr.w	r3, r1, r3
 800104c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_Init+0x6c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_Init+0x70>)
 8001066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_Init+0x74>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f814 	bl	800109c <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800107e:	f7ff fe51 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	08009be8 	.word	0x08009be8
 8001094:	24000004 	.word	0x24000004
 8001098:	24000000 	.word	0x24000000

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_InitTick+0x60>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e021      	b.n	80010f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_InitTick+0x64>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f96f 	bl	80013aa <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f939 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x68>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	24000000 	.word	0x24000000
 8001104:	24000008 	.word	0x24000008

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2400000c 	.word	0x2400000c
 800112c:	2400a1cc 	.word	0x2400a1cc

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2400a1cc 	.word	0x2400a1cc

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_Delay+0x40>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2400000c 	.word	0x2400000c

0800118c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetREVID+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0c1b      	lsrs	r3, r3, #16
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	5c001000 	.word	0x5c001000

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0000 	.word	0x05fa0000

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff40 	bl	80011ec <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff33 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa4 	bl	8001300 <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e069      	b.n	80014aa <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f92c 	bl	8000640 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_DCMI_Init+0xf0>)
 800140a:	400b      	ands	r3, r1
 800140c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001422:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800142e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800143a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001446:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001452:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b10      	cmp	r3, #16
 8001462:	d112      	bne.n	800148a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7f1b      	ldrb	r3, [r3, #28]
 8001468:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f5b      	ldrb	r3, [r3, #29]
 800146e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001470:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7f9b      	ldrb	r3, [r3, #30]
 8001476:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001478:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7fdb      	ldrb	r3, [r3, #31]
 8001480:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001486:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001488:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 021e 	orr.w	r2, r2, #30
 8001498:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	ffe0f007 	.word	0xffe0f007

080014b8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_DCMI_Start_DMA+0x1c>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e0ab      	b.n	800162c <HAL_DCMI_Start_DMA+0x174>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0202 	bic.w	r2, r2, #2
 8001502:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001518:	4a46      	ldr	r2, [pc, #280]	; (8001634 <HAL_DCMI_Start_DMA+0x17c>)
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	4a45      	ldr	r2, [pc, #276]	; (8001638 <HAL_DCMI_Start_DMA+0x180>)
 8001522:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154a:	d219      	bcs.n	8001580 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3328      	adds	r3, #40	; 0x28
 8001556:	4619      	mov	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	f000 fdd2 	bl	8002104 <HAL_DMA_Start_IT>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d055      	beq.n	8001612 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2240      	movs	r2, #64	; 0x40
 800156a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e055      	b.n	800162c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DCMI_Start_DMA+0x17c>)
 8001586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800159a:	e009      	b.n	80015b0 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a0:	085a      	lsrs	r2, r3, #1
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	005a      	lsls	r2, r3, #1
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d2f0      	bcs.n	800159c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	1e9a      	subs	r2, r3, #2
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3328      	adds	r3, #40	; 0x28
 80015e2:	4619      	mov	r1, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	f003 f867 	bl	80046c0 <HAL_DMAEx_MultiBufferStart_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00c      	b.n	800162c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	080018ed 	.word	0x080018ed
 8001638:	08001a13 	.word	0x08001a13

0800163c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_DCMI_Stop+0xb8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <HAL_DCMI_Stop+0xbc>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a5b      	lsrs	r3, r3, #9
 8001650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_DCMI_Stop+0x30>
 8001668:	2302      	movs	r3, #2
 800166a:	e03f      	b.n	80016ec <HAL_DCMI_Stop+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3b01      	subs	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d108      	bne.n	80016aa <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	72fb      	strb	r3, [r7, #11]
      break;
 80016a8:	e006      	b.n	80016b8 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 ff83 	bl	80025d8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80016ea:	7afb      	ldrb	r3, [r7, #11]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	24000000 	.word	0x24000000
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_DCMI_Suspend+0xa8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_DCMI_Suspend+0xac>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0a5b      	lsrs	r3, r3, #9
 8001710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_DCMI_Suspend+0x30>
 8001728:	2302      	movs	r3, #2
 800172a:	e034      	b.n	8001796 <HAL_DCMI_Suspend+0x9a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d125      	bne.n	800178c <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2205      	movs	r2, #5
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3b01      	subs	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10c      	bne.n	800177e <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	f043 0220 	orr.w	r2, r3, #32
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	72fb      	strb	r3, [r7, #11]
        break;
 800177c:	e006      	b.n	800178c <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e5      	bne.n	8001758 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001794:	7afb      	ldrb	r3, [r7, #11]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	24000000 	.word	0x24000000
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2204      	movs	r2, #4
 80017cc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f043 0202 	orr.w	r2, r3, #2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_DCMI_IRQHandler+0x100>)
 80017e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fa10 	bl	8002c14 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2202      	movs	r2, #2
 8001804:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <HAL_DCMI_IRQHandler+0x100>)
 8001820:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f9f4 	bl	8002c14 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2210      	movs	r2, #16
 800183c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f840 	bl	80018c4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2208      	movs	r2, #8
 8001854:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f83e 	bl	80018d8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01d      	beq.n	80018a2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b02      	cmp	r3, #2
 8001872:	d107      	bne.n	8001884 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 021e 	bic.w	r2, r2, #30
 8001882:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f008 f925 	bl	8009aec <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	08001a13 	.word	0x08001a13

080018b0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d043      	beq.n	800198a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190e:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d118      	bne.n	800194e <DCMI_DMAXferCplt+0x62>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d015      	beq.n	800194e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001934:	00da      	lsls	r2, r3, #3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	f003 fa1d 	bl	8004d7c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
 800194c:	e044      	b.n	80019d8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d13c      	bne.n	80019d8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	00da      	lsls	r2, r3, #3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	2201      	movs	r2, #1
 8001978:	4619      	mov	r1, r3
 800197a:	f003 f9ff 	bl	8004d7c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
 8001988:	e026      	b.n	80019d8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e017      	b.n	80019d8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	440a      	add	r2, r1
 80019ce:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d112      	bne.n	8001a0a <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d103      	bne.n	8001a0a <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d009      	beq.n	8001a3e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff36 	bl	80018b0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fb6c 	bl	8001130 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e316      	b.n	8002092 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_DMA_Init+0x1b8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d04a      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_DMA_Init+0x1bc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d045      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_DMA_Init+0x1c0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d040      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <HAL_DMA_Init+0x1c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d03b      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_DMA_Init+0x1c8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d036      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <HAL_DMA_Init+0x1cc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d031      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_Init+0x1d0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d02c      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_DMA_Init+0x1d4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d027      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_Init+0x1d8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d022      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_DMA_Init+0x1dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d01d      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_Init+0x1e0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d018      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_Init+0x1e4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_DMA_Init+0x1e8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00e      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_DMA_Init+0x1ec>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_DMA_Init+0x1f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_DMA_Init+0xb8>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_DMA_Init+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_DMA_Init+0xbc>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_DMA_Init+0xbe>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 813b 	beq.w	8001d86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <HAL_DMA_Init+0x1b8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d04a      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_DMA_Init+0x1bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d045      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <HAL_DMA_Init+0x1c0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d040      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a33      	ldr	r2, [pc, #204]	; (8001c10 <HAL_DMA_Init+0x1c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d03b      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <HAL_DMA_Init+0x1c8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d036      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a30      	ldr	r2, [pc, #192]	; (8001c18 <HAL_DMA_Init+0x1cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d031      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <HAL_DMA_Init+0x1d0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02c      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_DMA_Init+0x1d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d027      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <HAL_DMA_Init+0x1d8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <HAL_DMA_Init+0x1dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01d      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <HAL_DMA_Init+0x1e0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <HAL_DMA_Init+0x1e4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_DMA_Init+0x1e8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_DMA_Init+0x1ec>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_DMA_Init+0x1f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_DMA_Init+0x174>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_DMA_Init+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <HAL_DMA_Init+0x186>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_DMA_Init+0x196>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001be2:	e02f      	b.n	8001c44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be4:	f7ff faa4 	bl	8001130 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d928      	bls.n	8001c44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e246      	b.n	8002092 <HAL_DMA_Init+0x646>
 8001c04:	40020010 	.word	0x40020010
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40020040 	.word	0x40020040
 8001c10:	40020058 	.word	0x40020058
 8001c14:	40020070 	.word	0x40020070
 8001c18:	40020088 	.word	0x40020088
 8001c1c:	400200a0 	.word	0x400200a0
 8001c20:	400200b8 	.word	0x400200b8
 8001c24:	40020410 	.word	0x40020410
 8001c28:	40020428 	.word	0x40020428
 8001c2c:	40020440 	.word	0x40020440
 8001c30:	40020458 	.word	0x40020458
 8001c34:	40020470 	.word	0x40020470
 8001c38:	40020488 	.word	0x40020488
 8001c3c:	400204a0 	.word	0x400204a0
 8001c40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1c8      	bne.n	8001be4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_DMA_Init+0x420>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_DMA_Init+0x424>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b71      	ldr	r3, [pc, #452]	; (8001e74 <HAL_DMA_Init+0x428>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb4:	d328      	bcc.n	8001d08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b28      	cmp	r3, #40	; 0x28
 8001cbc:	d903      	bls.n	8001cc6 <HAL_DMA_Init+0x27a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc4:	d917      	bls.n	8001cf6 <HAL_DMA_Init+0x2aa>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b3e      	cmp	r3, #62	; 0x3e
 8001ccc:	d903      	bls.n	8001cd6 <HAL_DMA_Init+0x28a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b42      	cmp	r3, #66	; 0x42
 8001cd4:	d90f      	bls.n	8001cf6 <HAL_DMA_Init+0x2aa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b46      	cmp	r3, #70	; 0x46
 8001cdc:	d903      	bls.n	8001ce6 <HAL_DMA_Init+0x29a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b48      	cmp	r3, #72	; 0x48
 8001ce4:	d907      	bls.n	8001cf6 <HAL_DMA_Init+0x2aa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b4e      	cmp	r3, #78	; 0x4e
 8001cec:	d905      	bls.n	8001cfa <HAL_DMA_Init+0x2ae>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b52      	cmp	r3, #82	; 0x52
 8001cf4:	d801      	bhi.n	8001cfa <HAL_DMA_Init+0x2ae>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_DMA_Init+0x2b0>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f023 0307 	bic.w	r3, r3, #7
 8001d1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d117      	bne.n	8001d62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f002 fb31 	bl	80043ac <DMA_CheckFifoParam>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e197      	b.n	8002092 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f002 fa6c 	bl	8004248 <DMA_CalcBaseAndBitshift>
 8001d70:	4603      	mov	r3, r0
 8001d72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e0cd      	b.n	8001f22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <HAL_DMA_Init+0x42c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d022      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <HAL_DMA_Init+0x430>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01d      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_DMA_Init+0x434>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d018      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <HAL_DMA_Init+0x438>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_DMA_Init+0x43c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_DMA_Init+0x440>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <HAL_DMA_Init+0x444>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Init+0x38a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_DMA_Init+0x448>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Init+0x38e>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_Init+0x390>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8097 	beq.w	8001f10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_DMA_Init+0x42c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d021      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_DMA_Init+0x430>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01c      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_DMA_Init+0x434>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d017      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_DMA_Init+0x438>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_DMA_Init+0x43c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_DMA_Init+0x440>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d008      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_DMA_Init+0x444>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA_Init+0x3e4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_DMA_Init+0x448>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_DMA_Init+0x44c>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d020      	beq.n	8001e9c <HAL_DMA_Init+0x450>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b80      	cmp	r3, #128	; 0x80
 8001e60:	d102      	bne.n	8001e68 <HAL_DMA_Init+0x41c>
 8001e62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e66:	e01a      	b.n	8001e9e <HAL_DMA_Init+0x452>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e018      	b.n	8001e9e <HAL_DMA_Init+0x452>
 8001e6c:	fe10803f 	.word	0xfe10803f
 8001e70:	5c001000 	.word	0x5c001000
 8001e74:	ffff0000 	.word	0xffff0000
 8001e78:	58025408 	.word	0x58025408
 8001e7c:	5802541c 	.word	0x5802541c
 8001e80:	58025430 	.word	0x58025430
 8001e84:	58025444 	.word	0x58025444
 8001e88:	58025458 	.word	0x58025458
 8001e8c:	5802546c 	.word	0x5802546c
 8001e90:	58025480 	.word	0x58025480
 8001e94:	58025494 	.word	0x58025494
 8001e98:	fffe000f 	.word	0xfffe000f
 8001e9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68d2      	ldr	r2, [r2, #12]
 8001ea2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ecc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b6e      	ldr	r3, [pc, #440]	; (800209c <HAL_DMA_Init+0x650>)
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_DMA_Init+0x654>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	009a      	lsls	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f002 f9a7 	bl	8004248 <DMA_CalcBaseAndBitshift>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2201      	movs	r2, #1
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e008      	b.n	8001f22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0b7      	b.n	8002092 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_DMA_Init+0x658>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d072      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_DMA_Init+0x65c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d06d      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5c      	ldr	r2, [pc, #368]	; (80020ac <HAL_DMA_Init+0x660>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d068      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_DMA_Init+0x664>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d063      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a59      	ldr	r2, [pc, #356]	; (80020b4 <HAL_DMA_Init+0x668>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d05e      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_DMA_Init+0x66c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d059      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_DMA_Init+0x670>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d054      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <HAL_DMA_Init+0x674>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04f      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_DMA_Init+0x678>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <HAL_DMA_Init+0x67c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a50      	ldr	r2, [pc, #320]	; (80020cc <HAL_DMA_Init+0x680>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_DMA_Init+0x684>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_DMA_Init+0x688>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_DMA_Init+0x68c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_DMA_Init+0x690>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_DMA_Init+0x694>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <HAL_DMA_Init+0x698>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_DMA_Init+0x69c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a44      	ldr	r2, [pc, #272]	; (80020ec <HAL_DMA_Init+0x6a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <HAL_DMA_Init+0x6a4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <HAL_DMA_Init+0x6a8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_DMA_Init+0x6ac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3e      	ldr	r2, [pc, #248]	; (80020fc <HAL_DMA_Init+0x6b0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_Init+0x5c6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <HAL_DMA_Init+0x6b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Init+0x5ca>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_DMA_Init+0x5cc>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d032      	beq.n	8002082 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f002 fa41 	bl	80044a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b80      	cmp	r3, #128	; 0x80
 8002028:	d102      	bne.n	8002030 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002044:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_DMA_Init+0x624>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d80c      	bhi.n	8002070 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f002 fabe 	bl	80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e008      	b.n	8002082 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	a7fdabf8 	.word	0xa7fdabf8
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
 80020e4:	58025408 	.word	0x58025408
 80020e8:	5802541c 	.word	0x5802541c
 80020ec:	58025430 	.word	0x58025430
 80020f0:	58025444 	.word	0x58025444
 80020f4:	58025458 	.word	0x58025458
 80020f8:	5802546c 	.word	0x5802546c
 80020fc:	58025480 	.word	0x58025480
 8002100:	58025494 	.word	0x58025494

08002104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e226      	b.n	800256e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_DMA_Start_IT+0x2a>
 800212a:	2302      	movs	r3, #2
 800212c:	e21f      	b.n	800256e <HAL_DMA_Start_IT+0x46a>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 820a 	bne.w	8002558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_DMA_Start_IT+0x1f4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d04a      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_DMA_Start_IT+0x1f8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d045      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_DMA_Start_IT+0x1fc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d040      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_DMA_Start_IT+0x200>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d03b      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_DMA_Start_IT+0x204>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d036      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_DMA_Start_IT+0x208>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_DMA_Start_IT+0x20c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d02c      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_DMA_Start_IT+0x210>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d027      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_DMA_Start_IT+0x214>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_DMA_Start_IT+0x218>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01d      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_DMA_Start_IT+0x21c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d018      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_DMA_Start_IT+0x220>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_DMA_Start_IT+0x224>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <HAL_DMA_Start_IT+0x228>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a53      	ldr	r2, [pc, #332]	; (8002330 <HAL_DMA_Start_IT+0x22c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_DMA_Start_IT+0xee>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_DMA_Start_IT+0x230>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d108      	bne.n	8002204 <HAL_DMA_Start_IT+0x100>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e007      	b.n	8002214 <HAL_DMA_Start_IT+0x110>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f001 fe68 	bl	8003ef0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_DMA_Start_IT+0x1f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d04a      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_DMA_Start_IT+0x1f8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d045      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_DMA_Start_IT+0x1fc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d040      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_DMA_Start_IT+0x200>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d03b      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <HAL_DMA_Start_IT+0x204>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d036      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <HAL_DMA_Start_IT+0x208>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DMA_Start_IT+0x20c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02c      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_DMA_Start_IT+0x210>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d027      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_DMA_Start_IT+0x214>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d022      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_DMA_Start_IT+0x218>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01d      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_DMA_Start_IT+0x21c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d018      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_DMA_Start_IT+0x220>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_DMA_Start_IT+0x224>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_DMA_Start_IT+0x228>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_DMA_Start_IT+0x22c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Start_IT+0x1bc>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_DMA_Start_IT+0x230>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Start_IT+0x1c0>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_DMA_Start_IT+0x1c2>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d036      	beq.n	8002338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 021e 	bic.w	r2, r3, #30
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0216 	orr.w	r2, r2, #22
 80022dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d03e      	beq.n	8002364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0208 	orr.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e035      	b.n	8002364 <HAL_DMA_Start_IT+0x260>
 80022f8:	40020010 	.word	0x40020010
 80022fc:	40020028 	.word	0x40020028
 8002300:	40020040 	.word	0x40020040
 8002304:	40020058 	.word	0x40020058
 8002308:	40020070 	.word	0x40020070
 800230c:	40020088 	.word	0x40020088
 8002310:	400200a0 	.word	0x400200a0
 8002314:	400200b8 	.word	0x400200b8
 8002318:	40020410 	.word	0x40020410
 800231c:	40020428 	.word	0x40020428
 8002320:	40020440 	.word	0x40020440
 8002324:	40020458 	.word	0x40020458
 8002328:	40020470 	.word	0x40020470
 800232c:	40020488 	.word	0x40020488
 8002330:	400204a0 	.word	0x400204a0
 8002334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 020e 	bic.w	r2, r3, #14
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 020a 	orr.w	r2, r2, #10
 800234a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0204 	orr.w	r2, r2, #4
 8002362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a83      	ldr	r2, [pc, #524]	; (8002578 <HAL_DMA_Start_IT+0x474>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d072      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <HAL_DMA_Start_IT+0x478>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d06d      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_DMA_Start_IT+0x47c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d068      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7f      	ldr	r2, [pc, #508]	; (8002584 <HAL_DMA_Start_IT+0x480>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d063      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_DMA_Start_IT+0x484>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d05e      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_DMA_Start_IT+0x488>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d059      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <HAL_DMA_Start_IT+0x48c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d054      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_DMA_Start_IT+0x490>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04f      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_DMA_Start_IT+0x494>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d04a      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a76      	ldr	r2, [pc, #472]	; (800259c <HAL_DMA_Start_IT+0x498>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d045      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_DMA_Start_IT+0x49c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d040      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a73      	ldr	r2, [pc, #460]	; (80025a4 <HAL_DMA_Start_IT+0x4a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d03b      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a71      	ldr	r2, [pc, #452]	; (80025a8 <HAL_DMA_Start_IT+0x4a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d036      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a70      	ldr	r2, [pc, #448]	; (80025ac <HAL_DMA_Start_IT+0x4a8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d031      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_DMA_Start_IT+0x4ac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02c      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6d      	ldr	r2, [pc, #436]	; (80025b4 <HAL_DMA_Start_IT+0x4b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d027      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6b      	ldr	r2, [pc, #428]	; (80025b8 <HAL_DMA_Start_IT+0x4b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d022      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_DMA_Start_IT+0x4b8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d01d      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a68      	ldr	r2, [pc, #416]	; (80025c0 <HAL_DMA_Start_IT+0x4bc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d018      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a67      	ldr	r2, [pc, #412]	; (80025c4 <HAL_DMA_Start_IT+0x4c0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d013      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	; (80025c8 <HAL_DMA_Start_IT+0x4c4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00e      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a64      	ldr	r2, [pc, #400]	; (80025cc <HAL_DMA_Start_IT+0x4c8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d009      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a62      	ldr	r2, [pc, #392]	; (80025d0 <HAL_DMA_Start_IT+0x4cc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_DMA_Start_IT+0x350>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a61      	ldr	r2, [pc, #388]	; (80025d4 <HAL_DMA_Start_IT+0x4d0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_DMA_Start_IT+0x354>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_DMA_Start_IT+0x356>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a37      	ldr	r2, [pc, #220]	; (8002578 <HAL_DMA_Start_IT+0x474>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a36      	ldr	r2, [pc, #216]	; (800257c <HAL_DMA_Start_IT+0x478>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_DMA_Start_IT+0x47c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_DMA_Start_IT+0x480>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_DMA_Start_IT+0x484>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_DMA_Start_IT+0x488>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_DMA_Start_IT+0x48c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_DMA_Start_IT+0x490>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_DMA_Start_IT+0x494>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_DMA_Start_IT+0x498>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_DMA_Start_IT+0x49c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_DMA_Start_IT+0x4a0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_DMA_Start_IT+0x4a4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_DMA_Start_IT+0x4a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Start_IT+0x4ac>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Start_IT+0x430>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_DMA_Start_IT+0x4b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <HAL_DMA_Start_IT+0x442>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e012      	b.n	800256c <HAL_DMA_Start_IT+0x468>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e009      	b.n	800256c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
 80025b8:	58025408 	.word	0x58025408
 80025bc:	5802541c 	.word	0x5802541c
 80025c0:	58025430 	.word	0x58025430
 80025c4:	58025444 	.word	0x58025444
 80025c8:	58025458 	.word	0x58025458
 80025cc:	5802546c 	.word	0x5802546c
 80025d0:	58025480 	.word	0x58025480
 80025d4:	58025494 	.word	0x58025494

080025d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7fe fda6 	bl	8001130 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e2dc      	b.n	8002baa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d008      	beq.n	800260e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e2cd      	b.n	8002baa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a76      	ldr	r2, [pc, #472]	; (80027ec <HAL_DMA_Abort+0x214>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d04a      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a74      	ldr	r2, [pc, #464]	; (80027f0 <HAL_DMA_Abort+0x218>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d045      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a73      	ldr	r2, [pc, #460]	; (80027f4 <HAL_DMA_Abort+0x21c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d040      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_DMA_Abort+0x220>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d03b      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a70      	ldr	r2, [pc, #448]	; (80027fc <HAL_DMA_Abort+0x224>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d036      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_DMA_Abort+0x228>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d031      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6d      	ldr	r2, [pc, #436]	; (8002804 <HAL_DMA_Abort+0x22c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d02c      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6b      	ldr	r2, [pc, #428]	; (8002808 <HAL_DMA_Abort+0x230>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d027      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_DMA_Abort+0x234>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_DMA_Abort+0x238>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01d      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_DMA_Abort+0x23c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d018      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_DMA_Abort+0x240>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a64      	ldr	r2, [pc, #400]	; (800281c <HAL_DMA_Abort+0x244>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00e      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a62      	ldr	r2, [pc, #392]	; (8002820 <HAL_DMA_Abort+0x248>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d009      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a61      	ldr	r2, [pc, #388]	; (8002824 <HAL_DMA_Abort+0x24c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_Abort+0xd6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5f      	ldr	r2, [pc, #380]	; (8002828 <HAL_DMA_Abort+0x250>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_Abort+0xda>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_DMA_Abort+0xdc>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 021e 	bic.w	r2, r2, #30
 80026c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e00a      	b.n	80026f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020e 	bic.w	r2, r2, #14
 80026ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3c      	ldr	r2, [pc, #240]	; (80027ec <HAL_DMA_Abort+0x214>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d072      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3a      	ldr	r2, [pc, #232]	; (80027f0 <HAL_DMA_Abort+0x218>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d06d      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a39      	ldr	r2, [pc, #228]	; (80027f4 <HAL_DMA_Abort+0x21c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d068      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a37      	ldr	r2, [pc, #220]	; (80027f8 <HAL_DMA_Abort+0x220>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d063      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a36      	ldr	r2, [pc, #216]	; (80027fc <HAL_DMA_Abort+0x224>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d05e      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a34      	ldr	r2, [pc, #208]	; (8002800 <HAL_DMA_Abort+0x228>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d059      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a33      	ldr	r2, [pc, #204]	; (8002804 <HAL_DMA_Abort+0x22c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d054      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_DMA_Abort+0x230>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04f      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_DMA_Abort+0x234>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <HAL_DMA_Abort+0x238>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_DMA_Abort+0x23c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_DMA_Abort+0x240>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2a      	ldr	r2, [pc, #168]	; (800281c <HAL_DMA_Abort+0x244>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a28      	ldr	r2, [pc, #160]	; (8002820 <HAL_DMA_Abort+0x248>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a27      	ldr	r2, [pc, #156]	; (8002824 <HAL_DMA_Abort+0x24c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_DMA_Abort+0x250>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_DMA_Abort+0x254>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_DMA_Abort+0x258>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_DMA_Abort+0x25c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_DMA_Abort+0x260>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_DMA_Abort+0x264>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_DMA_Abort+0x268>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_DMA_Abort+0x26c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Abort+0x20e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_DMA_Abort+0x270>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d132      	bne.n	800284c <HAL_DMA_Abort+0x274>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e031      	b.n	800284e <HAL_DMA_Abort+0x276>
 80027ea:	bf00      	nop
 80027ec:	40020010 	.word	0x40020010
 80027f0:	40020028 	.word	0x40020028
 80027f4:	40020040 	.word	0x40020040
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020070 	.word	0x40020070
 8002800:	40020088 	.word	0x40020088
 8002804:	400200a0 	.word	0x400200a0
 8002808:	400200b8 	.word	0x400200b8
 800280c:	40020410 	.word	0x40020410
 8002810:	40020428 	.word	0x40020428
 8002814:	40020440 	.word	0x40020440
 8002818:	40020458 	.word	0x40020458
 800281c:	40020470 	.word	0x40020470
 8002820:	40020488 	.word	0x40020488
 8002824:	400204a0 	.word	0x400204a0
 8002828:	400204b8 	.word	0x400204b8
 800282c:	58025408 	.word	0x58025408
 8002830:	5802541c 	.word	0x5802541c
 8002834:	58025430 	.word	0x58025430
 8002838:	58025444 	.word	0x58025444
 800283c:	58025458 	.word	0x58025458
 8002840:	5802546c 	.word	0x5802546c
 8002844:	58025480 	.word	0x58025480
 8002848:	58025494 	.word	0x58025494
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6d      	ldr	r2, [pc, #436]	; (8002a1c <HAL_DMA_Abort+0x444>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04a      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6b      	ldr	r2, [pc, #428]	; (8002a20 <HAL_DMA_Abort+0x448>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d045      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6a      	ldr	r2, [pc, #424]	; (8002a24 <HAL_DMA_Abort+0x44c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d040      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a68      	ldr	r2, [pc, #416]	; (8002a28 <HAL_DMA_Abort+0x450>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d03b      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <HAL_DMA_Abort+0x454>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d036      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_DMA_Abort+0x458>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a64      	ldr	r2, [pc, #400]	; (8002a34 <HAL_DMA_Abort+0x45c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d02c      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a62      	ldr	r2, [pc, #392]	; (8002a38 <HAL_DMA_Abort+0x460>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d027      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_DMA_Abort+0x464>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a5f      	ldr	r2, [pc, #380]	; (8002a40 <HAL_DMA_Abort+0x468>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5e      	ldr	r2, [pc, #376]	; (8002a44 <HAL_DMA_Abort+0x46c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a5c      	ldr	r2, [pc, #368]	; (8002a48 <HAL_DMA_Abort+0x470>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_DMA_Abort+0x474>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a59      	ldr	r2, [pc, #356]	; (8002a50 <HAL_DMA_Abort+0x478>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_DMA_Abort+0x47c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_DMA_Abort+0x32a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_DMA_Abort+0x480>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <HAL_DMA_Abort+0x33c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e007      	b.n	8002924 <HAL_DMA_Abort+0x34c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002924:	e013      	b.n	800294e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002926:	f7fe fc03 	bl	8001130 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b05      	cmp	r3, #5
 8002932:	d90c      	bls.n	800294e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12d      	b.n	8002baa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_DMA_Abort+0x444>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04a      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_DMA_Abort+0x448>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d045      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <HAL_DMA_Abort+0x44c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d040      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_DMA_Abort+0x450>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d03b      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_DMA_Abort+0x454>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d036      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_DMA_Abort+0x458>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <HAL_DMA_Abort+0x45c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d02c      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_DMA_Abort+0x460>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d027      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_DMA_Abort+0x464>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_DMA_Abort+0x468>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01d      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_DMA_Abort+0x46c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d018      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_DMA_Abort+0x470>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_DMA_Abort+0x474>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_DMA_Abort+0x478>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_DMA_Abort+0x47c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort+0x422>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_DMA_Abort+0x480>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Abort+0x426>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_DMA_Abort+0x428>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02b      	beq.n	8002a5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	223f      	movs	r2, #63	; 0x3f
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	e02a      	b.n	8002a72 <HAL_DMA_Abort+0x49a>
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4f      	ldr	r2, [pc, #316]	; (8002bb4 <HAL_DMA_Abort+0x5dc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d072      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4d      	ldr	r2, [pc, #308]	; (8002bb8 <HAL_DMA_Abort+0x5e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d06d      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4c      	ldr	r2, [pc, #304]	; (8002bbc <HAL_DMA_Abort+0x5e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d068      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_DMA_Abort+0x5e8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d063      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_DMA_Abort+0x5ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d05e      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_DMA_Abort+0x5f0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d059      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <HAL_DMA_Abort+0x5f4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d054      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a44      	ldr	r2, [pc, #272]	; (8002bd0 <HAL_DMA_Abort+0x5f8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04f      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <HAL_DMA_Abort+0x5fc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <HAL_DMA_Abort+0x600>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <HAL_DMA_Abort+0x604>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3e      	ldr	r2, [pc, #248]	; (8002be0 <HAL_DMA_Abort+0x608>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3d      	ldr	r2, [pc, #244]	; (8002be4 <HAL_DMA_Abort+0x60c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_DMA_Abort+0x610>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <HAL_DMA_Abort+0x614>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <HAL_DMA_Abort+0x618>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <HAL_DMA_Abort+0x61c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <HAL_DMA_Abort+0x620>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_DMA_Abort+0x624>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a32      	ldr	r2, [pc, #200]	; (8002c00 <HAL_DMA_Abort+0x628>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_DMA_Abort+0x62c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <HAL_DMA_Abort+0x630>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2e      	ldr	r2, [pc, #184]	; (8002c0c <HAL_DMA_Abort+0x634>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Abort+0x58a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <HAL_DMA_Abort+0x638>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Abort+0x58e>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_Abort+0x590>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8
 8002bf4:	58025408 	.word	0x58025408
 8002bf8:	5802541c 	.word	0x5802541c
 8002bfc:	58025430 	.word	0x58025430
 8002c00:	58025444 	.word	0x58025444
 8002c04:	58025458 	.word	0x58025458
 8002c08:	5802546c 	.word	0x5802546c
 8002c0c:	58025480 	.word	0x58025480
 8002c10:	58025494 	.word	0x58025494

08002c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e205      	b.n	8003032 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d004      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e1fa      	b.n	8003032 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a8c      	ldr	r2, [pc, #560]	; (8002e74 <HAL_DMA_Abort_IT+0x260>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04a      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a8b      	ldr	r2, [pc, #556]	; (8002e78 <HAL_DMA_Abort_IT+0x264>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d045      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a89      	ldr	r2, [pc, #548]	; (8002e7c <HAL_DMA_Abort_IT+0x268>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d040      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a88      	ldr	r2, [pc, #544]	; (8002e80 <HAL_DMA_Abort_IT+0x26c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d03b      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <HAL_DMA_Abort_IT+0x270>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a85      	ldr	r2, [pc, #532]	; (8002e88 <HAL_DMA_Abort_IT+0x274>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a83      	ldr	r2, [pc, #524]	; (8002e8c <HAL_DMA_Abort_IT+0x278>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02c      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a82      	ldr	r2, [pc, #520]	; (8002e90 <HAL_DMA_Abort_IT+0x27c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d027      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a80      	ldr	r2, [pc, #512]	; (8002e94 <HAL_DMA_Abort_IT+0x280>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d022      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <HAL_DMA_Abort_IT+0x284>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01d      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7d      	ldr	r2, [pc, #500]	; (8002e9c <HAL_DMA_Abort_IT+0x288>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7c      	ldr	r2, [pc, #496]	; (8002ea0 <HAL_DMA_Abort_IT+0x28c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <HAL_DMA_Abort_IT+0x290>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a79      	ldr	r2, [pc, #484]	; (8002ea8 <HAL_DMA_Abort_IT+0x294>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a77      	ldr	r2, [pc, #476]	; (8002eac <HAL_DMA_Abort_IT+0x298>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a76      	ldr	r2, [pc, #472]	; (8002eb0 <HAL_DMA_Abort_IT+0x29c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Abort_IT+0xcc>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_DMA_Abort_IT+0xce>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d065      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <HAL_DMA_Abort_IT+0x260>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d04a      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5e      	ldr	r2, [pc, #376]	; (8002e78 <HAL_DMA_Abort_IT+0x264>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d045      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_DMA_Abort_IT+0x268>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d040      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5b      	ldr	r2, [pc, #364]	; (8002e80 <HAL_DMA_Abort_IT+0x26c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d03b      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <HAL_DMA_Abort_IT+0x270>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d036      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_DMA_Abort_IT+0x274>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_DMA_Abort_IT+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d02c      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a55      	ldr	r2, [pc, #340]	; (8002e90 <HAL_DMA_Abort_IT+0x27c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d027      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <HAL_DMA_Abort_IT+0x280>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_DMA_Abort_IT+0x284>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01d      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a51      	ldr	r2, [pc, #324]	; (8002e9c <HAL_DMA_Abort_IT+0x288>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_DMA_Abort_IT+0x28c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_DMA_Abort_IT+0x290>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4c      	ldr	r2, [pc, #304]	; (8002ea8 <HAL_DMA_Abort_IT+0x294>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <HAL_DMA_Abort_IT+0x298>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x17a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <HAL_DMA_Abort_IT+0x29c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <HAL_DMA_Abort_IT+0x18c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e147      	b.n	8003030 <HAL_DMA_Abort_IT+0x41c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e13e      	b.n	8003030 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 020e 	bic.w	r2, r2, #14
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <HAL_DMA_Abort_IT+0x260>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04a      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <HAL_DMA_Abort_IT+0x264>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d045      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <HAL_DMA_Abort_IT+0x268>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d040      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_DMA_Abort_IT+0x26c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d03b      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <HAL_DMA_Abort_IT+0x270>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d036      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <HAL_DMA_Abort_IT+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d031      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_DMA_Abort_IT+0x278>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02c      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <HAL_DMA_Abort_IT+0x27c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d027      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_DMA_Abort_IT+0x280>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_DMA_Abort_IT+0x284>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_DMA_Abort_IT+0x288>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <HAL_DMA_Abort_IT+0x28c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_DMA_Abort_IT+0x290>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_DMA_Abort_IT+0x294>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_DMA_Abort_IT+0x298>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x24e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_DMA_Abort_IT+0x29c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d128      	bne.n	8002eb4 <HAL_DMA_Abort_IT+0x2a0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e027      	b.n	8002ec4 <HAL_DMA_Abort_IT+0x2b0>
 8002e74:	40020010 	.word	0x40020010
 8002e78:	40020028 	.word	0x40020028
 8002e7c:	40020040 	.word	0x40020040
 8002e80:	40020058 	.word	0x40020058
 8002e84:	40020070 	.word	0x40020070
 8002e88:	40020088 	.word	0x40020088
 8002e8c:	400200a0 	.word	0x400200a0
 8002e90:	400200b8 	.word	0x400200b8
 8002e94:	40020410 	.word	0x40020410
 8002e98:	40020428 	.word	0x40020428
 8002e9c:	40020440 	.word	0x40020440
 8002ea0:	40020458 	.word	0x40020458
 8002ea4:	40020470 	.word	0x40020470
 8002ea8:	40020488 	.word	0x40020488
 8002eac:	400204a0 	.word	0x400204a0
 8002eb0:	400204b8 	.word	0x400204b8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5c      	ldr	r2, [pc, #368]	; (800303c <HAL_DMA_Abort_IT+0x428>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d072      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <HAL_DMA_Abort_IT+0x42c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d06d      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_DMA_Abort_IT+0x430>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d068      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_DMA_Abort_IT+0x434>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d063      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_DMA_Abort_IT+0x438>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d05e      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_DMA_Abort_IT+0x43c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d059      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_DMA_Abort_IT+0x440>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d054      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_DMA_Abort_IT+0x444>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d04f      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_DMA_Abort_IT+0x448>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d04a      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_DMA_Abort_IT+0x44c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d045      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_DMA_Abort_IT+0x450>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d040      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_DMA_Abort_IT+0x454>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d03b      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_DMA_Abort_IT+0x458>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d036      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_DMA_Abort_IT+0x45c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d031      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_DMA_Abort_IT+0x460>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02c      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_DMA_Abort_IT+0x464>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d027      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a44      	ldr	r2, [pc, #272]	; (800307c <HAL_DMA_Abort_IT+0x468>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d022      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a43      	ldr	r2, [pc, #268]	; (8003080 <HAL_DMA_Abort_IT+0x46c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a41      	ldr	r2, [pc, #260]	; (8003084 <HAL_DMA_Abort_IT+0x470>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_DMA_Abort_IT+0x474>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_DMA_Abort_IT+0x478>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_DMA_Abort_IT+0x47c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_DMA_Abort_IT+0x480>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x3a0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_DMA_Abort_IT+0x484>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Abort_IT+0x3a4>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_Abort_IT+0x3a6>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d028      	beq.n	8003010 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2201      	movs	r2, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003004:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800300e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494

0800309c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a8:	4b67      	ldr	r3, [pc, #412]	; (8003248 <HAL_DMA_IRQHandler+0x1ac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_DMA_IRQHandler+0x1b0>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5f      	ldr	r2, [pc, #380]	; (8003250 <HAL_DMA_IRQHandler+0x1b4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04a      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <HAL_DMA_IRQHandler+0x1b8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d045      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_DMA_IRQHandler+0x1bc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d040      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5a      	ldr	r2, [pc, #360]	; (800325c <HAL_DMA_IRQHandler+0x1c0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d03b      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a59      	ldr	r2, [pc, #356]	; (8003260 <HAL_DMA_IRQHandler+0x1c4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d036      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_DMA_IRQHandler+0x1c8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a56      	ldr	r2, [pc, #344]	; (8003268 <HAL_DMA_IRQHandler+0x1cc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d02c      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a54      	ldr	r2, [pc, #336]	; (800326c <HAL_DMA_IRQHandler+0x1d0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d027      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a53      	ldr	r2, [pc, #332]	; (8003270 <HAL_DMA_IRQHandler+0x1d4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_DMA_IRQHandler+0x1d8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01d      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_DMA_IRQHandler+0x1dc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a4e      	ldr	r2, [pc, #312]	; (800327c <HAL_DMA_IRQHandler+0x1e0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_DMA_IRQHandler+0x1e4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <HAL_DMA_IRQHandler+0x1e8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <HAL_DMA_IRQHandler+0x1ec>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_DMA_IRQHandler+0xd2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a48      	ldr	r2, [pc, #288]	; (800328c <HAL_DMA_IRQHandler+0x1f0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_DMA_IRQHandler+0xd6>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_DMA_IRQHandler+0xd8>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 842b 	beq.w	80039d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2208      	movs	r2, #8
 8003184:	409a      	lsls	r2, r3
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a2 	beq.w	80032d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2e      	ldr	r2, [pc, #184]	; (8003250 <HAL_DMA_IRQHandler+0x1b4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d04a      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_DMA_IRQHandler+0x1b8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d045      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <HAL_DMA_IRQHandler+0x1bc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d040      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_DMA_IRQHandler+0x1c0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d03b      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <HAL_DMA_IRQHandler+0x1c4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d036      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_DMA_IRQHandler+0x1c8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d031      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_DMA_IRQHandler+0x1cc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d02c      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a24      	ldr	r2, [pc, #144]	; (800326c <HAL_DMA_IRQHandler+0x1d0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d027      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_DMA_IRQHandler+0x1d4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_DMA_IRQHandler+0x1d8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d01d      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_DMA_IRQHandler+0x1dc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_DMA_IRQHandler+0x1e0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_DMA_IRQHandler+0x1e4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_DMA_IRQHandler+0x1e8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_DMA_IRQHandler+0x1ec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_IRQHandler+0x194>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_DMA_IRQHandler+0x1f0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d12f      	bne.n	8003290 <HAL_DMA_IRQHandler+0x1f4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e02e      	b.n	80032a4 <HAL_DMA_IRQHandler+0x208>
 8003246:	bf00      	nop
 8003248:	24000000 	.word	0x24000000
 800324c:	1b4e81b5 	.word	0x1b4e81b5
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d015      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2208      	movs	r2, #8
 80032c2:	409a      	lsls	r2, r3
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d06e      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_DMA_IRQHandler+0x3f8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04a      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a67      	ldr	r2, [pc, #412]	; (8003498 <HAL_DMA_IRQHandler+0x3fc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d045      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_DMA_IRQHandler+0x400>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d040      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a64      	ldr	r2, [pc, #400]	; (80034a0 <HAL_DMA_IRQHandler+0x404>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03b      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a63      	ldr	r2, [pc, #396]	; (80034a4 <HAL_DMA_IRQHandler+0x408>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d036      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <HAL_DMA_IRQHandler+0x40c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_DMA_IRQHandler+0x410>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d02c      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_DMA_IRQHandler+0x414>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5d      	ldr	r2, [pc, #372]	; (80034b4 <HAL_DMA_IRQHandler+0x418>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_DMA_IRQHandler+0x41c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_DMA_IRQHandler+0x420>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d018      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_DMA_IRQHandler+0x424>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <HAL_DMA_IRQHandler+0x428>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_DMA_IRQHandler+0x42c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a54      	ldr	r2, [pc, #336]	; (80034cc <HAL_DMA_IRQHandler+0x430>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_DMA_IRQHandler+0x2ee>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_DMA_IRQHandler+0x434>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10a      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x304>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e003      	b.n	80033a8 <HAL_DMA_IRQHandler+0x30c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2201      	movs	r2, #1
 80033b6:	409a      	lsls	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0202 	orr.w	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2204      	movs	r2, #4
 80033d2:	409a      	lsls	r2, r3
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 808f 	beq.w	80034fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <HAL_DMA_IRQHandler+0x3f8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_DMA_IRQHandler+0x3fc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <HAL_DMA_IRQHandler+0x400>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <HAL_DMA_IRQHandler+0x404>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <HAL_DMA_IRQHandler+0x408>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <HAL_DMA_IRQHandler+0x40c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_DMA_IRQHandler+0x410>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <HAL_DMA_IRQHandler+0x414>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_DMA_IRQHandler+0x418>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_DMA_IRQHandler+0x41c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_DMA_IRQHandler+0x420>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_DMA_IRQHandler+0x424>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_DMA_IRQHandler+0x428>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_DMA_IRQHandler+0x42c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_DMA_IRQHandler+0x430>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_IRQHandler+0x3e2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <HAL_DMA_IRQHandler+0x434>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12a      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x438>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e023      	b.n	80034dc <HAL_DMA_IRQHandler+0x440>
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2204      	movs	r2, #4
 80034ea:	409a      	lsls	r2, r3
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2210      	movs	r2, #16
 8003506:	409a      	lsls	r2, r3
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a6 	beq.w	800365e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a85      	ldr	r2, [pc, #532]	; (800372c <HAL_DMA_IRQHandler+0x690>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d04a      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a83      	ldr	r2, [pc, #524]	; (8003730 <HAL_DMA_IRQHandler+0x694>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d045      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a82      	ldr	r2, [pc, #520]	; (8003734 <HAL_DMA_IRQHandler+0x698>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d040      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a80      	ldr	r2, [pc, #512]	; (8003738 <HAL_DMA_IRQHandler+0x69c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d03b      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7f      	ldr	r2, [pc, #508]	; (800373c <HAL_DMA_IRQHandler+0x6a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d036      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7d      	ldr	r2, [pc, #500]	; (8003740 <HAL_DMA_IRQHandler+0x6a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <HAL_DMA_IRQHandler+0x6a8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d02c      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <HAL_DMA_IRQHandler+0x6ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d027      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a79      	ldr	r2, [pc, #484]	; (800374c <HAL_DMA_IRQHandler+0x6b0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_DMA_IRQHandler+0x6b4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01d      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a76      	ldr	r2, [pc, #472]	; (8003754 <HAL_DMA_IRQHandler+0x6b8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d018      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a74      	ldr	r2, [pc, #464]	; (8003758 <HAL_DMA_IRQHandler+0x6bc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	; (800375c <HAL_DMA_IRQHandler+0x6c0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a71      	ldr	r2, [pc, #452]	; (8003760 <HAL_DMA_IRQHandler+0x6c4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a70      	ldr	r2, [pc, #448]	; (8003764 <HAL_DMA_IRQHandler+0x6c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x516>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_DMA_IRQHandler+0x6cc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10a      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x52c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e009      	b.n	80035dc <HAL_DMA_IRQHandler+0x540>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03e      	beq.n	800365e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2210      	movs	r2, #16
 80035ea:	409a      	lsls	r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d024      	beq.n	800365e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e01f      	b.n	800365e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01b      	beq.n	800365e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
 800362e:	e016      	b.n	800365e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0208 	bic.w	r2, r2, #8
 800364c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2220      	movs	r2, #32
 8003668:	409a      	lsls	r2, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8110 	beq.w	8003894 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2c      	ldr	r2, [pc, #176]	; (800372c <HAL_DMA_IRQHandler+0x690>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_DMA_IRQHandler+0x694>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <HAL_DMA_IRQHandler+0x698>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_DMA_IRQHandler+0x69c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_DMA_IRQHandler+0x6a0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_DMA_IRQHandler+0x6a4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_DMA_IRQHandler+0x6a8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_IRQHandler+0x6ac>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <HAL_DMA_IRQHandler+0x6b0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_DMA_IRQHandler+0x6b4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_DMA_IRQHandler+0x6b8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_DMA_IRQHandler+0x6bc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_DMA_IRQHandler+0x6c0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_DMA_IRQHandler+0x6c4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_DMA_IRQHandler+0x6c8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_IRQHandler+0x678>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_DMA_IRQHandler+0x6cc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d12b      	bne.n	800376c <HAL_DMA_IRQHandler+0x6d0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e02a      	b.n	8003780 <HAL_DMA_IRQHandler+0x6e4>
 800372a:	bf00      	nop
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8087 	beq.w	8003894 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2220      	movs	r2, #32
 8003790:	409a      	lsls	r2, r3
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d139      	bne.n	8003816 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0216 	bic.w	r2, r2, #22
 80037b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x736>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0208 	bic.w	r2, r2, #8
 80037e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	223f      	movs	r2, #63	; 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 834a 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
          }
          return;
 8003814:	e344      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02c      	beq.n	8003894 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e027      	b.n	8003894 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e01e      	b.n	8003894 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8306 	beq.w	8003eaa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8088 	beq.w	80039bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_DMA_IRQHandler+0xa08>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d04a      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a79      	ldr	r2, [pc, #484]	; (8003aa8 <HAL_DMA_IRQHandler+0xa0c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d045      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a77      	ldr	r2, [pc, #476]	; (8003aac <HAL_DMA_IRQHandler+0xa10>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a76      	ldr	r2, [pc, #472]	; (8003ab0 <HAL_DMA_IRQHandler+0xa14>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d03b      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a74      	ldr	r2, [pc, #464]	; (8003ab4 <HAL_DMA_IRQHandler+0xa18>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a73      	ldr	r2, [pc, #460]	; (8003ab8 <HAL_DMA_IRQHandler+0xa1c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d031      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a71      	ldr	r2, [pc, #452]	; (8003abc <HAL_DMA_IRQHandler+0xa20>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02c      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a70      	ldr	r2, [pc, #448]	; (8003ac0 <HAL_DMA_IRQHandler+0xa24>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d027      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_DMA_IRQHandler+0xa28>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d022      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6d      	ldr	r2, [pc, #436]	; (8003ac8 <HAL_DMA_IRQHandler+0xa2c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d01d      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6b      	ldr	r2, [pc, #428]	; (8003acc <HAL_DMA_IRQHandler+0xa30>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d018      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6a      	ldr	r2, [pc, #424]	; (8003ad0 <HAL_DMA_IRQHandler+0xa34>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <HAL_DMA_IRQHandler+0xa38>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a67      	ldr	r2, [pc, #412]	; (8003ad8 <HAL_DMA_IRQHandler+0xa3c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a65      	ldr	r2, [pc, #404]	; (8003adc <HAL_DMA_IRQHandler+0xa40>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_DMA_IRQHandler+0x8b8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a64      	ldr	r2, [pc, #400]	; (8003ae0 <HAL_DMA_IRQHandler+0xa44>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <HAL_DMA_IRQHandler+0x8ca>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e007      	b.n	8003976 <HAL_DMA_IRQHandler+0x8da>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	429a      	cmp	r2, r3
 8003980:	d307      	bcc.n	8003992 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f2      	bne.n	8003976 <HAL_DMA_IRQHandler+0x8da>
 8003990:	e000      	b.n	8003994 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003992:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039b2:	e003      	b.n	80039bc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8272 	beq.w	8003eaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
 80039ce:	e26c      	b.n	8003eaa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_DMA_IRQHandler+0xa48>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_DMA_IRQHandler+0xa4c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a40      	ldr	r2, [pc, #256]	; (8003aec <HAL_DMA_IRQHandler+0xa50>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3f      	ldr	r2, [pc, #252]	; (8003af0 <HAL_DMA_IRQHandler+0xa54>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <HAL_DMA_IRQHandler+0xa58>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <HAL_DMA_IRQHandler+0xa5c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_DMA_IRQHandler+0xa60>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x984>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_DMA_IRQHandler+0xa64>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x988>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_IRQHandler+0x98a>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 823f 	beq.w	8003eaa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80cd 	beq.w	8003be4 <HAL_DMA_IRQHandler+0xb48>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80c7 	beq.w	8003be4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2204      	movs	r2, #4
 8003a60:	409a      	lsls	r2, r3
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d049      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8210 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a8c:	e20a      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8206 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa0:	e200      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe08>
 8003aa2:	bf00      	nop
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	58025408 	.word	0x58025408
 8003ae8:	5802541c 	.word	0x5802541c
 8003aec:	58025430 	.word	0x58025430
 8003af0:	58025444 	.word	0x58025444
 8003af4:	58025458 	.word	0x58025458
 8003af8:	5802546c 	.word	0x5802546c
 8003afc:	58025480 	.word	0x58025480
 8003b00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d160      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a8c      	ldr	r2, [pc, #560]	; (8003d44 <HAL_DMA_IRQHandler+0xca8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d04a      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a8a      	ldr	r2, [pc, #552]	; (8003d48 <HAL_DMA_IRQHandler+0xcac>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d045      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a89      	ldr	r2, [pc, #548]	; (8003d4c <HAL_DMA_IRQHandler+0xcb0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d040      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a87      	ldr	r2, [pc, #540]	; (8003d50 <HAL_DMA_IRQHandler+0xcb4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d03b      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a86      	ldr	r2, [pc, #536]	; (8003d54 <HAL_DMA_IRQHandler+0xcb8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d036      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a84      	ldr	r2, [pc, #528]	; (8003d58 <HAL_DMA_IRQHandler+0xcbc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a83      	ldr	r2, [pc, #524]	; (8003d5c <HAL_DMA_IRQHandler+0xcc0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d02c      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a81      	ldr	r2, [pc, #516]	; (8003d60 <HAL_DMA_IRQHandler+0xcc4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d027      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a80      	ldr	r2, [pc, #512]	; (8003d64 <HAL_DMA_IRQHandler+0xcc8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7e      	ldr	r2, [pc, #504]	; (8003d68 <HAL_DMA_IRQHandler+0xccc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01d      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7d      	ldr	r2, [pc, #500]	; (8003d6c <HAL_DMA_IRQHandler+0xcd0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d018      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7b      	ldr	r2, [pc, #492]	; (8003d70 <HAL_DMA_IRQHandler+0xcd4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7a      	ldr	r2, [pc, #488]	; (8003d74 <HAL_DMA_IRQHandler+0xcd8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <HAL_DMA_IRQHandler+0xcdc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a77      	ldr	r2, [pc, #476]	; (8003d7c <HAL_DMA_IRQHandler+0xce0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_DMA_IRQHandler+0xb12>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_DMA_IRQHandler+0xce4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0xb24>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0208 	bic.w	r2, r2, #8
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e007      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xb34>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0204 	bic.w	r2, r2, #4
 8003bce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8165 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be2:	e15f      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2202      	movs	r2, #2
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80c5 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xce8>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80bf 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2202      	movs	r2, #2
 8003c10:	409a      	lsls	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 813a 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c3c:	e134      	b.n	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8130 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c50:	e12a      	b.n	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d168      	bne.n	8003d2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_DMA_IRQHandler+0xca8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a37      	ldr	r2, [pc, #220]	; (8003d48 <HAL_DMA_IRQHandler+0xcac>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a35      	ldr	r2, [pc, #212]	; (8003d4c <HAL_DMA_IRQHandler+0xcb0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <HAL_DMA_IRQHandler+0xcb4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <HAL_DMA_IRQHandler+0xcb8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_DMA_IRQHandler+0xcbc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_DMA_IRQHandler+0xcc0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <HAL_DMA_IRQHandler+0xcc4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <HAL_DMA_IRQHandler+0xcc8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <HAL_DMA_IRQHandler+0xccc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <HAL_DMA_IRQHandler+0xcd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <HAL_DMA_IRQHandler+0xcd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_DMA_IRQHandler+0xcd8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a25      	ldr	r2, [pc, #148]	; (8003d78 <HAL_DMA_IRQHandler+0xcdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_DMA_IRQHandler+0xce0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xc60>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <HAL_DMA_IRQHandler+0xce4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_IRQHandler+0xc72>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0214 	bic.w	r2, r2, #20
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_DMA_IRQHandler+0xc82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 020a 	bic.w	r2, r2, #10
 8003d1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b8 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d40:	e0b2      	b.n	8003ea8 <HAL_DMA_IRQHandler+0xe0c>
 8003d42:	bf00      	nop
 8003d44:	40020010 	.word	0x40020010
 8003d48:	40020028 	.word	0x40020028
 8003d4c:	40020040 	.word	0x40020040
 8003d50:	40020058 	.word	0x40020058
 8003d54:	40020070 	.word	0x40020070
 8003d58:	40020088 	.word	0x40020088
 8003d5c:	400200a0 	.word	0x400200a0
 8003d60:	400200b8 	.word	0x400200b8
 8003d64:	40020410 	.word	0x40020410
 8003d68:	40020428 	.word	0x40020428
 8003d6c:	40020440 	.word	0x40020440
 8003d70:	40020458 	.word	0x40020458
 8003d74:	40020470 	.word	0x40020470
 8003d78:	40020488 	.word	0x40020488
 8003d7c:	400204a0 	.word	0x400204a0
 8003d80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8088 	beq.w	8003eaa <HAL_DMA_IRQHandler+0xe0e>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8082 	beq.w	8003eaa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a41      	ldr	r2, [pc, #260]	; (8003eb0 <HAL_DMA_IRQHandler+0xe14>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3f      	ldr	r2, [pc, #252]	; (8003eb4 <HAL_DMA_IRQHandler+0xe18>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a3e      	ldr	r2, [pc, #248]	; (8003eb8 <HAL_DMA_IRQHandler+0xe1c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <HAL_DMA_IRQHandler+0xe20>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <HAL_DMA_IRQHandler+0xe24>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <HAL_DMA_IRQHandler+0xe28>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <HAL_DMA_IRQHandler+0xe2c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a36      	ldr	r2, [pc, #216]	; (8003ecc <HAL_DMA_IRQHandler+0xe30>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a35      	ldr	r2, [pc, #212]	; (8003ed0 <HAL_DMA_IRQHandler+0xe34>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a33      	ldr	r2, [pc, #204]	; (8003ed4 <HAL_DMA_IRQHandler+0xe38>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_DMA_IRQHandler+0xe3c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <HAL_DMA_IRQHandler+0xe40>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <HAL_DMA_IRQHandler+0xe44>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ee4 <HAL_DMA_IRQHandler+0xe48>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	; (8003ee8 <HAL_DMA_IRQHandler+0xe4c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xdaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <HAL_DMA_IRQHandler+0xe50>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <HAL_DMA_IRQHandler+0xdbc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 021c 	bic.w	r2, r2, #28
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <HAL_DMA_IRQHandler+0xdcc>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020e 	bic.w	r2, r2, #14
 8003e66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
 8003e9e:	e004      	b.n	8003eaa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ea0:	bf00      	nop
 8003ea2:	e002      	b.n	8003eaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea4:	bf00      	nop
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40020010 	.word	0x40020010
 8003eb4:	40020028 	.word	0x40020028
 8003eb8:	40020040 	.word	0x40020040
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	40020070 	.word	0x40020070
 8003ec4:	40020088 	.word	0x40020088
 8003ec8:	400200a0 	.word	0x400200a0
 8003ecc:	400200b8 	.word	0x400200b8
 8003ed0:	40020410 	.word	0x40020410
 8003ed4:	40020428 	.word	0x40020428
 8003ed8:	40020440 	.word	0x40020440
 8003edc:	40020458 	.word	0x40020458
 8003ee0:	40020470 	.word	0x40020470
 8003ee4:	40020488 	.word	0x40020488
 8003ee8:	400204a0 	.word	0x400204a0
 8003eec:	400204b8 	.word	0x400204b8

08003ef0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a84      	ldr	r2, [pc, #528]	; (8004120 <DMA_SetConfig+0x230>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d072      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a82      	ldr	r2, [pc, #520]	; (8004124 <DMA_SetConfig+0x234>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d06d      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a81      	ldr	r2, [pc, #516]	; (8004128 <DMA_SetConfig+0x238>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d068      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	; (800412c <DMA_SetConfig+0x23c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d063      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7e      	ldr	r2, [pc, #504]	; (8004130 <DMA_SetConfig+0x240>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d05e      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <DMA_SetConfig+0x244>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d059      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7b      	ldr	r2, [pc, #492]	; (8004138 <DMA_SetConfig+0x248>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d054      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a79      	ldr	r2, [pc, #484]	; (800413c <DMA_SetConfig+0x24c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04f      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a78      	ldr	r2, [pc, #480]	; (8004140 <DMA_SetConfig+0x250>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04a      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a76      	ldr	r2, [pc, #472]	; (8004144 <DMA_SetConfig+0x254>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d045      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <DMA_SetConfig+0x258>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d040      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a73      	ldr	r2, [pc, #460]	; (800414c <DMA_SetConfig+0x25c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d03b      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a72      	ldr	r2, [pc, #456]	; (8004150 <DMA_SetConfig+0x260>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d036      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a70      	ldr	r2, [pc, #448]	; (8004154 <DMA_SetConfig+0x264>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6f      	ldr	r2, [pc, #444]	; (8004158 <DMA_SetConfig+0x268>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d02c      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6d      	ldr	r2, [pc, #436]	; (800415c <DMA_SetConfig+0x26c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d027      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6c      	ldr	r2, [pc, #432]	; (8004160 <DMA_SetConfig+0x270>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d022      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <DMA_SetConfig+0x274>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01d      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a69      	ldr	r2, [pc, #420]	; (8004168 <DMA_SetConfig+0x278>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a67      	ldr	r2, [pc, #412]	; (800416c <DMA_SetConfig+0x27c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a66      	ldr	r2, [pc, #408]	; (8004170 <DMA_SetConfig+0x280>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a64      	ldr	r2, [pc, #400]	; (8004174 <DMA_SetConfig+0x284>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a63      	ldr	r2, [pc, #396]	; (8004178 <DMA_SetConfig+0x288>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a61      	ldr	r2, [pc, #388]	; (800417c <DMA_SetConfig+0x28c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <DMA_SetConfig+0x10e>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <DMA_SetConfig+0x110>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800400c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800401e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <DMA_SetConfig+0x230>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d04a      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3d      	ldr	r2, [pc, #244]	; (8004124 <DMA_SetConfig+0x234>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d045      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <DMA_SetConfig+0x238>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d040      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3a      	ldr	r2, [pc, #232]	; (800412c <DMA_SetConfig+0x23c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d03b      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <DMA_SetConfig+0x240>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d036      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a37      	ldr	r2, [pc, #220]	; (8004134 <DMA_SetConfig+0x244>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d031      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	; (8004138 <DMA_SetConfig+0x248>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d02c      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <DMA_SetConfig+0x24c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d027      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a32      	ldr	r2, [pc, #200]	; (8004140 <DMA_SetConfig+0x250>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a31      	ldr	r2, [pc, #196]	; (8004144 <DMA_SetConfig+0x254>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d01d      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <DMA_SetConfig+0x258>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2e      	ldr	r2, [pc, #184]	; (800414c <DMA_SetConfig+0x25c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <DMA_SetConfig+0x260>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <DMA_SetConfig+0x264>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <DMA_SetConfig+0x268>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <DMA_SetConfig+0x1d0>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <DMA_SetConfig+0x26c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <DMA_SetConfig+0x1d4>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <DMA_SetConfig+0x1d6>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d05a      	beq.n	8004180 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	223f      	movs	r2, #63	; 0x3f
 80040d4:	409a      	lsls	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d108      	bne.n	800410c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800410a:	e087      	b.n	800421c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
}
 800411c:	e07e      	b.n	800421c <DMA_SetConfig+0x32c>
 800411e:	bf00      	nop
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <DMA_SetConfig+0x338>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d022      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a27      	ldr	r2, [pc, #156]	; (800422c <DMA_SetConfig+0x33c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01d      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <DMA_SetConfig+0x340>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d018      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <DMA_SetConfig+0x344>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <DMA_SetConfig+0x348>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00e      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <DMA_SetConfig+0x34c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d009      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <DMA_SetConfig+0x350>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <DMA_SetConfig+0x2e0>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <DMA_SetConfig+0x354>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <DMA_SetConfig+0x2e4>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <DMA_SetConfig+0x2e6>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d108      	bne.n	800420c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	60da      	str	r2, [r3, #12]
}
 800420a:	e007      	b.n	800421c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	58025408 	.word	0x58025408
 800422c:	5802541c 	.word	0x5802541c
 8004230:	58025430 	.word	0x58025430
 8004234:	58025444 	.word	0x58025444
 8004238:	58025458 	.word	0x58025458
 800423c:	5802546c 	.word	0x5802546c
 8004240:	58025480 	.word	0x58025480
 8004244:	58025494 	.word	0x58025494

08004248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a42      	ldr	r2, [pc, #264]	; (8004360 <DMA_CalcBaseAndBitshift+0x118>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04a      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a41      	ldr	r2, [pc, #260]	; (8004364 <DMA_CalcBaseAndBitshift+0x11c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d045      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <DMA_CalcBaseAndBitshift+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d040      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <DMA_CalcBaseAndBitshift+0x124>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03b      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <DMA_CalcBaseAndBitshift+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d036      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a3b      	ldr	r2, [pc, #236]	; (8004374 <DMA_CalcBaseAndBitshift+0x12c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d031      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a39      	ldr	r2, [pc, #228]	; (8004378 <DMA_CalcBaseAndBitshift+0x130>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02c      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a38      	ldr	r2, [pc, #224]	; (800437c <DMA_CalcBaseAndBitshift+0x134>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d027      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a36      	ldr	r2, [pc, #216]	; (8004380 <DMA_CalcBaseAndBitshift+0x138>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a35      	ldr	r2, [pc, #212]	; (8004384 <DMA_CalcBaseAndBitshift+0x13c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a33      	ldr	r2, [pc, #204]	; (8004388 <DMA_CalcBaseAndBitshift+0x140>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a32      	ldr	r2, [pc, #200]	; (800438c <DMA_CalcBaseAndBitshift+0x144>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a30      	ldr	r2, [pc, #192]	; (8004390 <DMA_CalcBaseAndBitshift+0x148>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <DMA_CalcBaseAndBitshift+0x14c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <DMA_CalcBaseAndBitshift+0x150>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xa8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <DMA_CalcBaseAndBitshift+0x154>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <DMA_CalcBaseAndBitshift+0xac>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <DMA_CalcBaseAndBitshift+0xae>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d024      	beq.n	8004344 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b10      	subs	r3, #16
 8004302:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <DMA_CalcBaseAndBitshift+0x158>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004314:	5cd3      	ldrb	r3, [r2, r3]
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d908      	bls.n	8004334 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <DMA_CalcBaseAndBitshift+0x160>)
 800432a:	4013      	ands	r3, r2
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	659a      	str	r2, [r3, #88]	; 0x58
 8004332:	e00d      	b.n	8004350 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <DMA_CalcBaseAndBitshift+0x160>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6593      	str	r3, [r2, #88]	; 0x58
 8004342:	e005      	b.n	8004350 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40020010 	.word	0x40020010
 8004364:	40020028 	.word	0x40020028
 8004368:	40020040 	.word	0x40020040
 800436c:	40020058 	.word	0x40020058
 8004370:	40020070 	.word	0x40020070
 8004374:	40020088 	.word	0x40020088
 8004378:	400200a0 	.word	0x400200a0
 800437c:	400200b8 	.word	0x400200b8
 8004380:	40020410 	.word	0x40020410
 8004384:	40020428 	.word	0x40020428
 8004388:	40020440 	.word	0x40020440
 800438c:	40020458 	.word	0x40020458
 8004390:	40020470 	.word	0x40020470
 8004394:	40020488 	.word	0x40020488
 8004398:	400204a0 	.word	0x400204a0
 800439c:	400204b8 	.word	0x400204b8
 80043a0:	aaaaaaab 	.word	0xaaaaaaab
 80043a4:	08009bf8 	.word	0x08009bf8
 80043a8:	fffffc00 	.word	0xfffffc00

080043ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d120      	bne.n	8004402 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d858      	bhi.n	800447a <DMA_CheckFifoParam+0xce>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <DMA_CheckFifoParam+0x24>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043f3 	.word	0x080043f3
 80043d8:	080043e1 	.word	0x080043e1
 80043dc:	0800447b 	.word	0x0800447b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d048      	beq.n	800447e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f0:	e045      	b.n	800447e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043fa:	d142      	bne.n	8004482 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004400:	e03f      	b.n	8004482 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440a:	d123      	bne.n	8004454 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	2b03      	cmp	r3, #3
 8004412:	d838      	bhi.n	8004486 <DMA_CheckFifoParam+0xda>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <DMA_CheckFifoParam+0x70>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004433 	.word	0x08004433
 8004424:	0800442d 	.word	0x0800442d
 8004428:	08004445 	.word	0x08004445
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
        break;
 8004430:	e030      	b.n	8004494 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d025      	beq.n	800448a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004442:	e022      	b.n	800448a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004452:	e01c      	b.n	800448e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <DMA_CheckFifoParam+0xb6>
 800445c:	2b03      	cmp	r3, #3
 800445e:	d003      	beq.n	8004468 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004460:	e018      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        break;
 8004466:	e015      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
    break;
 8004478:	e00b      	b.n	8004492 <DMA_CheckFifoParam+0xe6>
        break;
 800447a:	bf00      	nop
 800447c:	e00a      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        break;
 800447e:	bf00      	nop
 8004480:	e008      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        break;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
        break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
    break;
 8004492:	bf00      	nop
    }
  }

  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a38      	ldr	r2, [pc, #224]	; (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a36      	ldr	r2, [pc, #216]	; (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01d      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a35      	ldr	r2, [pc, #212]	; (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a32      	ldr	r2, [pc, #200]	; (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a30      	ldr	r2, [pc, #192]	; (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2f      	ldr	r2, [pc, #188]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3b08      	subs	r3, #8
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4b26      	ldr	r3, [pc, #152]	; (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004530:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004540:	e024      	b.n	800458c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3b10      	subs	r3, #16
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d806      	bhi.n	800456a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d902      	bls.n	800456a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3308      	adds	r3, #8
 8004568:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800457c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	58025408 	.word	0x58025408
 800459c:	5802541c 	.word	0x5802541c
 80045a0:	58025430 	.word	0x58025430
 80045a4:	58025444 	.word	0x58025444
 80045a8:	58025458 	.word	0x58025458
 80045ac:	5802546c 	.word	0x5802546c
 80045b0:	58025480 	.word	0x58025480
 80045b4:	58025494 	.word	0x58025494
 80045b8:	cccccccd 	.word	0xcccccccd
 80045bc:	16009600 	.word	0x16009600
 80045c0:	58025880 	.word	0x58025880
 80045c4:	aaaaaaab 	.word	0xaaaaaaab
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	4002040f 	.word	0x4002040f
 80045d0:	10008200 	.word	0x10008200
 80045d4:	40020880 	.word	0x40020880

080045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d04a      	beq.n	8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d847      	bhi.n	8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a24      	ldr	r2, [pc, #144]	; (8004694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01d      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004660:	671a      	str	r2, [r3, #112]	; 0x70
 8004662:	e009      	b.n	8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004676:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3b01      	subs	r3, #1
 800467c:	2201      	movs	r2, #1
 800467e:	409a      	lsls	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	58025408 	.word	0x58025408
 8004694:	5802541c 	.word	0x5802541c
 8004698:	58025430 	.word	0x58025430
 800469c:	58025444 	.word	0x58025444
 80046a0:	58025458 	.word	0x58025458
 80046a4:	5802546c 	.word	0x5802546c
 80046a8:	58025480 	.word	0x58025480
 80046ac:	58025494 	.word	0x58025494
 80046b0:	1600963f 	.word	0x1600963f
 80046b4:	58025940 	.word	0x58025940
 80046b8:	1000823f 	.word	0x1000823f
 80046bc:	40020940 	.word	0x40020940

080046c0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d105      	bne.n	80046e6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e325      	b.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e31e      	b.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 830d 	bne.w	8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a82      	ldr	r2, [pc, #520]	; (8004928 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d04a      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a81      	ldr	r2, [pc, #516]	; (800492c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d045      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7f      	ldr	r2, [pc, #508]	; (8004930 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d040      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7e      	ldr	r2, [pc, #504]	; (8004934 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d03b      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d036      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7b      	ldr	r2, [pc, #492]	; (800493c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d031      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a79      	ldr	r2, [pc, #484]	; (8004940 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d02c      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a78      	ldr	r2, [pc, #480]	; (8004944 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d027      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a76      	ldr	r2, [pc, #472]	; (8004948 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a75      	ldr	r2, [pc, #468]	; (800494c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d01d      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a73      	ldr	r2, [pc, #460]	; (8004950 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a72      	ldr	r2, [pc, #456]	; (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a70      	ldr	r2, [pc, #448]	; (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6f      	ldr	r2, [pc, #444]	; (800495c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6d      	ldr	r2, [pc, #436]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a6c      	ldr	r2, [pc, #432]	; (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d018      	beq.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80047d0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	3308      	adds	r3, #8
 80047e0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	223f      	movs	r2, #63	; 0x3f
 80047ec:	409a      	lsls	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e018      	b.n	8004826 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f248 0320 	movw	r3, #32800	; 0x8020
 8004802:	430b      	orrs	r3, r1
 8004804:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	3304      	adds	r3, #4
 8004814:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2201      	movs	r2, #1
 8004820:	409a      	lsls	r2, r3
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fb41 	bl	8004eb4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d072      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d06d      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a39      	ldr	r2, [pc, #228]	; (8004930 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d068      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a37      	ldr	r2, [pc, #220]	; (8004934 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d063      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a36      	ldr	r2, [pc, #216]	; (8004938 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d05e      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a34      	ldr	r2, [pc, #208]	; (800493c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d059      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a33      	ldr	r2, [pc, #204]	; (8004940 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d054      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a31      	ldr	r2, [pc, #196]	; (8004944 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04f      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a30      	ldr	r2, [pc, #192]	; (8004948 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2e      	ldr	r2, [pc, #184]	; (800494c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a27      	ldr	r2, [pc, #156]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a25      	ldr	r2, [pc, #148]	; (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d132      	bne.n	8004988 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004922:	2301      	movs	r3, #1
 8004924:	e031      	b.n	800498a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004926:	bf00      	nop
 8004928:	40020010 	.word	0x40020010
 800492c:	40020028 	.word	0x40020028
 8004930:	40020040 	.word	0x40020040
 8004934:	40020058 	.word	0x40020058
 8004938:	40020070 	.word	0x40020070
 800493c:	40020088 	.word	0x40020088
 8004940:	400200a0 	.word	0x400200a0
 8004944:	400200b8 	.word	0x400200b8
 8004948:	40020410 	.word	0x40020410
 800494c:	40020428 	.word	0x40020428
 8004950:	40020440 	.word	0x40020440
 8004954:	40020458 	.word	0x40020458
 8004958:	40020470 	.word	0x40020470
 800495c:	40020488 	.word	0x40020488
 8004960:	400204a0 	.word	0x400204a0
 8004964:	400204b8 	.word	0x400204b8
 8004968:	58025408 	.word	0x58025408
 800496c:	5802541c 	.word	0x5802541c
 8004970:	58025430 	.word	0x58025430
 8004974:	58025444 	.word	0x58025444
 8004978:	58025458 	.word	0x58025458
 800497c:	5802546c 	.word	0x5802546c
 8004980:	58025480 	.word	0x58025480
 8004984:	58025494 	.word	0x58025494
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004996:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049a8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a83      	ldr	r2, [pc, #524]	; (8004bc8 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7f      	ldr	r2, [pc, #508]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7d      	ldr	r2, [pc, #500]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7c      	ldr	r2, [pc, #496]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7a      	ldr	r2, [pc, #488]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a79      	ldr	r2, [pc, #484]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a77      	ldr	r2, [pc, #476]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a74      	ldr	r2, [pc, #464]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a71      	ldr	r2, [pc, #452]	; (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6e      	ldr	r2, [pc, #440]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d022      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 021e 	bic.w	r2, r3, #30
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0216 	orr.w	r2, r2, #22
 8004a66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a76:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d022      	beq.n	8004ace <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0208 	orr.w	r2, r2, #8
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e019      	b.n	8004ace <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f023 020e 	bic.w	r2, r3, #14
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 020a 	orr.w	r2, r2, #10
 8004aac:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0204 	orr.w	r2, r2, #4
 8004acc:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d072      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d06d      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d068      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d063      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d059      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d054      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04f      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d132      	bne.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e031      	b.n	8004c26 <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01a      	beq.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d04a      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d045      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a32      	ldr	r2, [pc, #200]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d040      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a31      	ldr	r2, [pc, #196]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d03b      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2f      	ldr	r2, [pc, #188]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d036      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2e      	ldr	r2, [pc, #184]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d031      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02c      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d027      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a28      	ldr	r2, [pc, #160]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d01d      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a26      	ldr	r2, [pc, #152]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a23      	ldr	r2, [pc, #140]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e00e      	b.n	8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e005      	b.n	8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40020010 	.word	0x40020010
 8004d40:	40020028 	.word	0x40020028
 8004d44:	40020040 	.word	0x40020040
 8004d48:	40020058 	.word	0x40020058
 8004d4c:	40020070 	.word	0x40020070
 8004d50:	40020088 	.word	0x40020088
 8004d54:	400200a0 	.word	0x400200a0
 8004d58:	400200b8 	.word	0x400200b8
 8004d5c:	40020410 	.word	0x40020410
 8004d60:	40020428 	.word	0x40020428
 8004d64:	40020440 	.word	0x40020440
 8004d68:	40020458 	.word	0x40020458
 8004d6c:	40020470 	.word	0x40020470
 8004d70:	40020488 	.word	0x40020488
 8004d74:	400204a0 	.word	0x400204a0
 8004d78:	400204b8 	.word	0x400204b8

08004d7c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <HAL_DMAEx_ChangeMemory+0xf8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <HAL_DMAEx_ChangeMemory+0xfc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a36      	ldr	r2, [pc, #216]	; (8004e7c <HAL_DMAEx_ChangeMemory+0x100>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <HAL_DMAEx_ChangeMemory+0x104>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a33      	ldr	r2, [pc, #204]	; (8004e84 <HAL_DMAEx_ChangeMemory+0x108>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_DMAEx_ChangeMemory+0x10c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a30      	ldr	r2, [pc, #192]	; (8004e8c <HAL_DMAEx_ChangeMemory+0x110>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2e      	ldr	r2, [pc, #184]	; (8004e90 <HAL_DMAEx_ChangeMemory+0x114>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2d      	ldr	r2, [pc, #180]	; (8004e94 <HAL_DMAEx_ChangeMemory+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2b      	ldr	r2, [pc, #172]	; (8004e98 <HAL_DMAEx_ChangeMemory+0x11c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <HAL_DMAEx_ChangeMemory+0x120>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <HAL_DMAEx_ChangeMemory+0x124>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <HAL_DMAEx_ChangeMemory+0x128>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_DMAEx_ChangeMemory+0x130>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMAEx_ChangeMemory+0xae>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_DMAEx_ChangeMemory+0x134>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_DMAEx_ChangeMemory+0xb2>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <HAL_DMAEx_ChangeMemory+0xb4>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e010      	b.n	8004e66 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	611a      	str	r2, [r3, #16]
 8004e4c:	e00b      	b.n	8004e66 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e003      	b.n	8004e66 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40020010 	.word	0x40020010
 8004e78:	40020028 	.word	0x40020028
 8004e7c:	40020040 	.word	0x40020040
 8004e80:	40020058 	.word	0x40020058
 8004e84:	40020070 	.word	0x40020070
 8004e88:	40020088 	.word	0x40020088
 8004e8c:	400200a0 	.word	0x400200a0
 8004e90:	400200b8 	.word	0x400200b8
 8004e94:	40020410 	.word	0x40020410
 8004e98:	40020428 	.word	0x40020428
 8004e9c:	40020440 	.word	0x40020440
 8004ea0:	40020458 	.word	0x40020458
 8004ea4:	40020470 	.word	0x40020470
 8004ea8:	40020488 	.word	0x40020488
 8004eac:	400204a0 	.word	0x400204a0
 8004eb0:	400204b8 	.word	0x400204b8

08004eb4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a46      	ldr	r2, [pc, #280]	; (8004fe0 <DMA_MultiBufferSetConfig+0x12c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a44      	ldr	r2, [pc, #272]	; (8004fe4 <DMA_MultiBufferSetConfig+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <DMA_MultiBufferSetConfig+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a41      	ldr	r2, [pc, #260]	; (8004fec <DMA_MultiBufferSetConfig+0x138>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <DMA_MultiBufferSetConfig+0x13c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3e      	ldr	r2, [pc, #248]	; (8004ff4 <DMA_MultiBufferSetConfig+0x140>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <DMA_MultiBufferSetConfig+0x144>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <DMA_MultiBufferSetConfig+0x148>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <DMA_MultiBufferSetConfig+0x14c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a38      	ldr	r2, [pc, #224]	; (8005004 <DMA_MultiBufferSetConfig+0x150>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	; (8005008 <DMA_MultiBufferSetConfig+0x154>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a35      	ldr	r2, [pc, #212]	; (800500c <DMA_MultiBufferSetConfig+0x158>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a34      	ldr	r2, [pc, #208]	; (8005010 <DMA_MultiBufferSetConfig+0x15c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a32      	ldr	r2, [pc, #200]	; (8005014 <DMA_MultiBufferSetConfig+0x160>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a31      	ldr	r2, [pc, #196]	; (8005018 <DMA_MultiBufferSetConfig+0x164>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <DMA_MultiBufferSetConfig+0xae>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <DMA_MultiBufferSetConfig+0x168>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <DMA_MultiBufferSetConfig+0xb2>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <DMA_MultiBufferSetConfig+0xb4>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d108      	bne.n	8004f8e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8004f8c:	e021      	b.n	8004fd2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]
}
 8004f9e:	e018      	b.n	8004fd2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d108      	bne.n	8004fc2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
}
 8004fc0:	e007      	b.n	8004fd2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40020010 	.word	0x40020010
 8004fe4:	40020028 	.word	0x40020028
 8004fe8:	40020040 	.word	0x40020040
 8004fec:	40020058 	.word	0x40020058
 8004ff0:	40020070 	.word	0x40020070
 8004ff4:	40020088 	.word	0x40020088
 8004ff8:	400200a0 	.word	0x400200a0
 8004ffc:	400200b8 	.word	0x400200b8
 8005000:	40020410 	.word	0x40020410
 8005004:	40020428 	.word	0x40020428
 8005008:	40020440 	.word	0x40020440
 800500c:	40020458 	.word	0x40020458
 8005010:	40020470 	.word	0x40020470
 8005014:	40020488 	.word	0x40020488
 8005018:	400204a0 	.word	0x400204a0
 800501c:	400204b8 	.word	0x400204b8

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800502e:	4b89      	ldr	r3, [pc, #548]	; (8005254 <HAL_GPIO_Init+0x234>)
 8005030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005032:	e194      	b.n	800535e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8186 	beq.w	8005358 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d00b      	beq.n	800506c <HAL_GPIO_Init+0x4c>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d007      	beq.n	800506c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005060:	2b11      	cmp	r3, #17
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b12      	cmp	r3, #18
 800506a:	d130      	bne.n	80050ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	2203      	movs	r2, #3
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050a2:	2201      	movs	r2, #1
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 0201 	and.w	r2, r3, #1
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	2203      	movs	r2, #3
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d003      	beq.n	800510e <HAL_GPIO_Init+0xee>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b12      	cmp	r3, #18
 800510c:	d123      	bne.n	8005156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	08da      	lsrs	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	220f      	movs	r2, #15
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	08da      	lsrs	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3208      	adds	r2, #8
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 0203 	and.w	r2, r3, #3
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80e0 	beq.w	8005358 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005198:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <HAL_GPIO_Init+0x238>)
 800519a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800519e:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <HAL_GPIO_Init+0x238>)
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051a8:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_GPIO_Init+0x238>)
 80051aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051b6:	4a29      	ldr	r2, [pc, #164]	; (800525c <HAL_GPIO_Init+0x23c>)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	3302      	adds	r3, #2
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	220f      	movs	r2, #15
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a20      	ldr	r2, [pc, #128]	; (8005260 <HAL_GPIO_Init+0x240>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d052      	beq.n	8005288 <HAL_GPIO_Init+0x268>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_GPIO_Init+0x244>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d031      	beq.n	800524e <HAL_GPIO_Init+0x22e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_GPIO_Init+0x248>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02b      	beq.n	800524a <HAL_GPIO_Init+0x22a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	; (800526c <HAL_GPIO_Init+0x24c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d025      	beq.n	8005246 <HAL_GPIO_Init+0x226>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <HAL_GPIO_Init+0x250>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <HAL_GPIO_Init+0x222>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <HAL_GPIO_Init+0x254>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d019      	beq.n	800523e <HAL_GPIO_Init+0x21e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <HAL_GPIO_Init+0x258>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_GPIO_Init+0x21a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <HAL_GPIO_Init+0x25c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00d      	beq.n	8005236 <HAL_GPIO_Init+0x216>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_GPIO_Init+0x260>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <HAL_GPIO_Init+0x212>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a17      	ldr	r2, [pc, #92]	; (8005284 <HAL_GPIO_Init+0x264>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_GPIO_Init+0x20e>
 800522a:	2309      	movs	r3, #9
 800522c:	e02d      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800522e:	230a      	movs	r3, #10
 8005230:	e02b      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005232:	2308      	movs	r3, #8
 8005234:	e029      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005236:	2307      	movs	r3, #7
 8005238:	e027      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800523a:	2306      	movs	r3, #6
 800523c:	e025      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800523e:	2305      	movs	r3, #5
 8005240:	e023      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005242:	2304      	movs	r3, #4
 8005244:	e021      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005246:	2303      	movs	r3, #3
 8005248:	e01f      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800524a:	2302      	movs	r3, #2
 800524c:	e01d      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800524e:	2301      	movs	r3, #1
 8005250:	e01b      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005252:	bf00      	nop
 8005254:	58000080 	.word	0x58000080
 8005258:	58024400 	.word	0x58024400
 800525c:	58000400 	.word	0x58000400
 8005260:	58020000 	.word	0x58020000
 8005264:	58020400 	.word	0x58020400
 8005268:	58020800 	.word	0x58020800
 800526c:	58020c00 	.word	0x58020c00
 8005270:	58021000 	.word	0x58021000
 8005274:	58021400 	.word	0x58021400
 8005278:	58021800 	.word	0x58021800
 800527c:	58021c00 	.word	0x58021c00
 8005280:	58022000 	.word	0x58022000
 8005284:	58022400 	.word	0x58022400
 8005288:	2300      	movs	r3, #0
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	f002 0203 	and.w	r2, r2, #3
 8005290:	0092      	lsls	r2, r2, #2
 8005292:	4093      	lsls	r3, r2
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800529a:	4938      	ldr	r1, [pc, #224]	; (800537c <HAL_GPIO_Init+0x35c>)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	3302      	adds	r3, #2
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f47f ae63 	bne.w	8005034 <HAL_GPIO_Init+0x14>
  }
}
 800536e:	bf00      	nop
 8005370:	3724      	adds	r7, #36	; 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	58000400 	.word	0x58000400

08005380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	807b      	strh	r3, [r7, #2]
 800538c:	4613      	mov	r3, r2
 800538e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005390:	787b      	ldrb	r3, [r7, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800539c:	e003      	b.n	80053a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	041a      	lsls	r2, r3, #16
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	619a      	str	r2, [r3, #24]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07f      	b.n	80054c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fb50 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	e006      	b.n	800543c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800543a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d104      	bne.n	800544e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_I2C_Init+0x11c>)
 800545a:	430b      	orrs	r3, r1
 800545c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800546c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	ea42 0103 	orr.w	r1, r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	02008000 	.word	0x02008000

080054d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	460b      	mov	r3, r1
 80054e2:	817b      	strh	r3, [r7, #10]
 80054e4:	4613      	mov	r3, r2
 80054e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	f040 80da 	bne.w	80056aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_I2C_Master_Transmit+0x30>
 8005500:	2302      	movs	r3, #2
 8005502:	e0d3      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800550c:	f7fb fe10 	bl	8001130 <HAL_GetTick>
 8005510:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2319      	movs	r3, #25
 8005518:	2201      	movs	r2, #1
 800551a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fa5e 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e0be      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2221      	movs	r2, #33	; 0x21
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2210      	movs	r2, #16
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	893a      	ldrh	r2, [r7, #8]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2bff      	cmp	r3, #255	; 0xff
 800555e:	d90e      	bls.n	800557e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	22ff      	movs	r2, #255	; 0xff
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	b2da      	uxtb	r2, r3
 800556c:	8979      	ldrh	r1, [r7, #10]
 800556e:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fb54 	bl	8005c24 <I2C_TransferConfig>
 800557c:	e06c      	b.n	8005658 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	b2da      	uxtb	r2, r3
 800558e:	8979      	ldrh	r1, [r7, #10]
 8005590:	4b48      	ldr	r3, [pc, #288]	; (80056b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fb43 	bl	8005c24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800559e:	e05b      	b.n	8005658 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	6a39      	ldr	r1, [r7, #32]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 fa5b 	bl	8005a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e07b      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d034      	beq.n	8005658 <HAL_I2C_Master_Transmit+0x184>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d130      	bne.n	8005658 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f9ed 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e04d      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2bff      	cmp	r3, #255	; 0xff
 8005618:	d90e      	bls.n	8005638 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	b2da      	uxtb	r2, r3
 8005626:	8979      	ldrh	r1, [r7, #10]
 8005628:	2300      	movs	r3, #0
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 faf7 	bl	8005c24 <I2C_TransferConfig>
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	b2da      	uxtb	r2, r3
 8005648:	8979      	ldrh	r1, [r7, #10]
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fae6 	bl	8005c24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d19e      	bne.n	80055a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	6a39      	ldr	r1, [r7, #32]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fa3a 	bl	8005ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e01a      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2220      	movs	r2, #32
 800567c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800568a:	400b      	ands	r3, r1
 800568c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	80002000 	.word	0x80002000
 80056b8:	fe00e800 	.word	0xfe00e800

080056bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	4608      	mov	r0, r1
 80056c6:	4611      	mov	r1, r2
 80056c8:	461a      	mov	r2, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	817b      	strh	r3, [r7, #10]
 80056ce:	460b      	mov	r3, r1
 80056d0:	813b      	strh	r3, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	f040 80fd 	bne.w	80058de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_I2C_Mem_Read+0x34>
 80056ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0f1      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_I2C_Mem_Read+0x4e>
 8005706:	2302      	movs	r3, #2
 8005708:	e0ea      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005712:	f7fb fd0d 	bl	8001130 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2319      	movs	r3, #25
 800571e:	2201      	movs	r2, #1
 8005720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f95b 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0d5      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2222      	movs	r2, #34	; 0x22
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2240      	movs	r2, #64	; 0x40
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800575c:	88f8      	ldrh	r0, [r7, #6]
 800575e:	893a      	ldrh	r2, [r7, #8]
 8005760:	8979      	ldrh	r1, [r7, #10]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	4603      	mov	r3, r0
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f8bf 	bl	80058f0 <I2C_RequestMemoryRead>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0ad      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2bff      	cmp	r3, #255	; 0xff
 800578c:	d90e      	bls.n	80057ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	22ff      	movs	r2, #255	; 0xff
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	b2da      	uxtb	r2, r3
 800579a:	8979      	ldrh	r1, [r7, #10]
 800579c:	4b52      	ldr	r3, [pc, #328]	; (80058e8 <HAL_I2C_Mem_Read+0x22c>)
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fa3d 	bl	8005c24 <I2C_TransferConfig>
 80057aa:	e00f      	b.n	80057cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	8979      	ldrh	r1, [r7, #10]
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_I2C_Mem_Read+0x22c>)
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fa2c 	bl	8005c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2200      	movs	r2, #0
 80057d4:	2104      	movs	r1, #4
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f902 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07c      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d034      	beq.n	800588c <HAL_I2C_Mem_Read+0x1d0>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d130      	bne.n	800588c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8d3 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04d      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2bff      	cmp	r3, #255	; 0xff
 800584c:	d90e      	bls.n	800586c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005858:	b2da      	uxtb	r2, r3
 800585a:	8979      	ldrh	r1, [r7, #10]
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f9dd 	bl	8005c24 <I2C_TransferConfig>
 800586a:	e00f      	b.n	800588c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	8979      	ldrh	r1, [r7, #10]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f9cc 	bl	8005c24 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d19a      	bne.n	80057cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f920 	bl	8005ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e01a      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2220      	movs	r2, #32
 80058b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_I2C_Mem_Read+0x230>)
 80058be:	400b      	ands	r3, r1
 80058c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	80002400 	.word	0x80002400
 80058ec:	fe00e800 	.word	0xfe00e800

080058f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	460b      	mov	r3, r1
 8005904:	813b      	strh	r3, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	8979      	ldrh	r1, [r7, #10]
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <I2C_RequestMemoryRead+0xa4>)
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f984 	bl	8005c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	69b9      	ldr	r1, [r7, #24]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f89d 	bl	8005a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e02c      	b.n	800598a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d105      	bne.n	8005942 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005936:	893b      	ldrh	r3, [r7, #8]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
 8005940:	e015      	b.n	800596e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005942:	893b      	ldrh	r3, [r7, #8]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	b29b      	uxth	r3, r3
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	69b9      	ldr	r1, [r7, #24]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f883 	bl	8005a60 <I2C_WaitOnTXISFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e012      	b.n	800598a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2200      	movs	r2, #0
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f831 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	80002000 	.word	0x80002000

08005998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d103      	bne.n	80059b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d007      	beq.n	80059d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	619a      	str	r2, [r3, #24]
  }
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f0:	e022      	b.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d01e      	beq.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fb fb99 	bl	8001130 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d113      	bne.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e00f      	b.n	8005a58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4013      	ands	r3, r2
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d0cd      	beq.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a6c:	e02c      	b.n	8005ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f870 	bl	8005b58 <I2C_IsAcknowledgeFailed>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e02a      	b.n	8005ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d01e      	beq.n	8005ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fb fb51 	bl	8001130 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d113      	bne.n	8005ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	f043 0220 	orr.w	r2, r3, #32
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e007      	b.n	8005ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d1cb      	bne.n	8005a6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aec:	e028      	b.n	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f830 	bl	8005b58 <I2C_IsAcknowledgeFailed>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e026      	b.n	8005b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fb fb15 	bl	8001130 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d113      	bne.n	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e007      	b.n	8005b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d1cf      	bne.n	8005aee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d151      	bne.n	8005c16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b72:	e022      	b.n	8005bba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d01e      	beq.n	8005bba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7c:	f7fb fad8 	bl	8001130 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <I2C_IsAcknowledgeFailed+0x3a>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d113      	bne.n	8005bba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e02e      	b.n	8005c18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d1d5      	bne.n	8005b74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fedd 	bl	8005998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <I2C_IsAcknowledgeFailed+0xc8>)
 8005bea:	400b      	ands	r3, r1
 8005bec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	f043 0204 	orr.w	r2, r3, #4
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	fe00e800 	.word	0xfe00e800

08005c24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	817b      	strh	r3, [r7, #10]
 8005c32:	4613      	mov	r3, r2
 8005c34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	0d5b      	lsrs	r3, r3, #21
 8005c40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <I2C_TransferConfig+0x58>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	ea02 0103 	and.w	r1, r2, r3
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c54:	7a7b      	ldrb	r3, [r7, #9]
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	03ff63ff 	.word	0x03ff63ff

08005c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d138      	bne.n	8005d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e032      	b.n	8005d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	; 0x24
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d139      	bne.n	8005da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e033      	b.n	8005da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2224      	movs	r2, #36	; 0x24
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00a      	beq.n	8005dda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dc4:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e01f      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e01d      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dda:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 0207 	bic.w	r2, r3, #7
 8005de2:	490f      	ldr	r1, [pc, #60]	; (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dea:	f7fb f9a1 	bl	8001130 <HAL_GetTick>
 8005dee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005df2:	f7fb f99d 	bl	8001130 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e00:	d901      	bls.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e007      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d1ee      	bne.n	8005df2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	58024800 	.word	0x58024800

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e3ff      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8087 	beq.w	8005f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e44:	4b99      	ldr	r3, [pc, #612]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e4e:	4b97      	ldr	r3, [pc, #604]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d007      	beq.n	8005e6a <HAL_RCC_OscConfig+0x46>
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b18      	cmp	r3, #24
 8005e5e:	d110      	bne.n	8005e82 <HAL_RCC_OscConfig+0x5e>
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d10b      	bne.n	8005e82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6a:	4b90      	ldr	r3, [pc, #576]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d06c      	beq.n	8005f50 <HAL_RCC_OscConfig+0x12c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d168      	bne.n	8005f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e3d9      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCC_OscConfig+0x76>
 8005e8c:	4b87      	ldr	r3, [pc, #540]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a86      	ldr	r2, [pc, #536]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	e02e      	b.n	8005ef8 <HAL_RCC_OscConfig+0xd4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x98>
 8005ea2:	4b82      	ldr	r3, [pc, #520]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a81      	ldr	r2, [pc, #516]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b7f      	ldr	r3, [pc, #508]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7e      	ldr	r2, [pc, #504]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e01d      	b.n	8005ef8 <HAL_RCC_OscConfig+0xd4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xbc>
 8005ec6:	4b79      	ldr	r3, [pc, #484]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a78      	ldr	r2, [pc, #480]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b76      	ldr	r3, [pc, #472]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a75      	ldr	r2, [pc, #468]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCC_OscConfig+0xd4>
 8005ee0:	4b72      	ldr	r3, [pc, #456]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a71      	ldr	r2, [pc, #452]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b6f      	ldr	r3, [pc, #444]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a6e      	ldr	r2, [pc, #440]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d013      	beq.n	8005f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fb f916 	bl	8001130 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fb f912 	bl	8001130 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	; 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e38d      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f1a:	4b64      	ldr	r3, [pc, #400]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe4>
 8005f26:	e014      	b.n	8005f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fb f902 	bl	8001130 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fb f8fe 	bl	8001130 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	; 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e379      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f42:	4b5a      	ldr	r3, [pc, #360]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x10c>
 8005f4e:	e000      	b.n	8005f52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80ae 	beq.w	80060bc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f60:	4b52      	ldr	r3, [pc, #328]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6a:	4b50      	ldr	r3, [pc, #320]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_RCC_OscConfig+0x162>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b18      	cmp	r3, #24
 8005f7a:	d13a      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x1ce>
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d135      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f86:	4b49      	ldr	r3, [pc, #292]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_RCC_OscConfig+0x17a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e34b      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9e:	f7fb f8f5 	bl	800118c <HAL_GetREVID>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d817      	bhi.n	8005fdc <HAL_RCC_OscConfig+0x1b8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d108      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x1a2>
 8005fb4:	4b3d      	ldr	r3, [pc, #244]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fbc:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fc4:	e07a      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	031b      	lsls	r3, r3, #12
 8005fd4:	4935      	ldr	r1, [pc, #212]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fda:	e06f      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fdc:	4b33      	ldr	r3, [pc, #204]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	4930      	ldr	r1, [pc, #192]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff0:	e064      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d045      	beq.n	8006086 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f023 0219 	bic.w	r2, r3, #25
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	4929      	ldr	r1, [pc, #164]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fb f890 	bl	8001130 <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006014:	f7fb f88c 	bl	8001130 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e307      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006026:	4b21      	ldr	r3, [pc, #132]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	f7fb f8ab 	bl	800118c <HAL_GetREVID>
 8006036:	4602      	mov	r2, r0
 8006038:	f241 0303 	movw	r3, #4099	; 0x1003
 800603c:	429a      	cmp	r2, r3
 800603e:	d817      	bhi.n	8006070 <HAL_RCC_OscConfig+0x24c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d108      	bne.n	800605a <HAL_RCC_OscConfig+0x236>
 8006048:	4b18      	ldr	r3, [pc, #96]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006056:	6053      	str	r3, [r2, #4]
 8006058:	e030      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	4910      	ldr	r1, [pc, #64]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
 800606e:	e025      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	490b      	ldr	r1, [pc, #44]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	e01a      	b.n	80060bc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <HAL_RCC_OscConfig+0x288>)
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006092:	f7fb f84d 	bl	8001130 <HAL_GetTick>
 8006096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006098:	e00a      	b.n	80060b0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800609a:	f7fb f849 	bl	8001130 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d903      	bls.n	80060b0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e2c4      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
 80060ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060b0:	4ba4      	ldr	r3, [pc, #656]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ee      	bne.n	800609a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80a9 	beq.w	800621c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ca:	4b9e      	ldr	r3, [pc, #632]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060d4:	4b9b      	ldr	r3, [pc, #620]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d007      	beq.n	80060f0 <HAL_RCC_OscConfig+0x2cc>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b18      	cmp	r3, #24
 80060e4:	d13a      	bne.n	800615c <HAL_RCC_OscConfig+0x338>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d135      	bne.n	800615c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f0:	4b94      	ldr	r3, [pc, #592]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_OscConfig+0x2e4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e296      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006108:	f7fb f840 	bl	800118c <HAL_GetREVID>
 800610c:	4602      	mov	r2, r0
 800610e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006112:	429a      	cmp	r2, r3
 8006114:	d817      	bhi.n	8006146 <HAL_RCC_OscConfig+0x322>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	2b20      	cmp	r3, #32
 800611c:	d108      	bne.n	8006130 <HAL_RCC_OscConfig+0x30c>
 800611e:	4b89      	ldr	r3, [pc, #548]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006126:	4a87      	ldr	r2, [pc, #540]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800612c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800612e:	e075      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006130:	4b84      	ldr	r3, [pc, #528]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	069b      	lsls	r3, r3, #26
 800613e:	4981      	ldr	r1, [pc, #516]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006144:	e06a      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006146:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	497b      	ldr	r1, [pc, #492]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006156:	4313      	orrs	r3, r2
 8006158:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800615a:	e05f      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d042      	beq.n	80061ea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006164:	4b77      	ldr	r3, [pc, #476]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a76      	ldr	r2, [pc, #472]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fa ffde 	bl	8001130 <HAL_GetTick>
 8006174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006178:	f7fa ffda 	bl	8001130 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e255      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800618a:	4b6e      	ldr	r3, [pc, #440]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006196:	f7fa fff9 	bl	800118c <HAL_GetREVID>
 800619a:	4602      	mov	r2, r0
 800619c:	f241 0303 	movw	r3, #4099	; 0x1003
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d817      	bhi.n	80061d4 <HAL_RCC_OscConfig+0x3b0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d108      	bne.n	80061be <HAL_RCC_OscConfig+0x39a>
 80061ac:	4b65      	ldr	r3, [pc, #404]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061b4:	4a63      	ldr	r2, [pc, #396]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ba:	6053      	str	r3, [r2, #4]
 80061bc:	e02e      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
 80061be:	4b61      	ldr	r3, [pc, #388]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	069b      	lsls	r3, r3, #26
 80061cc:	495d      	ldr	r1, [pc, #372]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
 80061d2:	e023      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
 80061d4:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	4958      	ldr	r1, [pc, #352]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60cb      	str	r3, [r1, #12]
 80061e8:	e018      	b.n	800621c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061ea:	4b56      	ldr	r3, [pc, #344]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a55      	ldr	r2, [pc, #340]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80061f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fa ff9b 	bl	8001130 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061fe:	f7fa ff97 	bl	8001130 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e212      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006210:	4b4c      	ldr	r3, [pc, #304]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d036      	beq.n	8006296 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d019      	beq.n	8006264 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006230:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	4a43      	ldr	r2, [pc, #268]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006236:	f043 0301 	orr.w	r3, r3, #1
 800623a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fa ff78 	bl	8001130 <HAL_GetTick>
 8006240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006244:	f7fa ff74 	bl	8001130 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1ef      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x420>
 8006262:	e018      	b.n	8006296 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006264:	4b37      	ldr	r3, [pc, #220]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006268:	4a36      	ldr	r2, [pc, #216]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fa ff5e 	bl	8001130 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006278:	f7fa ff5a 	bl	8001130 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1d5      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 800628c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d036      	beq.n	8006310 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d019      	beq.n	80062de <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062aa:	4b26      	ldr	r3, [pc, #152]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a25      	ldr	r2, [pc, #148]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80062b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062b6:	f7fa ff3b 	bl	8001130 <HAL_GetTick>
 80062ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062be:	f7fa ff37 	bl	8001130 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e1b2      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x49a>
 80062dc:	e018      	b.n	8006310 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062de:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 80062e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ea:	f7fa ff21 	bl	8001130 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062f2:	f7fa ff1d 	bl	8001130 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e198      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_RCC_OscConfig+0x520>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f0      	bne.n	80062f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8085 	beq.w	8006428 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <HAL_RCC_OscConfig+0x524>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <HAL_RCC_OscConfig+0x524>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800632a:	f7fa ff01 	bl	8001130 <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006330:	e00c      	b.n	800634c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006332:	f7fa fefd 	bl	8001130 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	; 0x64
 800633e:	d905      	bls.n	800634c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e178      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
 8006344:	58024400 	.word	0x58024400
 8006348:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800634c:	4b96      	ldr	r3, [pc, #600]	; (80065a8 <HAL_RCC_OscConfig+0x784>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0ec      	beq.n	8006332 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0x54a>
 8006360:	4b92      	ldr	r3, [pc, #584]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	4a91      	ldr	r2, [pc, #580]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6713      	str	r3, [r2, #112]	; 0x70
 800636c:	e02d      	b.n	80063ca <HAL_RCC_OscConfig+0x5a6>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0x56c>
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	4a8c      	ldr	r2, [pc, #560]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	6713      	str	r3, [r2, #112]	; 0x70
 8006382:	4b8a      	ldr	r3, [pc, #552]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	4a89      	ldr	r2, [pc, #548]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	6713      	str	r3, [r2, #112]	; 0x70
 800638e:	e01c      	b.n	80063ca <HAL_RCC_OscConfig+0x5a6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b05      	cmp	r3, #5
 8006396:	d10c      	bne.n	80063b2 <HAL_RCC_OscConfig+0x58e>
 8006398:	4b84      	ldr	r3, [pc, #528]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	4a83      	ldr	r2, [pc, #524]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800639e:	f043 0304 	orr.w	r3, r3, #4
 80063a2:	6713      	str	r3, [r2, #112]	; 0x70
 80063a4:	4b81      	ldr	r3, [pc, #516]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	4a80      	ldr	r2, [pc, #512]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6713      	str	r3, [r2, #112]	; 0x70
 80063b0:	e00b      	b.n	80063ca <HAL_RCC_OscConfig+0x5a6>
 80063b2:	4b7e      	ldr	r3, [pc, #504]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	4a7d      	ldr	r2, [pc, #500]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063b8:	f023 0301 	bic.w	r3, r3, #1
 80063bc:	6713      	str	r3, [r2, #112]	; 0x70
 80063be:	4b7b      	ldr	r3, [pc, #492]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	4a7a      	ldr	r2, [pc, #488]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063c4:	f023 0304 	bic.w	r3, r3, #4
 80063c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d015      	beq.n	80063fe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d2:	f7fa fead 	bl	8001130 <HAL_GetTick>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d8:	e00a      	b.n	80063f0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fa fea9 	bl	8001130 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e122      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063f0:	4b6e      	ldr	r3, [pc, #440]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ee      	beq.n	80063da <HAL_RCC_OscConfig+0x5b6>
 80063fc:	e014      	b.n	8006428 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fa fe97 	bl	8001130 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fa fe93 	bl	8001130 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	; 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e10c      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800641c:	4b63      	ldr	r3, [pc, #396]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ee      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8101 	beq.w	8006634 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006432:	4b5e      	ldr	r3, [pc, #376]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643a:	2b18      	cmp	r3, #24
 800643c:	f000 80bc 	beq.w	80065b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b02      	cmp	r3, #2
 8006446:	f040 8095 	bne.w	8006574 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644a:	4b58      	ldr	r3, [pc, #352]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a57      	ldr	r2, [pc, #348]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fa fe6b 	bl	8001130 <HAL_GetTick>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800645e:	f7fa fe67 	bl	8001130 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0e2      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006470:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f0      	bne.n	800645e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647c:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800647e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006480:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <HAL_RCC_OscConfig+0x78c>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800648c:	0112      	lsls	r2, r2, #4
 800648e:	430a      	orrs	r2, r1
 8006490:	4946      	ldr	r1, [pc, #280]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006492:	4313      	orrs	r3, r2
 8006494:	628b      	str	r3, [r1, #40]	; 0x28
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	3b01      	subs	r3, #1
 800649c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	3b01      	subs	r3, #1
 80064a6:	025b      	lsls	r3, r3, #9
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	3b01      	subs	r3, #1
 80064b2:	041b      	lsls	r3, r3, #16
 80064b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	3b01      	subs	r3, #1
 80064c0:	061b      	lsls	r3, r3, #24
 80064c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064c6:	4939      	ldr	r1, [pc, #228]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80064cc:	4b37      	ldr	r3, [pc, #220]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	4a36      	ldr	r2, [pc, #216]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064d8:	4b34      	ldr	r3, [pc, #208]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064dc:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <HAL_RCC_OscConfig+0x790>)
 80064de:	4013      	ands	r3, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064e4:	00d2      	lsls	r2, r2, #3
 80064e6:	4931      	ldr	r1, [pc, #196]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064ec:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f023 020c 	bic.w	r2, r3, #12
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	492c      	ldr	r1, [pc, #176]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064fe:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	f023 0202 	bic.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	4928      	ldr	r1, [pc, #160]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800650c:	4313      	orrs	r3, r2
 800650e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006510:	4b26      	ldr	r3, [pc, #152]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a25      	ldr	r2, [pc, #148]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800652e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800654a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fa fdf0 	bl	8001130 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006554:	f7fa fdec 	bl	8001130 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e067      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x730>
 8006572:	e05f      	b.n	8006634 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0c      	ldr	r2, [pc, #48]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800657a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fa fdd6 	bl	8001130 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006588:	f7fa fdd2 	bl	8001130 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e04d      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <HAL_RCC_OscConfig+0x788>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x764>
 80065a6:	e045      	b.n	8006634 <HAL_RCC_OscConfig+0x810>
 80065a8:	58024800 	.word	0x58024800
 80065ac:	58024400 	.word	0x58024400
 80065b0:	fffffc0c 	.word	0xfffffc0c
 80065b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <HAL_RCC_OscConfig+0x81c>)
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_RCC_OscConfig+0x81c>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d031      	beq.n	8006630 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f003 0203 	and.w	r2, r3, #3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d12a      	bne.n	8006630 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d122      	bne.n	8006630 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d11a      	bne.n	8006630 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	0a5b      	lsrs	r3, r3, #9
 80065fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d111      	bne.n	8006630 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d108      	bne.n	8006630 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	0e1b      	lsrs	r3, r3, #24
 8006622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d001      	beq.n	8006634 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	58024400 	.word	0x58024400

08006644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e19c      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006658:	4b8a      	ldr	r3, [pc, #552]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d910      	bls.n	8006688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006666:	4b87      	ldr	r3, [pc, #540]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 020f 	bic.w	r2, r3, #15
 800666e:	4985      	ldr	r1, [pc, #532]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b83      	ldr	r3, [pc, #524]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e184      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d010      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d908      	bls.n	80066b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066a4:	4b78      	ldr	r3, [pc, #480]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	4975      	ldr	r1, [pc, #468]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	4b70      	ldr	r3, [pc, #448]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d908      	bls.n	80066e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066d2:	4b6d      	ldr	r3, [pc, #436]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	496a      	ldr	r1, [pc, #424]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	4b64      	ldr	r3, [pc, #400]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d908      	bls.n	8006712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006700:	4b61      	ldr	r3, [pc, #388]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	495e      	ldr	r1, [pc, #376]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800670e:	4313      	orrs	r3, r2
 8006710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d010      	beq.n	8006740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69da      	ldr	r2, [r3, #28]
 8006722:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800672a:	429a      	cmp	r2, r3
 800672c:	d908      	bls.n	8006740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800672e:	4b56      	ldr	r3, [pc, #344]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	4953      	ldr	r1, [pc, #332]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800673c:	4313      	orrs	r3, r2
 800673e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	4b4d      	ldr	r3, [pc, #308]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	429a      	cmp	r2, r3
 800675a:	d908      	bls.n	800676e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675c:	4b4a      	ldr	r3, [pc, #296]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f023 020f 	bic.w	r2, r3, #15
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4947      	ldr	r1, [pc, #284]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800676a:	4313      	orrs	r3, r2
 800676c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d055      	beq.n	8006826 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800677a:	4b43      	ldr	r3, [pc, #268]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	4940      	ldr	r1, [pc, #256]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006788:	4313      	orrs	r3, r2
 800678a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006794:	4b3c      	ldr	r3, [pc, #240]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d121      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0f6      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067ac:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d115      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0ea      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067c4:	4b30      	ldr	r3, [pc, #192]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0de      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0d6      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067e4:	4b28      	ldr	r3, [pc, #160]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f023 0207 	bic.w	r2, r3, #7
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4925      	ldr	r1, [pc, #148]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f6:	f7fa fc9b 	bl	8001130 <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067fe:	f7fa fc97 	bl	8001130 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0be      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006814:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	429a      	cmp	r2, r3
 8006824:	d1eb      	bne.n	80067fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d010      	beq.n	8006854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	429a      	cmp	r2, r3
 8006840:	d208      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f023 020f 	bic.w	r2, r3, #15
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	490e      	ldr	r1, [pc, #56]	; (8006888 <HAL_RCC_ClockConfig+0x244>)
 8006850:	4313      	orrs	r3, r2
 8006852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d214      	bcs.n	800688c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 020f 	bic.w	r2, r3, #15
 800686a:	4906      	ldr	r1, [pc, #24]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	4313      	orrs	r3, r2
 8006870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <HAL_RCC_ClockConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d005      	beq.n	800688c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e086      	b.n	8006992 <HAL_RCC_ClockConfig+0x34e>
 8006884:	52002000 	.word	0x52002000
 8006888:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	4b3f      	ldr	r3, [pc, #252]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d208      	bcs.n	80068ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068a8:	4b3c      	ldr	r3, [pc, #240]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4939      	ldr	r1, [pc, #228]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	4b34      	ldr	r3, [pc, #208]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d208      	bcs.n	80068e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068d6:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	492e      	ldr	r1, [pc, #184]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d010      	beq.n	8006916 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006900:	429a      	cmp	r2, r3
 8006902:	d208      	bcs.n	8006916 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006904:	4b25      	ldr	r3, [pc, #148]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	4922      	ldr	r1, [pc, #136]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006912:	4313      	orrs	r3, r2
 8006914:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d010      	beq.n	8006944 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69da      	ldr	r2, [r3, #28]
 8006926:	4b1d      	ldr	r3, [pc, #116]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800692e:	429a      	cmp	r2, r3
 8006930:	d208      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	4917      	ldr	r1, [pc, #92]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006940:	4313      	orrs	r3, r2
 8006942:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006944:	f000 f89e 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006948:	4601      	mov	r1, r0
 800694a:	4b14      	ldr	r3, [pc, #80]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006956:	5cd3      	ldrb	r3, [r2, r3]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	fa21 f303 	lsr.w	r3, r1, r3
 8006960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006962:	4b0e      	ldr	r3, [pc, #56]	; (800699c <HAL_RCC_ClockConfig+0x358>)
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800696c:	5cd3      	ldrb	r3, [r2, r3]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <HAL_RCC_ClockConfig+0x360>)
 800697a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800697c:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_RCC_ClockConfig+0x364>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x368>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f7fa fb88 	bl	800109c <HAL_InitTick>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	08009be8 	.word	0x08009be8
 80069a4:	24000004 	.word	0x24000004
 80069a8:	24000000 	.word	0x24000000
 80069ac:	24000008 	.word	0x24000008

080069b0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12a      	bne.n	8006a18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 80069c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c8:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069d2:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 80069d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80069e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e6:	2302      	movs	r3, #2
 80069e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ea:	2303      	movs	r3, #3
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80069f6:	f107 031c 	add.w	r3, r7, #28
 80069fa:	4619      	mov	r1, r3
 80069fc:	481f      	ldr	r0, [pc, #124]	; (8006a7c <HAL_RCC_MCOConfig+0xcc>)
 80069fe:	f7fe fb0f 	bl	8005020 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	4919      	ldr	r1, [pc, #100]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006a16:	e02a      	b.n	8006a6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a1e:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a28:	4b13      	ldr	r3, [pc, #76]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a40:	2303      	movs	r3, #3
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006a4c:	f107 031c 	add.w	r3, r7, #28
 8006a50:	4619      	mov	r1, r3
 8006a52:	480b      	ldr	r0, [pc, #44]	; (8006a80 <HAL_RCC_MCOConfig+0xd0>)
 8006a54:	f7fe fae4 	bl	8005020 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	01d9      	lsls	r1, r3, #7
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	430b      	orrs	r3, r1
 8006a68:	4903      	ldr	r1, [pc, #12]	; (8006a78 <HAL_RCC_MCOConfig+0xc8>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	610b      	str	r3, [r1, #16]
}
 8006a6e:	bf00      	nop
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	58020000 	.word	0x58020000
 8006a80:	58020800 	.word	0x58020800

08006a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	; 0x24
 8006a88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a8a:	4baf      	ldr	r3, [pc, #700]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a92:	2b18      	cmp	r3, #24
 8006a94:	f200 814e 	bhi.w	8006d34 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006b05 	.word	0x08006b05
 8006aa4:	08006d35 	.word	0x08006d35
 8006aa8:	08006d35 	.word	0x08006d35
 8006aac:	08006d35 	.word	0x08006d35
 8006ab0:	08006d35 	.word	0x08006d35
 8006ab4:	08006d35 	.word	0x08006d35
 8006ab8:	08006d35 	.word	0x08006d35
 8006abc:	08006d35 	.word	0x08006d35
 8006ac0:	08006b2b 	.word	0x08006b2b
 8006ac4:	08006d35 	.word	0x08006d35
 8006ac8:	08006d35 	.word	0x08006d35
 8006acc:	08006d35 	.word	0x08006d35
 8006ad0:	08006d35 	.word	0x08006d35
 8006ad4:	08006d35 	.word	0x08006d35
 8006ad8:	08006d35 	.word	0x08006d35
 8006adc:	08006d35 	.word	0x08006d35
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006d35 	.word	0x08006d35
 8006ae8:	08006d35 	.word	0x08006d35
 8006aec:	08006d35 	.word	0x08006d35
 8006af0:	08006d35 	.word	0x08006d35
 8006af4:	08006d35 	.word	0x08006d35
 8006af8:	08006d35 	.word	0x08006d35
 8006afc:	08006d35 	.word	0x08006d35
 8006b00:	08006b37 	.word	0x08006b37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b04:	4b90      	ldr	r3, [pc, #576]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b10:	4b8d      	ldr	r3, [pc, #564]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	4a8c      	ldr	r2, [pc, #560]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b22:	e10a      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b24:	4b89      	ldr	r3, [pc, #548]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b26:	61bb      	str	r3, [r7, #24]
    break;
 8006b28:	e107      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b2a:	4b89      	ldr	r3, [pc, #548]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b2c:	61bb      	str	r3, [r7, #24]
    break;
 8006b2e:	e104      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b30:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006b32:	61bb      	str	r3, [r7, #24]
    break;
 8006b34:	e101      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b36:	4b84      	ldr	r3, [pc, #528]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b40:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b4c:	4b7e      	ldr	r3, [pc, #504]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b56:	4b7c      	ldr	r3, [pc, #496]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	08db      	lsrs	r3, r3, #3
 8006b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80da 	beq.w	8006d2e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d05a      	beq.n	8006c36 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d302      	bcc.n	8006b8a <HAL_RCC_GetSysClockFreq+0x106>
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d078      	beq.n	8006c7a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006b88:	e099      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b8a:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d02d      	beq.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b96:	4b6c      	ldr	r3, [pc, #432]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	4a6a      	ldr	r2, [pc, #424]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc0:	4b61      	ldr	r3, [pc, #388]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bd4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006bf0:	e087      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006d5c <HAL_RCC_GetSysClockFreq+0x2d8>
 8006c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c04:	4b50      	ldr	r3, [pc, #320]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c14:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c34:	e065      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006d60 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c48:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c78:	e043      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006d64 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8c:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cbc:	e021      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d60 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd0:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d00:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	0a5b      	lsrs	r3, r3, #9
 8006d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d26:	ee17 3a90 	vmov	r3, s15
 8006d2a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d2c:	e005      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61bb      	str	r3, [r7, #24]
    break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006d36:	61bb      	str	r3, [r7, #24]
    break;
 8006d38:	bf00      	nop
  }

  return sysclockfreq;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3724      	adds	r7, #36	; 0x24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	003d0900 	.word	0x003d0900
 8006d54:	01e84800 	.word	0x01e84800
 8006d58:	46000000 	.word	0x46000000
 8006d5c:	4c742400 	.word	0x4c742400
 8006d60:	4a742400 	.word	0x4a742400
 8006d64:	4bf42400 	.word	0x4bf42400

08006d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d6e:	f7ff fe89 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006d72:	4601      	mov	r1, r0
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	4a0f      	ldr	r2, [pc, #60]	; (8006dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8006d80:	5cd3      	ldrb	r3, [r2, r3]
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	fa21 f303 	lsr.w	r3, r1, r3
 8006d8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8006d96:	5cd3      	ldrb	r3, [r2, r3]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006da2:	4a07      	ldr	r2, [pc, #28]	; (8006dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006da4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006da6:	4a07      	ldr	r2, [pc, #28]	; (8006dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dac:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dae:	681b      	ldr	r3, [r3, #0]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	58024400 	.word	0x58024400
 8006dbc:	08009be8 	.word	0x08009be8
 8006dc0:	24000004 	.word	0x24000004
 8006dc4:	24000000 	.word	0x24000000

08006dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006dcc:	f7ff ffcc 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	091b      	lsrs	r3, r3, #4
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	58024400 	.word	0x58024400
 8006df0:	08009be8 	.word	0x08009be8

08006df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006df8:	f7ff ffb6 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e0a:	5cd3      	ldrb	r3, [r2, r3]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	08009be8 	.word	0x08009be8

08006e20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e28:	2300      	movs	r3, #0
 8006e2a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d03d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e44:	d013      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4a:	d802      	bhi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e50:	e01f      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e56:	d013      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e5c:	d01c      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e5e:	e018      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4baf      	ldr	r3, [pc, #700]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4aae      	ldr	r2, [pc, #696]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e6c:	e015      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	2102      	movs	r1, #2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f96f 	bl	8008158 <RCCEx_PLL2_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e7e:	e00c      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3324      	adds	r3, #36	; 0x24
 8006e84:	2102      	movs	r1, #2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fa18 	bl	80082bc <RCCEx_PLL3_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
      break;
 8006e96:	e000      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d109      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ea0:	4b9f      	ldr	r3, [pc, #636]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eac:	499c      	ldr	r1, [pc, #624]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8006eb2:	e001      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d03d      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d826      	bhi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006ee9 	.word	0x08006ee9
 8006ed8:	08006ef7 	.word	0x08006ef7
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	08006f21 	.word	0x08006f21
 8006ee4:	08006f21 	.word	0x08006f21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a8c      	ldr	r2, [pc, #560]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ef4:	e015      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 f92b 	bl	8008158 <RCCEx_PLL2_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f06:	e00c      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3324      	adds	r3, #36	; 0x24
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f9d4 	bl	80082bc <RCCEx_PLL3_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f18:	e003      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f28:	4b7d      	ldr	r3, [pc, #500]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2c:	f023 0207 	bic.w	r2, r3, #7
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	497a      	ldr	r1, [pc, #488]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	650b      	str	r3, [r1, #80]	; 0x50
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d03e      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d01c      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f54:	2b80      	cmp	r3, #128	; 0x80
 8006f56:	d804      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d00d      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f60:	e01e      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006f62:	2bc0      	cmp	r3, #192	; 0xc0
 8006f64:	d01f      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6a:	d01e      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f6c:	e018      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	4a6b      	ldr	r2, [pc, #428]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f7a:	e017      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f8e8 	bl	8008158 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f8c:	e00e      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3324      	adds	r3, #36	; 0x24
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 f991 	bl	80082bc <RCCEx_PLL3_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f9e:	e005      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa4:	e002      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e000      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fb2:	4b5b      	ldr	r3, [pc, #364]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	4958      	ldr	r1, [pc, #352]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	650b      	str	r3, [r1, #80]	; 0x50
 8006fc4:	e001      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d044      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe0:	d01f      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe6:	d805      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ff0:	d00e      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006ff2:	e01f      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ff8:	d01f      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ffe:	d01e      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007000:	e018      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007002:	4b47      	ldr	r3, [pc, #284]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	4a46      	ldr	r2, [pc, #280]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800700e:	e017      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f89e 	bl	8008158 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007020:	e00e      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3324      	adds	r3, #36	; 0x24
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f947 	bl	80082bc <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007032:	e005      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	75fb      	strb	r3, [r7, #23]
      break;
 8007038:	e002      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800703a:	bf00      	nop
 800703c:	e000      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800703e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007054:	4932      	ldr	r1, [pc, #200]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007056:	4313      	orrs	r3, r2
 8007058:	658b      	str	r3, [r1, #88]	; 0x58
 800705a:	e001      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007068:	2b00      	cmp	r3, #0
 800706a:	d044      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007076:	d01f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800707c:	d805      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007086:	d00e      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007088:	e01f      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800708a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800708e:	d01f      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007094:	d01e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007096:	e018      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007098:	4b21      	ldr	r3, [pc, #132]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a20      	ldr	r2, [pc, #128]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800709e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070a4:	e017      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 f853 	bl	8008158 <RCCEx_PLL2_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070b6:	e00e      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3324      	adds	r3, #36	; 0x24
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 f8fc 	bl	80082bc <RCCEx_PLL3_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c8:	e005      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070ea:	490d      	ldr	r1, [pc, #52]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	658b      	str	r3, [r1, #88]	; 0x58
 80070f0:	e001      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d035      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	2b10      	cmp	r3, #16
 8007108:	d00c      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800710a:	2b10      	cmp	r3, #16
 800710c:	d802      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01b      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007112:	e017      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007114:	2b20      	cmp	r3, #32
 8007116:	d00c      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007118:	2b30      	cmp	r3, #48	; 0x30
 800711a:	d018      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800711c:	e012      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007124:	4baf      	ldr	r3, [pc, #700]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	4aae      	ldr	r2, [pc, #696]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800712a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800712e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007130:	e00e      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3304      	adds	r3, #4
 8007136:	2102      	movs	r1, #2
 8007138:	4618      	mov	r0, r3
 800713a:	f001 f80d 	bl	8008158 <RCCEx_PLL2_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007142:	e005      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]
      break;
 8007148:	e002      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800714e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007156:	4ba3      	ldr	r3, [pc, #652]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	49a0      	ldr	r1, [pc, #640]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007164:	4313      	orrs	r3, r2
 8007166:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007168:	e001      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d042      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	d01f      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007188:	d805      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d00e      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007194:	e01f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800719a:	d01f      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800719c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a0:	d01e      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80071a2:	e018      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a4:	4b8f      	ldr	r3, [pc, #572]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4a8e      	ldr	r2, [pc, #568]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071b0:	e017      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 ffcd 	bl	8008158 <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071c2:	e00e      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3324      	adds	r3, #36	; 0x24
 80071c8:	2100      	movs	r1, #0
 80071ca:	4618      	mov	r0, r3
 80071cc:	f001 f876 	bl	80082bc <RCCEx_PLL3_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071d4:	e005      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
      break;
 80071da:	e002      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071e8:	4b7e      	ldr	r3, [pc, #504]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f4:	497b      	ldr	r1, [pc, #492]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	650b      	str	r3, [r1, #80]	; 0x50
 80071fa:	e001      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d042      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007214:	d01b      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721a:	d805      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d022      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007226:	e01b      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800722c:	d01d      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800722e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007232:	d01c      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007238:	d01b      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800723a:	e011      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	2101      	movs	r1, #1
 8007242:	4618      	mov	r0, r3
 8007244:	f000 ff88 	bl	8008158 <RCCEx_PLL2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800724c:	e012      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3324      	adds	r3, #36	; 0x24
 8007252:	2101      	movs	r1, #1
 8007254:	4618      	mov	r0, r3
 8007256:	f001 f831 	bl	80082bc <RCCEx_PLL3_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800725e:	e009      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	e006      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007266:	bf00      	nop
 8007268:	e004      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800727a:	4b5a      	ldr	r3, [pc, #360]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800727c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007286:	4957      	ldr	r1, [pc, #348]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007288:	4313      	orrs	r3, r2
 800728a:	650b      	str	r3, [r1, #80]	; 0x50
 800728c:	e001      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d044      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a8:	d01b      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80072aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ae:	d805      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d022      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b8:	d00a      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072ba:	e01b      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80072bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c0:	d01d      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c6:	d01c      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80072c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072cc:	d01b      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072ce:	e011      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2101      	movs	r1, #1
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 ff3e 	bl	8008158 <RCCEx_PLL2_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072e0:	e012      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	2101      	movs	r1, #1
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 ffe7 	bl	80082bc <RCCEx_PLL3_Config>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072f2:	e009      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800730e:	4b35      	ldr	r3, [pc, #212]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800731c:	4931      	ldr	r1, [pc, #196]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800731e:	4313      	orrs	r3, r2
 8007320:	658b      	str	r3, [r1, #88]	; 0x58
 8007322:	e001      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02d      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800733c:	d005      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d013      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007348:	e00f      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4a25      	ldr	r2, [pc, #148]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007356:	e00c      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fefa 	bl	8008158 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	75fb      	strb	r3, [r7, #23]
      break;
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007378:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007384:	4917      	ldr	r1, [pc, #92]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007386:	4313      	orrs	r3, r2
 8007388:	650b      	str	r3, [r1, #80]	; 0x50
 800738a:	e001      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d035      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d81b      	bhi.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073e9 	.word	0x080073e9
 80073b0:	080073bd 	.word	0x080073bd
 80073b4:	080073cb 	.word	0x080073cb
 80073b8:	080073e9 	.word	0x080073e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4a08      	ldr	r2, [pc, #32]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073c8:	e00f      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	2102      	movs	r1, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fec1 	bl	8008158 <RCCEx_PLL2_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073da:	e006      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
      break;
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80073e2:	bf00      	nop
 80073e4:	58024400 	.word	0x58024400
      break;
 80073e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073f0:	4bba      	ldr	r3, [pc, #744]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f4:	f023 0203 	bic.w	r2, r3, #3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	49b7      	ldr	r1, [pc, #732]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007402:	e001      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8086 	beq.w	8007522 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007416:	4bb2      	ldr	r3, [pc, #712]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4ab1      	ldr	r2, [pc, #708]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800741c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007422:	f7f9 fe85 	bl	8001130 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007428:	e009      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800742a:	f7f9 fe81 	bl	8001130 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b64      	cmp	r3, #100	; 0x64
 8007436:	d902      	bls.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	75fb      	strb	r3, [r7, #23]
        break;
 800743c:	e005      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800743e:	4ba8      	ldr	r3, [pc, #672]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ef      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d166      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007450:	4ba2      	ldr	r3, [pc, #648]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800745a:	4053      	eors	r3, r2
 800745c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007460:	2b00      	cmp	r3, #0
 8007462:	d013      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007464:	4b9d      	ldr	r3, [pc, #628]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800746e:	4b9b      	ldr	r3, [pc, #620]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	4a9a      	ldr	r2, [pc, #616]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007478:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800747a:	4b98      	ldr	r3, [pc, #608]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	4a97      	ldr	r2, [pc, #604]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007484:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007486:	4a95      	ldr	r2, [pc, #596]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007496:	d115      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7f9 fe4a 	bl	8001130 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800749e:	e00b      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a0:	f7f9 fe46 	bl	8001130 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d902      	bls.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	75fb      	strb	r3, [r7, #23]
            break;
 80074b6:	e005      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b8:	4b88      	ldr	r3, [pc, #544]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0ed      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d126      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d8:	d10d      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80074da:	4b80      	ldr	r3, [pc, #512]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074e8:	0919      	lsrs	r1, r3, #4
 80074ea:	4b7e      	ldr	r3, [pc, #504]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80074ec:	400b      	ands	r3, r1
 80074ee:	497b      	ldr	r1, [pc, #492]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]
 80074f4:	e005      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80074f6:	4b79      	ldr	r3, [pc, #484]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4a78      	ldr	r2, [pc, #480]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007500:	6113      	str	r3, [r2, #16]
 8007502:	4b76      	ldr	r3, [pc, #472]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800750c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007510:	4972      	ldr	r1, [pc, #456]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007512:	4313      	orrs	r3, r2
 8007514:	670b      	str	r3, [r1, #112]	; 0x70
 8007516:	e004      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	75bb      	strb	r3, [r7, #22]
 800751c:	e001      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d07d      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007532:	2b28      	cmp	r3, #40	; 0x28
 8007534:	d866      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	0800760b 	.word	0x0800760b
 8007540:	08007605 	.word	0x08007605
 8007544:	08007605 	.word	0x08007605
 8007548:	08007605 	.word	0x08007605
 800754c:	08007605 	.word	0x08007605
 8007550:	08007605 	.word	0x08007605
 8007554:	08007605 	.word	0x08007605
 8007558:	08007605 	.word	0x08007605
 800755c:	080075e1 	.word	0x080075e1
 8007560:	08007605 	.word	0x08007605
 8007564:	08007605 	.word	0x08007605
 8007568:	08007605 	.word	0x08007605
 800756c:	08007605 	.word	0x08007605
 8007570:	08007605 	.word	0x08007605
 8007574:	08007605 	.word	0x08007605
 8007578:	08007605 	.word	0x08007605
 800757c:	080075f3 	.word	0x080075f3
 8007580:	08007605 	.word	0x08007605
 8007584:	08007605 	.word	0x08007605
 8007588:	08007605 	.word	0x08007605
 800758c:	08007605 	.word	0x08007605
 8007590:	08007605 	.word	0x08007605
 8007594:	08007605 	.word	0x08007605
 8007598:	08007605 	.word	0x08007605
 800759c:	0800760b 	.word	0x0800760b
 80075a0:	08007605 	.word	0x08007605
 80075a4:	08007605 	.word	0x08007605
 80075a8:	08007605 	.word	0x08007605
 80075ac:	08007605 	.word	0x08007605
 80075b0:	08007605 	.word	0x08007605
 80075b4:	08007605 	.word	0x08007605
 80075b8:	08007605 	.word	0x08007605
 80075bc:	0800760b 	.word	0x0800760b
 80075c0:	08007605 	.word	0x08007605
 80075c4:	08007605 	.word	0x08007605
 80075c8:	08007605 	.word	0x08007605
 80075cc:	08007605 	.word	0x08007605
 80075d0:	08007605 	.word	0x08007605
 80075d4:	08007605 	.word	0x08007605
 80075d8:	08007605 	.word	0x08007605
 80075dc:	0800760b 	.word	0x0800760b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	2101      	movs	r1, #1
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fdb6 	bl	8008158 <RCCEx_PLL2_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075f0:	e00c      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3324      	adds	r3, #36	; 0x24
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fe5f 	bl	80082bc <RCCEx_PLL3_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007602:	e003      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800760a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007612:	4b32      	ldr	r3, [pc, #200]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761e:	492f      	ldr	r1, [pc, #188]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	654b      	str	r3, [r1, #84]	; 0x54
 8007624:	e001      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d037      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763a:	2b05      	cmp	r3, #5
 800763c:	d820      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007687 	.word	0x08007687
 8007648:	0800765d 	.word	0x0800765d
 800764c:	0800766f 	.word	0x0800766f
 8007650:	08007687 	.word	0x08007687
 8007654:	08007687 	.word	0x08007687
 8007658:	08007687 	.word	0x08007687
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	2101      	movs	r1, #1
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fd78 	bl	8008158 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800766c:	e00c      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	2101      	movs	r1, #1
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fe21 	bl	80082bc <RCCEx_PLL3_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
      break;
 8007684:	e000      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	f023 0207 	bic.w	r2, r3, #7
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769a:	4910      	ldr	r1, [pc, #64]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800769c:	4313      	orrs	r3, r2
 800769e:	654b      	str	r3, [r1, #84]	; 0x54
 80076a0:	e001      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d040      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	d827      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	08007713 	.word	0x08007713
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076fb 	.word	0x080076fb
 80076d0:	08007713 	.word	0x08007713
 80076d4:	08007713 	.word	0x08007713
 80076d8:	08007713 	.word	0x08007713
 80076dc:	58024400 	.word	0x58024400
 80076e0:	58024800 	.word	0x58024800
 80076e4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	2101      	movs	r1, #1
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fd32 	bl	8008158 <RCCEx_PLL2_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076f8:	e00c      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3324      	adds	r3, #36	; 0x24
 80076fe:	2101      	movs	r1, #1
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fddb 	bl	80082bc <RCCEx_PLL3_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800770a:	e003      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
      break;
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800771a:	4bb2      	ldr	r3, [pc, #712]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f023 0207 	bic.w	r2, r3, #7
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	49ae      	ldr	r1, [pc, #696]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800772a:	4313      	orrs	r3, r2
 800772c:	658b      	str	r3, [r1, #88]	; 0x58
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d044      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774a:	d01b      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800774c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007750:	d805      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d022      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775a:	d00a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800775c:	e01b      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007762:	d01d      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007768:	d01c      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800776a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800776e:	d01b      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007770:	e011      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	2100      	movs	r1, #0
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fced 	bl	8008158 <RCCEx_PLL2_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007782:	e012      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3324      	adds	r3, #36	; 0x24
 8007788:	2102      	movs	r1, #2
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fd96 	bl	80082bc <RCCEx_PLL3_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007794:	e009      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
      break;
 800779a:	e006      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800779c:	bf00      	nop
 800779e:	e004      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077a0:	bf00      	nop
 80077a2:	e002      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077b0:	4b8c      	ldr	r3, [pc, #560]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077be:	4989      	ldr	r1, [pc, #548]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	654b      	str	r3, [r1, #84]	; 0x54
 80077c4:	e001      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d044      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e0:	d01b      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e6:	d805      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d022      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f0:	d00a      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80077f2:	e01b      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	d01d      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80077fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077fe:	d01c      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007804:	d01b      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007806:	e011      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fca2 	bl	8008158 <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007818:	e012      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3324      	adds	r3, #36	; 0x24
 800781e:	2102      	movs	r1, #2
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fd4b 	bl	80082bc <RCCEx_PLL3_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800782a:	e009      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	e006      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007832:	bf00      	nop
 8007834:	e004      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007836:	bf00      	nop
 8007838:	e002      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800783e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007846:	4b67      	ldr	r3, [pc, #412]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007854:	4963      	ldr	r1, [pc, #396]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	658b      	str	r3, [r1, #88]	; 0x58
 800785a:	e001      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	2b00      	cmp	r3, #0
 800786a:	d044      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007876:	d01b      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800787c:	d805      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d022      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007886:	d00a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007888:	e01b      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800788a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788e:	d01d      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007890:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007894:	d01c      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007896:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800789a:	d01b      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800789c:	e011      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3304      	adds	r3, #4
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fc57 	bl	8008158 <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078ae:	e012      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3324      	adds	r3, #36	; 0x24
 80078b4:	2102      	movs	r1, #2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd00 	bl	80082bc <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078c0:	e009      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
      break;
 80078c6:	e006      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078c8:	bf00      	nop
 80078ca:	e004      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078cc:	bf00      	nop
 80078ce:	e002      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078d0:	bf00      	nop
 80078d2:	e000      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078dc:	4b41      	ldr	r3, [pc, #260]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078ea:	493e      	ldr	r1, [pc, #248]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	658b      	str	r3, [r1, #88]	; 0x58
 80078f0:	e001      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790c:	d10a      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3324      	adds	r3, #36	; 0x24
 8007912:	2102      	movs	r1, #2
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fcd1 	bl	80082bc <RCCEx_PLL3_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007924:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007932:	492c      	ldr	r1, [pc, #176]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007934:	4313      	orrs	r3, r2
 8007936:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01a      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800794a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794e:	d10a      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fcb0 	bl	80082bc <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007966:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007974:	491b      	ldr	r1, [pc, #108]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d032      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800798c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007990:	d00d      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007996:	d016      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d111      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fbd8 	bl	8008158 <RCCEx_PLL2_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079ac:	e00c      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3324      	adds	r3, #36	; 0x24
 80079b2:	2102      	movs	r1, #2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fc81 	bl	80082bc <RCCEx_PLL3_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
      break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80079c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10c      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079dc:	4901      	ldr	r1, [pc, #4]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	658b      	str	r3, [r1, #88]	; 0x58
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80079e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02f      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a02:	d00c      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a08:	d015      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d10f      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a10:	4b79      	ldr	r3, [pc, #484]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a78      	ldr	r2, [pc, #480]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a1c:	e00c      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3324      	adds	r3, #36	; 0x24
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fc49 	bl	80082bc <RCCEx_PLL3_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a2e:	e003      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
      break;
 8007a34:	e000      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a3e:	4b6e      	ldr	r3, [pc, #440]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4c:	496a      	ldr	r1, [pc, #424]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	654b      	str	r3, [r1, #84]	; 0x54
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d029      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d007      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007a72:	e00f      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a74:	4b60      	ldr	r3, [pc, #384]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	4a5f      	ldr	r2, [pc, #380]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a80:	e00b      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3304      	adds	r3, #4
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fb65 	bl	8008158 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
      break;
 8007a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007aa0:	4b55      	ldr	r3, [pc, #340]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aac:	4952      	ldr	r1, [pc, #328]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ab2:	e001      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3324      	adds	r3, #36	; 0x24
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fbf6 	bl	80082bc <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d02f      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aee:	d00c      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	d802      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007afa:	e00d      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b00:	d00f      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b06:	d00e      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007b08:	e006      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0a:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b16:	e007      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1c:	e004      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b2e:	4b32      	ldr	r3, [pc, #200]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3a:	492f      	ldr	r1, [pc, #188]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b40:	e001      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b52:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	4926      	ldr	r1, [pc, #152]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b70:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b7e:	491e      	ldr	r1, [pc, #120]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b90:	4b19      	ldr	r3, [pc, #100]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9c:	4916      	ldr	r1, [pc, #88]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	4a11      	ldr	r2, [pc, #68]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bb8:	6113      	str	r3, [r2, #16]
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bc4:	490c      	ldr	r1, [pc, #48]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da08      	bge.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	4906      	ldr	r1, [pc, #24]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	58024400 	.word	0x58024400

08007bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c00:	f7ff f8b2 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8007c04:	4601      	mov	r1, r0
 8007c06:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c12:	5cd3      	ldrb	r3, [r2, r3]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	58024400 	.word	0x58024400
 8007c24:	08009be8 	.word	0x08009be8

08007c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c30:	4b9d      	ldr	r3, [pc, #628]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007c3a:	4b9b      	ldr	r3, [pc, #620]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	0b1b      	lsrs	r3, r3, #12
 8007c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c46:	4b98      	ldr	r3, [pc, #608]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	091b      	lsrs	r3, r3, #4
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c52:	4b95      	ldr	r3, [pc, #596]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c56:	08db      	lsrs	r3, r3, #3
 8007c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	fb02 f303 	mul.w	r3, r2, r3
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 810a 	beq.w	8007e8a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d05a      	beq.n	8007d32 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d302      	bcc.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d078      	beq.n	8007d76 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007c84:	e099      	b.n	8007dba <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c86:	4b88      	ldr	r3, [pc, #544]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d02d      	beq.n	8007cee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c92:	4b85      	ldr	r3, [pc, #532]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	08db      	lsrs	r3, r3, #3
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	4a83      	ldr	r2, [pc, #524]	; (8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	ee07 3a90 	vmov	s15, r3
 8007cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbc:	4b7a      	ldr	r3, [pc, #488]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cec:	e087      	b.n	8007dfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d00:	4b69      	ldr	r3, [pc, #420]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d30:	e065      	b.n	8007dfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d44:	4b58      	ldr	r3, [pc, #352]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d74:	e043      	b.n	8007dfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d88:	4b47      	ldr	r3, [pc, #284]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db8:	e021      	b.n	8007dfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dcc:	4b36      	ldr	r3, [pc, #216]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	ee07 3a90 	vmov	s15, r3
 8007dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dfc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007dfe:	4b2a      	ldr	r3, [pc, #168]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	0a5b      	lsrs	r3, r3, #9
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e24:	ee17 2a90 	vmov	r2, s15
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007e2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e52:	ee17 2a90 	vmov	r2, s15
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e5a:	4b13      	ldr	r3, [pc, #76]	; (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	0e1b      	lsrs	r3, r3, #24
 8007e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e80:	ee17 2a90 	vmov	r2, s15
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e88:	e008      	b.n	8007e9c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	609a      	str	r2, [r3, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	3724      	adds	r7, #36	; 0x24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	58024400 	.word	0x58024400
 8007eac:	03d09000 	.word	0x03d09000
 8007eb0:	46000000 	.word	0x46000000
 8007eb4:	4c742400 	.word	0x4c742400
 8007eb8:	4a742400 	.word	0x4a742400
 8007ebc:	4bf42400 	.word	0x4bf42400

08007ec0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b089      	sub	sp, #36	; 0x24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec8:	4b9d      	ldr	r3, [pc, #628]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	0d1b      	lsrs	r3, r3, #20
 8007ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007edc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ede:	4b98      	ldr	r3, [pc, #608]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007eea:	4b95      	ldr	r3, [pc, #596]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	fb02 f303 	mul.w	r3, r2, r3
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 810a 	beq.w	8008122 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d05a      	beq.n	8007fca <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d302      	bcc.n	8007f1e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d078      	beq.n	800800e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007f1c:	e099      	b.n	8008052 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f1e:	4b88      	ldr	r3, [pc, #544]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d02d      	beq.n	8007f86 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f2a:	4b85      	ldr	r3, [pc, #532]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	08db      	lsrs	r3, r3, #3
 8007f30:	f003 0303 	and.w	r3, r3, #3
 8007f34:	4a83      	ldr	r2, [pc, #524]	; (8008144 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007f36:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f54:	4b7a      	ldr	r3, [pc, #488]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f68:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f84:	e087      	b.n	8008096 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800814c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f98:	4b69      	ldr	r3, [pc, #420]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fc8:	e065      	b.n	8008096 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	ee07 3a90 	vmov	s15, r3
 8007fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fdc:	4b58      	ldr	r3, [pc, #352]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800800c:	e043      	b.n	8008096 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800801c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008020:	4b47      	ldr	r3, [pc, #284]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008030:	ed97 6a03 	vldr	s12, [r7, #12]
 8008034:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008050:	e021      	b.n	8008096 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	ee07 3a90 	vmov	s15, r3
 8008058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008074:	ed97 6a03 	vldr	s12, [r7, #12]
 8008078:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800807c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008090:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008094:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008096:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	0a5b      	lsrs	r3, r3, #9
 800809c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080bc:	ee17 2a90 	vmov	r2, s15
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80080c4:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	0c1b      	lsrs	r3, r3, #16
 80080ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080de:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ea:	ee17 2a90 	vmov	r2, s15
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008118:	ee17 2a90 	vmov	r2, s15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008120:	e008      	b.n	8008134 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	609a      	str	r2, [r3, #8]
}
 8008134:	bf00      	nop
 8008136:	3724      	adds	r7, #36	; 0x24
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	58024400 	.word	0x58024400
 8008144:	03d09000 	.word	0x03d09000
 8008148:	46000000 	.word	0x46000000
 800814c:	4c742400 	.word	0x4c742400
 8008150:	4a742400 	.word	0x4a742400
 8008154:	4bf42400 	.word	0x4bf42400

08008158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008166:	4b53      	ldr	r3, [pc, #332]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d101      	bne.n	8008176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e099      	b.n	80082aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008176:	4b4f      	ldr	r3, [pc, #316]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a4e      	ldr	r2, [pc, #312]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800817c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008182:	f7f8 ffd5 	bl	8001130 <HAL_GetTick>
 8008186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008188:	e008      	b.n	800819c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800818a:	f7f8 ffd1 	bl	8001130 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e086      	b.n	80082aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800819c:	4b45      	ldr	r3, [pc, #276]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081a8:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	031b      	lsls	r3, r3, #12
 80081b6:	493f      	ldr	r1, [pc, #252]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	628b      	str	r3, [r1, #40]	; 0x28
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	025b      	lsls	r3, r3, #9
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081ec:	4931      	ldr	r1, [pc, #196]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081f2:	4b30      	ldr	r3, [pc, #192]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	492d      	ldr	r1, [pc, #180]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008204:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f023 0220 	bic.w	r2, r3, #32
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4928      	ldr	r1, [pc, #160]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008216:	4b27      	ldr	r3, [pc, #156]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	4a26      	ldr	r2, [pc, #152]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800821c:	f023 0310 	bic.w	r3, r3, #16
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <RCCEx_PLL2_Config+0x160>)
 8008228:	4013      	ands	r3, r2
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	69d2      	ldr	r2, [r2, #28]
 800822e:	00d2      	lsls	r2, r2, #3
 8008230:	4920      	ldr	r1, [pc, #128]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008236:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800823c:	f043 0310 	orr.w	r3, r3, #16
 8008240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008248:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800824e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008254:	e00f      	b.n	8008276 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d106      	bne.n	800826a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800825c:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	4a14      	ldr	r2, [pc, #80]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008268:	e005      	b.n	8008276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	4a11      	ldr	r2, [pc, #68]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a0e      	ldr	r2, [pc, #56]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800827c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008282:	f7f8 ff55 	bl	8001130 <HAL_GetTick>
 8008286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008288:	e008      	b.n	800829c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800828a:	f7f8 ff51 	bl	8001130 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e006      	b.n	80082aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0f0      	beq.n	800828a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
 80082b8:	ffff0007 	.word	0xffff0007

080082bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ca:	4b53      	ldr	r3, [pc, #332]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d101      	bne.n	80082da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e099      	b.n	800840e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082da:	4b4f      	ldr	r3, [pc, #316]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a4e      	ldr	r2, [pc, #312]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e6:	f7f8 ff23 	bl	8001130 <HAL_GetTick>
 80082ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082ec:	e008      	b.n	8008300 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082ee:	f7f8 ff1f 	bl	8001130 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e086      	b.n	800840e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008300:	4b45      	ldr	r3, [pc, #276]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f0      	bne.n	80082ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800830c:	4b42      	ldr	r3, [pc, #264]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	493f      	ldr	r1, [pc, #252]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 800831c:	4313      	orrs	r3, r2
 800831e:	628b      	str	r3, [r1, #40]	; 0x28
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	3b01      	subs	r3, #1
 8008326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	025b      	lsls	r3, r3, #9
 8008332:	b29b      	uxth	r3, r3
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	3b01      	subs	r3, #1
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	3b01      	subs	r3, #1
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008350:	4931      	ldr	r1, [pc, #196]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008352:	4313      	orrs	r3, r2
 8008354:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008356:	4b30      	ldr	r3, [pc, #192]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	492d      	ldr	r1, [pc, #180]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008368:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	4928      	ldr	r1, [pc, #160]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008376:	4313      	orrs	r3, r2
 8008378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800837a:	4b27      	ldr	r3, [pc, #156]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	4a26      	ldr	r2, [pc, #152]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <RCCEx_PLL3_Config+0x160>)
 800838c:	4013      	ands	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	69d2      	ldr	r2, [r2, #28]
 8008392:	00d2      	lsls	r2, r2, #3
 8008394:	4920      	ldr	r1, [pc, #128]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800839a:	4b1f      	ldr	r3, [pc, #124]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d106      	bne.n	80083ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4a19      	ldr	r2, [pc, #100]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083b8:	e00f      	b.n	80083da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d106      	bne.n	80083ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c0:	4b15      	ldr	r3, [pc, #84]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a14      	ldr	r2, [pc, #80]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083cc:	e005      	b.n	80083da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	4a11      	ldr	r2, [pc, #68]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083e6:	f7f8 fea3 	bl	8001130 <HAL_GetTick>
 80083ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083ec:	e008      	b.n	8008400 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083ee:	f7f8 fe9f 	bl	8001130 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e006      	b.n	800840e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0f0      	beq.n	80083ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
 800841c:	ffff0007 	.word	0xffff0007

08008420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e042      	b.n	80084b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7f8 fd79 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2224      	movs	r2, #36	; 0x24
 800844e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8c2 	bl	80085ec <UART_SetConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e022      	b.n	80084b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fe66 	bl	800914c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 feed 	bl	8009290 <UART_CheckIdleState>
 80084b6:	4603      	mov	r3, r0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	f040 8083 	bne.w	80085e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_UART_Transmit+0x28>
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e07b      	b.n	80085e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_UART_Transmit+0x3a>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e074      	b.n	80085e4 <HAL_UART_Transmit+0x124>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2221      	movs	r2, #33	; 0x21
 800850e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008512:	f7f8 fe0d 	bl	8001130 <HAL_GetTick>
 8008516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008530:	d108      	bne.n	8008544 <HAL_UART_Transmit+0x84>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	e003      	b.n	800854c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008554:	e02c      	b.n	80085b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fedd 	bl	8009320 <UART_WaitOnFlagUntilTimeout>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e039      	b.n	80085e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10b      	bne.n	800858e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	3302      	adds	r3, #2
 800858a:	61bb      	str	r3, [r7, #24]
 800858c:	e007      	b.n	800859e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	3301      	adds	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1cc      	bne.n	8008556 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2200      	movs	r2, #0
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 feaa 	bl	8009320 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e006      	b.n	80085e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
  }
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80085f0:	b08e      	sub	sp, #56	; 0x38
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	4313      	orrs	r3, r2
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800861a:	4313      	orrs	r3, r2
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4bc1      	ldr	r3, [pc, #772]	; (800892c <UART_SetConfig+0x340>)
 8008626:	4013      	ands	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800862e:	430b      	orrs	r3, r1
 8008630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4ab7      	ldr	r2, [pc, #732]	; (8008930 <UART_SetConfig+0x344>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800865e:	4313      	orrs	r3, r2
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	4bb2      	ldr	r3, [pc, #712]	; (8008934 <UART_SetConfig+0x348>)
 800866a:	4013      	ands	r3, r2
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008672:	430b      	orrs	r3, r1
 8008674:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f023 010f 	bic.w	r1, r3, #15
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4aa9      	ldr	r2, [pc, #676]	; (8008938 <UART_SetConfig+0x34c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d177      	bne.n	8008786 <UART_SetConfig+0x19a>
 8008696:	4ba9      	ldr	r3, [pc, #676]	; (800893c <UART_SetConfig+0x350>)
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869e:	2b28      	cmp	r3, #40	; 0x28
 80086a0:	d86c      	bhi.n	800877c <UART_SetConfig+0x190>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <UART_SetConfig+0xbc>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	0800874d 	.word	0x0800874d
 80086ac:	0800877d 	.word	0x0800877d
 80086b0:	0800877d 	.word	0x0800877d
 80086b4:	0800877d 	.word	0x0800877d
 80086b8:	0800877d 	.word	0x0800877d
 80086bc:	0800877d 	.word	0x0800877d
 80086c0:	0800877d 	.word	0x0800877d
 80086c4:	0800877d 	.word	0x0800877d
 80086c8:	08008755 	.word	0x08008755
 80086cc:	0800877d 	.word	0x0800877d
 80086d0:	0800877d 	.word	0x0800877d
 80086d4:	0800877d 	.word	0x0800877d
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	0800877d 	.word	0x0800877d
 80086e0:	0800877d 	.word	0x0800877d
 80086e4:	0800877d 	.word	0x0800877d
 80086e8:	0800875d 	.word	0x0800875d
 80086ec:	0800877d 	.word	0x0800877d
 80086f0:	0800877d 	.word	0x0800877d
 80086f4:	0800877d 	.word	0x0800877d
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	0800877d 	.word	0x0800877d
 8008700:	0800877d 	.word	0x0800877d
 8008704:	0800877d 	.word	0x0800877d
 8008708:	08008765 	.word	0x08008765
 800870c:	0800877d 	.word	0x0800877d
 8008710:	0800877d 	.word	0x0800877d
 8008714:	0800877d 	.word	0x0800877d
 8008718:	0800877d 	.word	0x0800877d
 800871c:	0800877d 	.word	0x0800877d
 8008720:	0800877d 	.word	0x0800877d
 8008724:	0800877d 	.word	0x0800877d
 8008728:	0800876d 	.word	0x0800876d
 800872c:	0800877d 	.word	0x0800877d
 8008730:	0800877d 	.word	0x0800877d
 8008734:	0800877d 	.word	0x0800877d
 8008738:	0800877d 	.word	0x0800877d
 800873c:	0800877d 	.word	0x0800877d
 8008740:	0800877d 	.word	0x0800877d
 8008744:	0800877d 	.word	0x0800877d
 8008748:	08008775 	.word	0x08008775
 800874c:	2301      	movs	r3, #1
 800874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008752:	e233      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008754:	2304      	movs	r3, #4
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875a:	e22f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800875c:	2308      	movs	r3, #8
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e22b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008764:	2310      	movs	r3, #16
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876a:	e227      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800876c:	2320      	movs	r3, #32
 800876e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008772:	e223      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008774:	2340      	movs	r3, #64	; 0x40
 8008776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877a:	e21f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800877c:	2380      	movs	r3, #128	; 0x80
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	bf00      	nop
 8008784:	e21a      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a6d      	ldr	r2, [pc, #436]	; (8008940 <UART_SetConfig+0x354>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d132      	bne.n	80087f6 <UART_SetConfig+0x20a>
 8008790:	4b6a      	ldr	r3, [pc, #424]	; (800893c <UART_SetConfig+0x350>)
 8008792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	2b05      	cmp	r3, #5
 800879a:	d827      	bhi.n	80087ec <UART_SetConfig+0x200>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <UART_SetConfig+0x1b8>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087bd 	.word	0x080087bd
 80087a8:	080087c5 	.word	0x080087c5
 80087ac:	080087cd 	.word	0x080087cd
 80087b0:	080087d5 	.word	0x080087d5
 80087b4:	080087dd 	.word	0x080087dd
 80087b8:	080087e5 	.word	0x080087e5
 80087bc:	2300      	movs	r3, #0
 80087be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087c2:	e1fb      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ca:	e1f7      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d2:	e1f3      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087da:	e1ef      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087dc:	2320      	movs	r3, #32
 80087de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087e2:	e1eb      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e1e7      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	bf00      	nop
 80087f4:	e1e2      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a52      	ldr	r2, [pc, #328]	; (8008944 <UART_SetConfig+0x358>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d132      	bne.n	8008866 <UART_SetConfig+0x27a>
 8008800:	4b4e      	ldr	r3, [pc, #312]	; (800893c <UART_SetConfig+0x350>)
 8008802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	2b05      	cmp	r3, #5
 800880a:	d827      	bhi.n	800885c <UART_SetConfig+0x270>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <UART_SetConfig+0x228>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008835 	.word	0x08008835
 800881c:	0800883d 	.word	0x0800883d
 8008820:	08008845 	.word	0x08008845
 8008824:	0800884d 	.word	0x0800884d
 8008828:	08008855 	.word	0x08008855
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008832:	e1c3      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008834:	2304      	movs	r3, #4
 8008836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800883a:	e1bf      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008842:	e1bb      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008844:	2310      	movs	r3, #16
 8008846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884a:	e1b7      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800884c:	2320      	movs	r3, #32
 800884e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008852:	e1b3      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885a:	e1af      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800885c:	2380      	movs	r3, #128	; 0x80
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	bf00      	nop
 8008864:	e1aa      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a37      	ldr	r2, [pc, #220]	; (8008948 <UART_SetConfig+0x35c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d132      	bne.n	80088d6 <UART_SetConfig+0x2ea>
 8008870:	4b32      	ldr	r3, [pc, #200]	; (800893c <UART_SetConfig+0x350>)
 8008872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	2b05      	cmp	r3, #5
 800887a:	d827      	bhi.n	80088cc <UART_SetConfig+0x2e0>
 800887c:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x298>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088a5 	.word	0x080088a5
 800888c:	080088ad 	.word	0x080088ad
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088bd 	.word	0x080088bd
 8008898:	080088c5 	.word	0x080088c5
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	e18b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088a4:	2304      	movs	r3, #4
 80088a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088aa:	e187      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088ac:	2308      	movs	r3, #8
 80088ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b2:	e183      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088b4:	2310      	movs	r3, #16
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ba:	e17f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088bc:	2320      	movs	r3, #32
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e17b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e177      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	bf00      	nop
 80088d4:	e172      	b.n	8008bbc <UART_SetConfig+0x5d0>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1c      	ldr	r2, [pc, #112]	; (800894c <UART_SetConfig+0x360>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d144      	bne.n	800896a <UART_SetConfig+0x37e>
 80088e0:	4b16      	ldr	r3, [pc, #88]	; (800893c <UART_SetConfig+0x350>)
 80088e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	2b05      	cmp	r3, #5
 80088ea:	d839      	bhi.n	8008960 <UART_SetConfig+0x374>
 80088ec:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <UART_SetConfig+0x308>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008925 	.word	0x08008925
 8008904:	08008951 	.word	0x08008951
 8008908:	08008959 	.word	0x08008959
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	e153      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891a:	e14f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e14b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892a:	e147      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800892c:	cfff69f3 	.word	0xcfff69f3
 8008930:	58000c00 	.word	0x58000c00
 8008934:	11fff4ff 	.word	0x11fff4ff
 8008938:	40011000 	.word	0x40011000
 800893c:	58024400 	.word	0x58024400
 8008940:	40004400 	.word	0x40004400
 8008944:	40004800 	.word	0x40004800
 8008948:	40004c00 	.word	0x40004c00
 800894c:	40005000 	.word	0x40005000
 8008950:	2320      	movs	r3, #32
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e131      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008958:	2340      	movs	r3, #64	; 0x40
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e12d      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	bf00      	nop
 8008968:	e128      	b.n	8008bbc <UART_SetConfig+0x5d0>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4ab6      	ldr	r2, [pc, #728]	; (8008c48 <UART_SetConfig+0x65c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d178      	bne.n	8008a66 <UART_SetConfig+0x47a>
 8008974:	4bb5      	ldr	r3, [pc, #724]	; (8008c4c <UART_SetConfig+0x660>)
 8008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800897c:	2b28      	cmp	r3, #40	; 0x28
 800897e:	d86d      	bhi.n	8008a5c <UART_SetConfig+0x470>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x39c>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	08008a2d 	.word	0x08008a2d
 800898c:	08008a5d 	.word	0x08008a5d
 8008990:	08008a5d 	.word	0x08008a5d
 8008994:	08008a5d 	.word	0x08008a5d
 8008998:	08008a5d 	.word	0x08008a5d
 800899c:	08008a5d 	.word	0x08008a5d
 80089a0:	08008a5d 	.word	0x08008a5d
 80089a4:	08008a5d 	.word	0x08008a5d
 80089a8:	08008a35 	.word	0x08008a35
 80089ac:	08008a5d 	.word	0x08008a5d
 80089b0:	08008a5d 	.word	0x08008a5d
 80089b4:	08008a5d 	.word	0x08008a5d
 80089b8:	08008a5d 	.word	0x08008a5d
 80089bc:	08008a5d 	.word	0x08008a5d
 80089c0:	08008a5d 	.word	0x08008a5d
 80089c4:	08008a5d 	.word	0x08008a5d
 80089c8:	08008a3d 	.word	0x08008a3d
 80089cc:	08008a5d 	.word	0x08008a5d
 80089d0:	08008a5d 	.word	0x08008a5d
 80089d4:	08008a5d 	.word	0x08008a5d
 80089d8:	08008a5d 	.word	0x08008a5d
 80089dc:	08008a5d 	.word	0x08008a5d
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a45 	.word	0x08008a45
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a5d 	.word	0x08008a5d
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a4d 	.word	0x08008a4d
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	08008a5d 	.word	0x08008a5d
 8008a14:	08008a5d 	.word	0x08008a5d
 8008a18:	08008a5d 	.word	0x08008a5d
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
 8008a24:	08008a5d 	.word	0x08008a5d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e0c3      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a34:	2304      	movs	r3, #4
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e0bf      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a42:	e0bb      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a44:	2310      	movs	r3, #16
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e0b7      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e0b3      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5a:	e0af      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a5c:	2380      	movs	r3, #128	; 0x80
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	bf00      	nop
 8008a64:	e0aa      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a79      	ldr	r2, [pc, #484]	; (8008c50 <UART_SetConfig+0x664>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d132      	bne.n	8008ad6 <UART_SetConfig+0x4ea>
 8008a70:	4b76      	ldr	r3, [pc, #472]	; (8008c4c <UART_SetConfig+0x660>)
 8008a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d827      	bhi.n	8008acc <UART_SetConfig+0x4e0>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x498>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa2:	e08b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aaa:	e087      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008aac:	2308      	movs	r3, #8
 8008aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab2:	e083      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aba:	e07f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e07b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e077      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008acc:	2380      	movs	r3, #128	; 0x80
 8008ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad2:	bf00      	nop
 8008ad4:	e072      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a5e      	ldr	r2, [pc, #376]	; (8008c54 <UART_SetConfig+0x668>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d132      	bne.n	8008b46 <UART_SetConfig+0x55a>
 8008ae0:	4b5a      	ldr	r3, [pc, #360]	; (8008c4c <UART_SetConfig+0x660>)
 8008ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	2b05      	cmp	r3, #5
 8008aea:	d827      	bhi.n	8008b3c <UART_SetConfig+0x550>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <UART_SetConfig+0x508>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b15 	.word	0x08008b15
 8008afc:	08008b1d 	.word	0x08008b1d
 8008b00:	08008b25 	.word	0x08008b25
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b35 	.word	0x08008b35
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b12:	e053      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b14:	2304      	movs	r3, #4
 8008b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1a:	e04f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b22:	e04b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b24:	2310      	movs	r3, #16
 8008b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2a:	e047      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b32:	e043      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b34:	2340      	movs	r3, #64	; 0x40
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3a:	e03f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b3c:	2380      	movs	r3, #128	; 0x80
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b42:	bf00      	nop
 8008b44:	e03a      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a43      	ldr	r2, [pc, #268]	; (8008c58 <UART_SetConfig+0x66c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d132      	bne.n	8008bb6 <UART_SetConfig+0x5ca>
 8008b50:	4b3e      	ldr	r3, [pc, #248]	; (8008c4c <UART_SetConfig+0x660>)
 8008b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d827      	bhi.n	8008bac <UART_SetConfig+0x5c0>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x578>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b7d 	.word	0x08008b7d
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e01b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e017      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e013      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e00f      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e00b      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e007      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	bf00      	nop
 8008bb4:	e002      	b.n	8008bbc <UART_SetConfig+0x5d0>
 8008bb6:	2380      	movs	r3, #128	; 0x80
 8008bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a25      	ldr	r2, [pc, #148]	; (8008c58 <UART_SetConfig+0x66c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	f040 80b8 	bne.w	8008d38 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d019      	beq.n	8008c04 <UART_SetConfig+0x618>
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	dc04      	bgt.n	8008bde <UART_SetConfig+0x5f2>
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d009      	beq.n	8008bec <UART_SetConfig+0x600>
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d00b      	beq.n	8008bf4 <UART_SetConfig+0x608>
 8008bdc:	e042      	b.n	8008c64 <UART_SetConfig+0x678>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d02b      	beq.n	8008c3a <UART_SetConfig+0x64e>
 8008be2:	2b40      	cmp	r3, #64	; 0x40
 8008be4:	d02c      	beq.n	8008c40 <UART_SetConfig+0x654>
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d014      	beq.n	8008c14 <UART_SetConfig+0x628>
 8008bea:	e03b      	b.n	8008c64 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008bec:	f7ff f806 	bl	8007bfc <HAL_RCCEx_GetD3PCLK1Freq>
 8008bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008bf2:	e03d      	b.n	8008c70 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff f815 	bl	8007c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c02:	e035      	b.n	8008c70 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff f959 	bl	8007ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c12:	e02d      	b.n	8008c70 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <UART_SetConfig+0x660>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c20:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <UART_SetConfig+0x660>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	08db      	lsrs	r3, r3, #3
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	4a0c      	ldr	r2, [pc, #48]	; (8008c5c <UART_SetConfig+0x670>)
 8008c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c32:	e01d      	b.n	8008c70 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <UART_SetConfig+0x670>)
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c38:	e01a      	b.n	8008c70 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <UART_SetConfig+0x674>)
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c3e:	e017      	b.n	8008c70 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c46:	e013      	b.n	8008c70 <UART_SetConfig+0x684>
 8008c48:	40011400 	.word	0x40011400
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	40007800 	.word	0x40007800
 8008c54:	40007c00 	.word	0x40007c00
 8008c58:	58000c00 	.word	0x58000c00
 8008c5c:	03d09000 	.word	0x03d09000
 8008c60:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 824d 	beq.w	8009112 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	4aad      	ldr	r2, [pc, #692]	; (8008f34 <UART_SetConfig+0x948>)
 8008c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c8a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	6a3a      	ldr	r2, [r7, #32]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d305      	bcc.n	8008ca8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d903      	bls.n	8008cb0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008cae:	e230      	b.n	8009112 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f04f 0100 	mov.w	r1, #0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	4a9d      	ldr	r2, [pc, #628]	; (8008f34 <UART_SetConfig+0x948>)
 8008cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f04f 0400 	mov.w	r4, #0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4623      	mov	r3, r4
 8008ccc:	f7f7 fb04 	bl	80002d8 <__aeabi_uldivmod>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	f04f 0400 	mov.w	r4, #0
 8008ce0:	0214      	lsls	r4, r2, #8
 8008ce2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008ce6:	020b      	lsls	r3, r1, #8
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6852      	ldr	r2, [r2, #4]
 8008cec:	0852      	lsrs	r2, r2, #1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	eb13 0b01 	adds.w	fp, r3, r1
 8008cf8:	eb44 0c02 	adc.w	ip, r4, r2
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	4661      	mov	r1, ip
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	f7f7 fae4 	bl	80002d8 <__aeabi_uldivmod>
 8008d10:	4603      	mov	r3, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d1c:	d308      	bcc.n	8008d30 <UART_SetConfig+0x744>
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d24:	d204      	bcs.n	8008d30 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	e1f0      	b.n	8009112 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d36:	e1ec      	b.n	8009112 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d40:	f040 8100 	bne.w	8008f44 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008d44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d48:	2b40      	cmp	r3, #64	; 0x40
 8008d4a:	f200 80b7 	bhi.w	8008ebc <UART_SetConfig+0x8d0>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x768>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008e59 	.word	0x08008e59
 8008d58:	08008e61 	.word	0x08008e61
 8008d5c:	08008ebd 	.word	0x08008ebd
 8008d60:	08008ebd 	.word	0x08008ebd
 8008d64:	08008e69 	.word	0x08008e69
 8008d68:	08008ebd 	.word	0x08008ebd
 8008d6c:	08008ebd 	.word	0x08008ebd
 8008d70:	08008ebd 	.word	0x08008ebd
 8008d74:	08008e79 	.word	0x08008e79
 8008d78:	08008ebd 	.word	0x08008ebd
 8008d7c:	08008ebd 	.word	0x08008ebd
 8008d80:	08008ebd 	.word	0x08008ebd
 8008d84:	08008ebd 	.word	0x08008ebd
 8008d88:	08008ebd 	.word	0x08008ebd
 8008d8c:	08008ebd 	.word	0x08008ebd
 8008d90:	08008ebd 	.word	0x08008ebd
 8008d94:	08008e89 	.word	0x08008e89
 8008d98:	08008ebd 	.word	0x08008ebd
 8008d9c:	08008ebd 	.word	0x08008ebd
 8008da0:	08008ebd 	.word	0x08008ebd
 8008da4:	08008ebd 	.word	0x08008ebd
 8008da8:	08008ebd 	.word	0x08008ebd
 8008dac:	08008ebd 	.word	0x08008ebd
 8008db0:	08008ebd 	.word	0x08008ebd
 8008db4:	08008ebd 	.word	0x08008ebd
 8008db8:	08008ebd 	.word	0x08008ebd
 8008dbc:	08008ebd 	.word	0x08008ebd
 8008dc0:	08008ebd 	.word	0x08008ebd
 8008dc4:	08008ebd 	.word	0x08008ebd
 8008dc8:	08008ebd 	.word	0x08008ebd
 8008dcc:	08008ebd 	.word	0x08008ebd
 8008dd0:	08008ebd 	.word	0x08008ebd
 8008dd4:	08008eaf 	.word	0x08008eaf
 8008dd8:	08008ebd 	.word	0x08008ebd
 8008ddc:	08008ebd 	.word	0x08008ebd
 8008de0:	08008ebd 	.word	0x08008ebd
 8008de4:	08008ebd 	.word	0x08008ebd
 8008de8:	08008ebd 	.word	0x08008ebd
 8008dec:	08008ebd 	.word	0x08008ebd
 8008df0:	08008ebd 	.word	0x08008ebd
 8008df4:	08008ebd 	.word	0x08008ebd
 8008df8:	08008ebd 	.word	0x08008ebd
 8008dfc:	08008ebd 	.word	0x08008ebd
 8008e00:	08008ebd 	.word	0x08008ebd
 8008e04:	08008ebd 	.word	0x08008ebd
 8008e08:	08008ebd 	.word	0x08008ebd
 8008e0c:	08008ebd 	.word	0x08008ebd
 8008e10:	08008ebd 	.word	0x08008ebd
 8008e14:	08008ebd 	.word	0x08008ebd
 8008e18:	08008ebd 	.word	0x08008ebd
 8008e1c:	08008ebd 	.word	0x08008ebd
 8008e20:	08008ebd 	.word	0x08008ebd
 8008e24:	08008ebd 	.word	0x08008ebd
 8008e28:	08008ebd 	.word	0x08008ebd
 8008e2c:	08008ebd 	.word	0x08008ebd
 8008e30:	08008ebd 	.word	0x08008ebd
 8008e34:	08008ebd 	.word	0x08008ebd
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08008ebd 	.word	0x08008ebd
 8008e40:	08008ebd 	.word	0x08008ebd
 8008e44:	08008ebd 	.word	0x08008ebd
 8008e48:	08008ebd 	.word	0x08008ebd
 8008e4c:	08008ebd 	.word	0x08008ebd
 8008e50:	08008ebd 	.word	0x08008ebd
 8008e54:	08008eb5 	.word	0x08008eb5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e58:	f7fd ffb6 	bl	8006dc8 <HAL_RCC_GetPCLK1Freq>
 8008e5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e5e:	e033      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e60:	f7fd ffc8 	bl	8006df4 <HAL_RCC_GetPCLK2Freq>
 8008e64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e66:	e02f      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fedb 	bl	8007c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e76:	e027      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff f81f 	bl	8007ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e86:	e01f      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <UART_SetConfig+0x94c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <UART_SetConfig+0x94c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	08db      	lsrs	r3, r3, #3
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	4a27      	ldr	r2, [pc, #156]	; (8008f3c <UART_SetConfig+0x950>)
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ea6:	e00f      	b.n	8008ec8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008ea8:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <UART_SetConfig+0x950>)
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eac:	e00c      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <UART_SetConfig+0x954>)
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb2:	e009      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eba:	e005      	b.n	8008ec8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 8121 	beq.w	8009112 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <UART_SetConfig+0x948>)
 8008ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ee2:	005a      	lsls	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	2b0f      	cmp	r3, #15
 8008efc:	d916      	bls.n	8008f2c <UART_SetConfig+0x940>
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f04:	d212      	bcs.n	8008f2c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f023 030f 	bic.w	r3, r3, #15
 8008f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f28:	60da      	str	r2, [r3, #12]
 8008f2a:	e0f2      	b.n	8009112 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f32:	e0ee      	b.n	8009112 <UART_SetConfig+0xb26>
 8008f34:	08009c00 	.word	0x08009c00
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	03d09000 	.word	0x03d09000
 8008f40:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	f200 80b7 	bhi.w	80090bc <UART_SetConfig+0xad0>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0x968>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08009059 	.word	0x08009059
 8008f58:	08009061 	.word	0x08009061
 8008f5c:	080090bd 	.word	0x080090bd
 8008f60:	080090bd 	.word	0x080090bd
 8008f64:	08009069 	.word	0x08009069
 8008f68:	080090bd 	.word	0x080090bd
 8008f6c:	080090bd 	.word	0x080090bd
 8008f70:	080090bd 	.word	0x080090bd
 8008f74:	08009079 	.word	0x08009079
 8008f78:	080090bd 	.word	0x080090bd
 8008f7c:	080090bd 	.word	0x080090bd
 8008f80:	080090bd 	.word	0x080090bd
 8008f84:	080090bd 	.word	0x080090bd
 8008f88:	080090bd 	.word	0x080090bd
 8008f8c:	080090bd 	.word	0x080090bd
 8008f90:	080090bd 	.word	0x080090bd
 8008f94:	08009089 	.word	0x08009089
 8008f98:	080090bd 	.word	0x080090bd
 8008f9c:	080090bd 	.word	0x080090bd
 8008fa0:	080090bd 	.word	0x080090bd
 8008fa4:	080090bd 	.word	0x080090bd
 8008fa8:	080090bd 	.word	0x080090bd
 8008fac:	080090bd 	.word	0x080090bd
 8008fb0:	080090bd 	.word	0x080090bd
 8008fb4:	080090bd 	.word	0x080090bd
 8008fb8:	080090bd 	.word	0x080090bd
 8008fbc:	080090bd 	.word	0x080090bd
 8008fc0:	080090bd 	.word	0x080090bd
 8008fc4:	080090bd 	.word	0x080090bd
 8008fc8:	080090bd 	.word	0x080090bd
 8008fcc:	080090bd 	.word	0x080090bd
 8008fd0:	080090bd 	.word	0x080090bd
 8008fd4:	080090af 	.word	0x080090af
 8008fd8:	080090bd 	.word	0x080090bd
 8008fdc:	080090bd 	.word	0x080090bd
 8008fe0:	080090bd 	.word	0x080090bd
 8008fe4:	080090bd 	.word	0x080090bd
 8008fe8:	080090bd 	.word	0x080090bd
 8008fec:	080090bd 	.word	0x080090bd
 8008ff0:	080090bd 	.word	0x080090bd
 8008ff4:	080090bd 	.word	0x080090bd
 8008ff8:	080090bd 	.word	0x080090bd
 8008ffc:	080090bd 	.word	0x080090bd
 8009000:	080090bd 	.word	0x080090bd
 8009004:	080090bd 	.word	0x080090bd
 8009008:	080090bd 	.word	0x080090bd
 800900c:	080090bd 	.word	0x080090bd
 8009010:	080090bd 	.word	0x080090bd
 8009014:	080090bd 	.word	0x080090bd
 8009018:	080090bd 	.word	0x080090bd
 800901c:	080090bd 	.word	0x080090bd
 8009020:	080090bd 	.word	0x080090bd
 8009024:	080090bd 	.word	0x080090bd
 8009028:	080090bd 	.word	0x080090bd
 800902c:	080090bd 	.word	0x080090bd
 8009030:	080090bd 	.word	0x080090bd
 8009034:	080090bd 	.word	0x080090bd
 8009038:	080090bd 	.word	0x080090bd
 800903c:	080090bd 	.word	0x080090bd
 8009040:	080090bd 	.word	0x080090bd
 8009044:	080090bd 	.word	0x080090bd
 8009048:	080090bd 	.word	0x080090bd
 800904c:	080090bd 	.word	0x080090bd
 8009050:	080090bd 	.word	0x080090bd
 8009054:	080090b5 	.word	0x080090b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009058:	f7fd feb6 	bl	8006dc8 <HAL_RCC_GetPCLK1Freq>
 800905c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800905e:	e033      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009060:	f7fd fec8 	bl	8006df4 <HAL_RCC_GetPCLK2Freq>
 8009064:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009066:	e02f      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009068:	f107 0314 	add.w	r3, r7, #20
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fddb 	bl	8007c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009076:	e027      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe ff1f 	bl	8007ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009086:	e01f      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009088:	4b2c      	ldr	r3, [pc, #176]	; (800913c <UART_SetConfig+0xb50>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d009      	beq.n	80090a8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009094:	4b29      	ldr	r3, [pc, #164]	; (800913c <UART_SetConfig+0xb50>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	4a28      	ldr	r2, [pc, #160]	; (8009140 <UART_SetConfig+0xb54>)
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a6:	e00f      	b.n	80090c8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80090a8:	4b25      	ldr	r3, [pc, #148]	; (8009140 <UART_SetConfig+0xb54>)
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ac:	e00c      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090ae:	4b25      	ldr	r3, [pc, #148]	; (8009144 <UART_SetConfig+0xb58>)
 80090b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090b2:	e009      	b.n	80090c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ba:	e005      	b.n	80090c8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090c6:	bf00      	nop
    }

    if (pclk != 0U)
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d021      	beq.n	8009112 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	4a1d      	ldr	r2, [pc, #116]	; (8009148 <UART_SetConfig+0xb5c>)
 80090d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d8:	461a      	mov	r2, r3
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	085b      	lsrs	r3, r3, #1
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	2b0f      	cmp	r3, #15
 80090f8:	d908      	bls.n	800910c <UART_SetConfig+0xb20>
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009100:	d204      	bcs.n	800910c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009108:	60da      	str	r2, [r3, #12]
 800910a:	e002      	b.n	8009112 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800912e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009132:	4618      	mov	r0, r3
 8009134:	3738      	adds	r7, #56	; 0x38
 8009136:	46bd      	mov	sp, r7
 8009138:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800913c:	58024400 	.word	0x58024400
 8009140:	03d09000 	.word	0x03d09000
 8009144:	003d0900 	.word	0x003d0900
 8009148:	08009c00 	.word	0x08009c00

0800914c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01a      	beq.n	8009262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800924a:	d10a      	bne.n	8009262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	605a      	str	r2, [r3, #4]
  }
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af02      	add	r7, sp, #8
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80092a0:	f7f7 ff46 	bl	8001130 <HAL_GetTick>
 80092a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d10e      	bne.n	80092d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f82c 	bl	8009320 <UART_WaitOnFlagUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e022      	b.n	8009318 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d10e      	bne.n	80092fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f816 	bl	8009320 <UART_WaitOnFlagUntilTimeout>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e00c      	b.n	8009318 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	4613      	mov	r3, r2
 800932e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009330:	e062      	b.n	80093f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009338:	d05e      	beq.n	80093f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800933a:	f7f7 fef9 	bl	8001130 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <UART_WaitOnFlagUntilTimeout+0x30>
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11d      	bne.n	800938c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800935e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0201 	bic.w	r2, r2, #1
 800936e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e045      	b.n	8009418 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d02e      	beq.n	80093f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093a8:	d126      	bne.n	80093f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e00f      	b.n	8009418 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	429a      	cmp	r2, r3
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	461a      	mov	r2, r3
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	429a      	cmp	r2, r3
 8009414:	d08d      	beq.n	8009332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_UARTEx_DisableFifoMode+0x16>
 8009432:	2302      	movs	r3, #2
 8009434:	e027      	b.n	8009486 <HAL_UARTEx_DisableFifoMode+0x66>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2224      	movs	r2, #36	; 0x24
 8009442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0201 	bic.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009464:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e02d      	b.n	8009506 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2224      	movs	r2, #36	; 0x24
 80094b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f850 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009522:	2302      	movs	r3, #2
 8009524:	e02d      	b.n	8009582 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	; 0x24
 8009532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0201 	bic.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f812 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b089      	sub	sp, #36	; 0x24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009594:	4a2f      	ldr	r2, [pc, #188]	; (8009654 <UARTEx_SetNbDataToProcess+0xc8>)
 8009596:	f107 0314 	add.w	r3, r7, #20
 800959a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800959e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80095a2:	4a2d      	ldr	r2, [pc, #180]	; (8009658 <UARTEx_SetNbDataToProcess+0xcc>)
 80095a4:	f107 030c 	add.w	r3, r7, #12
 80095a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d108      	bne.n	80095ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095c8:	e03d      	b.n	8009646 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ca:	2310      	movs	r3, #16
 80095cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095ce:	2310      	movs	r3, #16
 80095d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	0e5b      	lsrs	r3, r3, #25
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	0f5b      	lsrs	r3, r3, #29
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80095f2:	7fbb      	ldrb	r3, [r7, #30]
 80095f4:	7f3a      	ldrb	r2, [r7, #28]
 80095f6:	f107 0120 	add.w	r1, r7, #32
 80095fa:	440a      	add	r2, r1
 80095fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009600:	fb02 f303 	mul.w	r3, r2, r3
 8009604:	7f3a      	ldrb	r2, [r7, #28]
 8009606:	f107 0120 	add.w	r1, r7, #32
 800960a:	440a      	add	r2, r1
 800960c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009610:	fb93 f3f2 	sdiv	r3, r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800961c:	7ffb      	ldrb	r3, [r7, #31]
 800961e:	7f7a      	ldrb	r2, [r7, #29]
 8009620:	f107 0120 	add.w	r1, r7, #32
 8009624:	440a      	add	r2, r1
 8009626:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	7f7a      	ldrb	r2, [r7, #29]
 8009630:	f107 0120 	add.w	r1, r7, #32
 8009634:	440a      	add	r2, r1
 8009636:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800963a:	fb93 f3f2 	sdiv	r3, r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009646:	bf00      	nop
 8009648:	3724      	adds	r7, #36	; 0x24
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	08009bd8 	.word	0x08009bd8
 8009658:	08009be0 	.word	0x08009be0

0800965c <OV2640_Init>:
static void OV2640_AutoExposure(uint8_t level);
static void OV2640_JPEGConfig(ImageFormat_TypeDef ImageFormat);
static void OV2640_BrightnessConfig(uint8_t Brightness);
static void  ov2640_config(void);
uint8_t OV2640_Init(I2C_HandleTypeDef *hi2c2, DCMI_HandleTypeDef *hdcmi, UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
	mI2C = hi2c2;
 8009668:	4a0b      	ldr	r2, [pc, #44]	; (8009698 <OV2640_Init+0x3c>)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6013      	str	r3, [r2, #0]
	mHuart = huart;
 800966e:	4a0b      	ldr	r2, [pc, #44]	; (800969c <OV2640_Init+0x40>)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6013      	str	r3, [r2, #0]
	DCMI_hdcmi = hdcmi;
 8009674:	4a0a      	ldr	r2, [pc, #40]	; (80096a0 <OV2640_Init+0x44>)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6013      	str	r3, [r2, #0]
	if(OV2640_ReadID(&OV2640ID))return 1;
 800967a:	480a      	ldr	r0, [pc, #40]	; (80096a4 <OV2640_Init+0x48>)
 800967c:	f000 f814 	bl	80096a8 <OV2640_ReadID>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <OV2640_Init+0x2e>
 8009686:	2301      	movs	r3, #1
 8009688:	e002      	b.n	8009690 <OV2640_Init+0x34>
	ov2640_config();
 800968a:	f000 f88f 	bl	80097ac <ov2640_config>
	return 0;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	2400a1dc 	.word	0x2400a1dc
 800969c:	2400a1d4 	.word	0x2400a1d4
 80096a0:	2400a1d0 	.word	0x2400a1d0
 80096a4:	2400a1d8 	.word	0x2400a1d8

080096a8 <OV2640_ReadID>:

uint8_t OV2640_ReadID(OV2640_IDTypeDef* OV2640ID)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
	i2c_sent(OV2640_DSP_RA_DLMT, 0x01);
 80096b0:	2101      	movs	r1, #1
 80096b2:	20ff      	movs	r0, #255	; 0xff
 80096b4:	f000 f83a 	bl	800972c <i2c_sent>

	OV2640ID->Manufacturer_ID1 =i2c_receive(OV2640_SENSOR_MIDH);
 80096b8:	201c      	movs	r0, #28
 80096ba:	f000 f857 	bl	800976c <i2c_receive>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	701a      	strb	r2, [r3, #0]
	if(OV2640ID->Manufacturer_ID1 != 0x7F)return 1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b7f      	cmp	r3, #127	; 0x7f
 80096cc:	d001      	beq.n	80096d2 <OV2640_ReadID+0x2a>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e027      	b.n	8009722 <OV2640_ReadID+0x7a>

	OV2640ID->Manufacturer_ID2 =i2c_receive(OV2640_SENSOR_MIDL);
 80096d2:	201d      	movs	r0, #29
 80096d4:	f000 f84a 	bl	800976c <i2c_receive>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	705a      	strb	r2, [r3, #1]
	if(OV2640ID->Manufacturer_ID2 != 0xA2)return 2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2ba2      	cmp	r3, #162	; 0xa2
 80096e6:	d001      	beq.n	80096ec <OV2640_ReadID+0x44>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e01a      	b.n	8009722 <OV2640_ReadID+0x7a>

	OV2640ID->Version =i2c_receive(OV2640_SENSOR_PIDH);
 80096ec:	200a      	movs	r0, #10
 80096ee:	f000 f83d 	bl	800976c <i2c_receive>
 80096f2:	4603      	mov	r3, r0
 80096f4:	461a      	mov	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	709a      	strb	r2, [r3, #2]
	if(OV2640ID->Version != 0x26)return 3;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	2b26      	cmp	r3, #38	; 0x26
 8009700:	d001      	beq.n	8009706 <OV2640_ReadID+0x5e>
 8009702:	2303      	movs	r3, #3
 8009704:	e00d      	b.n	8009722 <OV2640_ReadID+0x7a>

	OV2640ID->PID =i2c_receive(OV2640_SENSOR_PIDL);
 8009706:	200b      	movs	r0, #11
 8009708:	f000 f830 	bl	800976c <i2c_receive>
 800970c:	4603      	mov	r3, r0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	70da      	strb	r2, [r3, #3]
	if(OV2640ID->PID != 0x42)return 4;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	2b42      	cmp	r3, #66	; 0x42
 800971a:	d001      	beq.n	8009720 <OV2640_ReadID+0x78>
 800971c:	2304      	movs	r3, #4
 800971e:	e000      	b.n	8009722 <OV2640_ReadID+0x7a>

	return 0;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <i2c_sent>:

void i2c_sent(uint8_t sub_address,uint8_t data)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	4603      	mov	r3, r0
 8009734:	460a      	mov	r2, r1
 8009736:	71fb      	strb	r3, [r7, #7]
 8009738:	4613      	mov	r3, r2
 800973a:	71bb      	strb	r3, [r7, #6]
	uint8_t sent_data[2];
	sent_data[0]=sub_address;
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	733b      	strb	r3, [r7, #12]
	sent_data[1]=data;
 8009740:	79bb      	ldrb	r3, [r7, #6]
 8009742:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(mI2C, (uint16_t)I2C_ADDRESS, (uint8_t*)sent_data, 2, 10000);
 8009744:	4b07      	ldr	r3, [pc, #28]	; (8009764 <i2c_sent+0x38>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	4b07      	ldr	r3, [pc, #28]	; (8009768 <i2c_sent+0x3c>)
 800974a:	8819      	ldrh	r1, [r3, #0]
 800974c:	f107 020c 	add.w	r2, r7, #12
 8009750:	f242 7310 	movw	r3, #10000	; 0x2710
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2302      	movs	r3, #2
 8009758:	f7fb febc 	bl	80054d4 <HAL_I2C_Master_Transmit>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	2400a1dc 	.word	0x2400a1dc
 8009768:	2400000e 	.word	0x2400000e

0800976c <i2c_receive>:

uint8_t i2c_receive(uint8_t sub_address)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af04      	add	r7, sp, #16
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_I2C_Mem_Read(mI2C,(uint16_t)I2C_ADDRESS,sub_address,1,(uint8_t*)&data,1,10000);
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <i2c_receive+0x38>)
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <i2c_receive+0x3c>)
 800977c:	8819      	ldrh	r1, [r3, #0]
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	b29a      	uxth	r2, r3
 8009782:	f242 7310 	movw	r3, #10000	; 0x2710
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	2301      	movs	r3, #1
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	f107 030f 	add.w	r3, r7, #15
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	2301      	movs	r3, #1
 8009794:	f7fb ff92 	bl	80056bc <HAL_I2C_Mem_Read>
	return data;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2400a1dc 	.word	0x2400a1dc
 80097a8:	2400000e 	.word	0x2400000e

080097ac <ov2640_config>:

void ov2640_config(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
	OV2640_JPEGConfig(JPEG_176x144);
 80097b0:	2003      	movs	r0, #3
 80097b2:	f000 f809 	bl	80097c8 <OV2640_JPEGConfig>
	OV2640_BrightnessConfig(0x20);
 80097b6:	2020      	movs	r0, #32
 80097b8:	f000 f8fc 	bl	80099b4 <OV2640_BrightnessConfig>
	OV2640_AutoExposure(0);
 80097bc:	2000      	movs	r0, #0
 80097be:	f000 f91b 	bl	80099f8 <OV2640_AutoExposure>

}
 80097c2:	bf00      	nop
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <OV2640_JPEGConfig>:

void OV2640_JPEGConfig(ImageFormat_TypeDef ImageFormat)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  //OV2640_Reset();
  //delay_ms(200);

  for(i=0; i<(sizeof(OV2640_JPEG_INIT)/2); i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e00e      	b.n	80097f6 <OV2640_JPEGConfig+0x2e>
  {
    i2c_sent(OV2640_JPEG_INIT[i][0], OV2640_JPEG_INIT[i][1]);
 80097d8:	4a6e      	ldr	r2, [pc, #440]	; (8009994 <OV2640_JPEGConfig+0x1cc>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80097e0:	4a6c      	ldr	r2, [pc, #432]	; (8009994 <OV2640_JPEGConfig+0x1cc>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	4619      	mov	r1, r3
 80097ec:	f7ff ff9e 	bl	800972c <i2c_sent>
  for(i=0; i<(sizeof(OV2640_JPEG_INIT)/2); i++)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2bbd      	cmp	r3, #189	; 0xbd
 80097fa:	d9ed      	bls.n	80097d8 <OV2640_JPEGConfig+0x10>
		//delay_ms(1);
  }


  for(i=0; i<(sizeof(OV2640_YUV422)/2); i++)
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	e00e      	b.n	8009820 <OV2640_JPEGConfig+0x58>
  {
    i2c_sent(OV2640_YUV422[i][0], OV2640_YUV422[i][1]);
 8009802:	4a65      	ldr	r2, [pc, #404]	; (8009998 <OV2640_JPEGConfig+0x1d0>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800980a:	4a63      	ldr	r2, [pc, #396]	; (8009998 <OV2640_JPEGConfig+0x1d0>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	4413      	add	r3, r2
 8009812:	785b      	ldrb	r3, [r3, #1]
 8009814:	4619      	mov	r1, r3
 8009816:	f7ff ff89 	bl	800972c <i2c_sent>
  for(i=0; i<(sizeof(OV2640_YUV422)/2); i++)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b08      	cmp	r3, #8
 8009824:	d9ed      	bls.n	8009802 <OV2640_JPEGConfig+0x3a>
		//delay_ms(1);
  }

  i2c_sent(0xff, 0x01);
 8009826:	2101      	movs	r1, #1
 8009828:	20ff      	movs	r0, #255	; 0xff
 800982a:	f7ff ff7f 	bl	800972c <i2c_sent>
  i2c_sent(0x15, 0x00);
 800982e:	2100      	movs	r1, #0
 8009830:	2015      	movs	r0, #21
 8009832:	f7ff ff7b 	bl	800972c <i2c_sent>


  for(i=0; i<(sizeof(OV2640_JPEG)/2); i++)
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e00e      	b.n	800985a <OV2640_JPEGConfig+0x92>
  {
    i2c_sent(OV2640_JPEG[i][0], OV2640_JPEG[i][1]);
 800983c:	4a57      	ldr	r2, [pc, #348]	; (800999c <OV2640_JPEGConfig+0x1d4>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8009844:	4a55      	ldr	r2, [pc, #340]	; (800999c <OV2640_JPEGConfig+0x1d4>)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4413      	add	r3, r2
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	4619      	mov	r1, r3
 8009850:	f7ff ff6c 	bl	800972c <i2c_sent>
  for(i=0; i<(sizeof(OV2640_JPEG)/2); i++)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b07      	cmp	r3, #7
 800985e:	d9ed      	bls.n	800983c <OV2640_JPEGConfig+0x74>
		//delay_ms(1);
  }

  //delay_ms(100);

  switch(ImageFormat)
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	3b02      	subs	r3, #2
 8009864:	2b04      	cmp	r3, #4
 8009866:	d87b      	bhi.n	8009960 <OV2640_JPEGConfig+0x198>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <OV2640_JPEGConfig+0xa8>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009885 	.word	0x08009885
 8009874:	080098b1 	.word	0x080098b1
 8009878:	080098dd 	.word	0x080098dd
 800987c:	08009909 	.word	0x08009909
 8009880:	08009935 	.word	0x08009935
  {
    case JPEG_160x120:
    {
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e00e      	b.n	80098a8 <OV2640_JPEGConfig+0xe0>
      {
        i2c_sent(OV2640_160x120_JPEG[i][0], OV2640_160x120_JPEG[i][1]);
 800988a:	4a45      	ldr	r2, [pc, #276]	; (80099a0 <OV2640_JPEGConfig+0x1d8>)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8009892:	4a43      	ldr	r2, [pc, #268]	; (80099a0 <OV2640_JPEGConfig+0x1d8>)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	4413      	add	r3, r2
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	4619      	mov	r1, r3
 800989e:	f7ff ff45 	bl	800972c <i2c_sent>
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3301      	adds	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b26      	cmp	r3, #38	; 0x26
 80098ac:	d9ed      	bls.n	800988a <OV2640_JPEGConfig+0xc2>
		//delay_ms(1);
      }
      break;
 80098ae:	e06d      	b.n	800998c <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_176x144:
    {
      for(i=0; i<(sizeof(OV2640_176x144_JPEG)/2); i++)
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e00e      	b.n	80098d4 <OV2640_JPEGConfig+0x10c>
      {
        i2c_sent(OV2640_176x144_JPEG[i][0], OV2640_176x144_JPEG[i][1]);
 80098b6:	4a3b      	ldr	r2, [pc, #236]	; (80099a4 <OV2640_JPEGConfig+0x1dc>)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80098be:	4a39      	ldr	r2, [pc, #228]	; (80099a4 <OV2640_JPEGConfig+0x1dc>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	4619      	mov	r1, r3
 80098ca:	f7ff ff2f 	bl	800972c <i2c_sent>
      for(i=0; i<(sizeof(OV2640_176x144_JPEG)/2); i++)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b26      	cmp	r3, #38	; 0x26
 80098d8:	d9ed      	bls.n	80098b6 <OV2640_JPEGConfig+0xee>
      }
      break;
 80098da:	e057      	b.n	800998c <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_320x240:
    {
      for(i=0; i<(sizeof(OV2640_320x240_JPEG)/2); i++)
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e00e      	b.n	8009900 <OV2640_JPEGConfig+0x138>
			{
				i2c_sent(OV2640_320x240_JPEG[i][0], OV2640_320x240_JPEG[i][1]);
 80098e2:	4a31      	ldr	r2, [pc, #196]	; (80099a8 <OV2640_JPEGConfig+0x1e0>)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80098ea:	4a2f      	ldr	r2, [pc, #188]	; (80099a8 <OV2640_JPEGConfig+0x1e0>)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	4413      	add	r3, r2
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7ff ff19 	bl	800972c <i2c_sent>
      for(i=0; i<(sizeof(OV2640_320x240_JPEG)/2); i++)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b27      	cmp	r3, #39	; 0x27
 8009904:	d9ed      	bls.n	80098e2 <OV2640_JPEGConfig+0x11a>
				//delay_ms(1);
			}
      break;
 8009906:	e041      	b.n	800998c <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_352x288:
    {
      for(i=0; i<(sizeof(OV2640_352x288_JPEG)/2); i++)
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e00e      	b.n	800992c <OV2640_JPEGConfig+0x164>
      {
        i2c_sent(OV2640_352x288_JPEG[i][0], OV2640_352x288_JPEG[i][1]);
 800990e:	4a27      	ldr	r2, [pc, #156]	; (80099ac <OV2640_JPEGConfig+0x1e4>)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8009916:	4a25      	ldr	r2, [pc, #148]	; (80099ac <OV2640_JPEGConfig+0x1e4>)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	4413      	add	r3, r2
 800991e:	785b      	ldrb	r3, [r3, #1]
 8009920:	4619      	mov	r1, r3
 8009922:	f7ff ff03 	bl	800972c <i2c_sent>
      for(i=0; i<(sizeof(OV2640_352x288_JPEG)/2); i++)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b26      	cmp	r3, #38	; 0x26
 8009930:	d9ed      	bls.n	800990e <OV2640_JPEGConfig+0x146>
      }
      break;
 8009932:	e02b      	b.n	800998c <OV2640_JPEGConfig+0x1c4>
    }
    case JPEG_800x600:
		{
			for(i=0; i<(sizeof(OV2640_800x600_JPEG)/2); i++)
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e00e      	b.n	8009958 <OV2640_JPEGConfig+0x190>
			{
				i2c_sent(OV2640_800x600_JPEG[i][0], OV2640_800x600_JPEG[i][1]);
 800993a:	4a1d      	ldr	r2, [pc, #116]	; (80099b0 <OV2640_JPEGConfig+0x1e8>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8009942:	4a1b      	ldr	r2, [pc, #108]	; (80099b0 <OV2640_JPEGConfig+0x1e8>)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	4413      	add	r3, r2
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	4619      	mov	r1, r3
 800994e:	f7ff feed 	bl	800972c <i2c_sent>
			for(i=0; i<(sizeof(OV2640_800x600_JPEG)/2); i++)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b27      	cmp	r3, #39	; 0x27
 800995c:	d9ed      	bls.n	800993a <OV2640_JPEGConfig+0x172>
			//delay_ms(1);
			}
			break;
 800995e:	e015      	b.n	800998c <OV2640_JPEGConfig+0x1c4>
		}

    default:
    {
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e00e      	b.n	8009984 <OV2640_JPEGConfig+0x1bc>
      {
        i2c_sent(OV2640_160x120_JPEG[i][0], OV2640_160x120_JPEG[i][1]);
 8009966:	4a0e      	ldr	r2, [pc, #56]	; (80099a0 <OV2640_JPEGConfig+0x1d8>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800996e:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <OV2640_JPEGConfig+0x1d8>)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	4619      	mov	r1, r3
 800997a:	f7ff fed7 	bl	800972c <i2c_sent>
      for(i=0; i<(sizeof(OV2640_160x120_JPEG)/2); i++)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b26      	cmp	r3, #38	; 0x26
 8009988:	d9ed      	bls.n	8009966 <OV2640_JPEGConfig+0x19e>
      }
      break;
 800998a:	bf00      	nop
    }
  }
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	08009c18 	.word	0x08009c18
 8009998:	08009d94 	.word	0x08009d94
 800999c:	08009da8 	.word	0x08009da8
 80099a0:	08009db8 	.word	0x08009db8
 80099a4:	08009e08 	.word	0x08009e08
 80099a8:	08009e58 	.word	0x08009e58
 80099ac:	08009ef8 	.word	0x08009ef8
 80099b0:	08009ea8 	.word	0x08009ea8

080099b4 <OV2640_BrightnessConfig>:

void OV2640_BrightnessConfig(uint8_t Brightness)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	71fb      	strb	r3, [r7, #7]
  i2c_sent(0xff, 0x00);
 80099be:	2100      	movs	r1, #0
 80099c0:	20ff      	movs	r0, #255	; 0xff
 80099c2:	f7ff feb3 	bl	800972c <i2c_sent>
  i2c_sent(0x7c, 0x00);
 80099c6:	2100      	movs	r1, #0
 80099c8:	207c      	movs	r0, #124	; 0x7c
 80099ca:	f7ff feaf 	bl	800972c <i2c_sent>
  i2c_sent(0x7d, 0x04);
 80099ce:	2104      	movs	r1, #4
 80099d0:	207d      	movs	r0, #125	; 0x7d
 80099d2:	f7ff feab 	bl	800972c <i2c_sent>
  i2c_sent(0x7c, 0x09);
 80099d6:	2109      	movs	r1, #9
 80099d8:	207c      	movs	r0, #124	; 0x7c
 80099da:	f7ff fea7 	bl	800972c <i2c_sent>
  i2c_sent(0x7d, Brightness);
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	4619      	mov	r1, r3
 80099e2:	207d      	movs	r0, #125	; 0x7d
 80099e4:	f7ff fea2 	bl	800972c <i2c_sent>
  i2c_sent(0x7d, 0x00);
 80099e8:	2100      	movs	r1, #0
 80099ea:	207d      	movs	r0, #125	; 0x7d
 80099ec:	f7ff fe9e 	bl	800972c <i2c_sent>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <OV2640_AutoExposure>:

void OV2640_AutoExposure(uint8_t level)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
	switch(level)
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d821      	bhi.n	8009a4c <OV2640_AutoExposure+0x54>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <OV2640_AutoExposure+0x18>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a25 	.word	0x08009a25
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a45 	.word	0x08009a45
	{
		case 0:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL0);
 8009a24:	480d      	ldr	r0, [pc, #52]	; (8009a5c <OV2640_AutoExposure+0x64>)
 8009a26:	f000 f823 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a2a:	e013      	b.n	8009a54 <OV2640_AutoExposure+0x5c>
		case 1:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL1);
 8009a2c:	480c      	ldr	r0, [pc, #48]	; (8009a60 <OV2640_AutoExposure+0x68>)
 8009a2e:	f000 f81f 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a32:	e00f      	b.n	8009a54 <OV2640_AutoExposure+0x5c>
		case 2:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL2);
 8009a34:	480b      	ldr	r0, [pc, #44]	; (8009a64 <OV2640_AutoExposure+0x6c>)
 8009a36:	f000 f81b 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a3a:	e00b      	b.n	8009a54 <OV2640_AutoExposure+0x5c>
		case 3:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL3);
 8009a3c:	480a      	ldr	r0, [pc, #40]	; (8009a68 <OV2640_AutoExposure+0x70>)
 8009a3e:	f000 f817 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a42:	e007      	b.n	8009a54 <OV2640_AutoExposure+0x5c>
		case 4:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL4);
 8009a44:	4809      	ldr	r0, [pc, #36]	; (8009a6c <OV2640_AutoExposure+0x74>)
 8009a46:	f000 f813 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a4a:	e003      	b.n	8009a54 <OV2640_AutoExposure+0x5c>
		default:
			SCCB_WriteRegs(OV2640_AUTOEXPOSURE_LEVEL0);
 8009a4c:	4803      	ldr	r0, [pc, #12]	; (8009a5c <OV2640_AutoExposure+0x64>)
 8009a4e:	f000 f80f 	bl	8009a70 <SCCB_WriteRegs>
			break;
 8009a52:	bf00      	nop
	}

}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	08009f48 	.word	0x08009f48
 8009a60:	08009f58 	.word	0x08009f58
 8009a64:	08009f68 	.word	0x08009f68
 8009a68:	08009f78 	.word	0x08009f78
 8009a6c:	08009f88 	.word	0x08009f88

08009a70 <SCCB_WriteRegs>:

void SCCB_WriteRegs(const uint8_t* pbuf)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if((*pbuf == 0) && (*(pbuf + 1) == 0))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <SCCB_WriteRegs+0x1a>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3301      	adds	r3, #1
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <SCCB_WriteRegs+0x32>
		{
			break;
		}
		else
		{
			i2c_sent((uint8_t)*pbuf++, (uint8_t)*pbuf++);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	7818      	ldrb	r0, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f7ff fe46 	bl	800972c <i2c_sent>
		if((*pbuf == 0) && (*(pbuf + 1) == 0))
 8009aa0:	e7ea      	b.n	8009a78 <SCCB_WriteRegs+0x8>
		}
	}
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <StartOV2640>:
{
	osSemaphoreRelease(sem_TakePhoto);
}*/

void StartOV2640()//拍照的线程
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 8009ab0:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <StartOV2640+0x38>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <StartOV2640+0x38>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 8009ac4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4807      	ldr	r0, [pc, #28]	; (8009ae8 <StartOV2640+0x3c>)
 8009acc:	f000 f870 	bl	8009bb0 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 8009ad0:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <StartOV2640+0x38>)
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	4a04      	ldr	r2, [pc, #16]	; (8009ae8 <StartOV2640+0x3c>)
 8009ad6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009ada:	2102      	movs	r1, #2
 8009adc:	f7f7 fcec 	bl	80014b8 <HAL_DCMI_Start_DMA>

}
 8009ae0:	bf00      	nop
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	2400a1d0 	.word	0x2400a1d0
 8009ae8:	2400002c 	.word	0x2400002c

08009aec <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 8009af4:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <HAL_DCMI_FrameEventCallback+0x6c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f7 fdff 	bl	80016fc <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 8009afe:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <HAL_DCMI_FrameEventCallback+0x6c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7f7 fd9a 	bl	800163c <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 8009b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b0c:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 8009b0e:	e009      	b.n	8009b24 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	4a11      	ldr	r2, [pc, #68]	; (8009b5c <HAL_DCMI_FrameEventCallback+0x70>)
 8009b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dcf2      	bgt.n	8009b10 <HAL_DCMI_FrameEventCallback+0x24>
 8009b2a:	e000      	b.n	8009b2e <HAL_DCMI_FrameEventCallback+0x42>
			break;
 8009b2c:	bf00      	nop
	}
	pictureLength*=4;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 8009b34:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <HAL_DCMI_FrameEventCallback+0x74>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d007      	beq.n	8009b4c <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 8009b3c:	4b08      	ldr	r3, [pc, #32]	; (8009b60 <HAL_DCMI_FrameEventCallback+0x74>)
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <HAL_DCMI_FrameEventCallback+0x78>)
 8009b46:	4905      	ldr	r1, [pc, #20]	; (8009b5c <HAL_DCMI_FrameEventCallback+0x70>)
 8009b48:	f7fe fcba 	bl	80084c0 <HAL_UART_Transmit>

	StartOV2640();
 8009b4c:	f7ff ffae 	bl	8009aac <StartOV2640>
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	2400a1d0 	.word	0x2400a1d0
 8009b5c:	2400002c 	.word	0x2400002c
 8009b60:	2400a1d4 	.word	0x2400a1d4
 8009b64:	000186a0 	.word	0x000186a0

08009b68 <__libc_init_array>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	4e0d      	ldr	r6, [pc, #52]	; (8009ba0 <__libc_init_array+0x38>)
 8009b6c:	4c0d      	ldr	r4, [pc, #52]	; (8009ba4 <__libc_init_array+0x3c>)
 8009b6e:	1ba4      	subs	r4, r4, r6
 8009b70:	10a4      	asrs	r4, r4, #2
 8009b72:	2500      	movs	r5, #0
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d109      	bne.n	8009b8c <__libc_init_array+0x24>
 8009b78:	4e0b      	ldr	r6, [pc, #44]	; (8009ba8 <__libc_init_array+0x40>)
 8009b7a:	4c0c      	ldr	r4, [pc, #48]	; (8009bac <__libc_init_array+0x44>)
 8009b7c:	f000 f820 	bl	8009bc0 <_init>
 8009b80:	1ba4      	subs	r4, r4, r6
 8009b82:	10a4      	asrs	r4, r4, #2
 8009b84:	2500      	movs	r5, #0
 8009b86:	42a5      	cmp	r5, r4
 8009b88:	d105      	bne.n	8009b96 <__libc_init_array+0x2e>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b90:	4798      	blx	r3
 8009b92:	3501      	adds	r5, #1
 8009b94:	e7ee      	b.n	8009b74 <__libc_init_array+0xc>
 8009b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b9a:	4798      	blx	r3
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	e7f2      	b.n	8009b86 <__libc_init_array+0x1e>
 8009ba0:	08009fa0 	.word	0x08009fa0
 8009ba4:	08009fa0 	.word	0x08009fa0
 8009ba8:	08009fa0 	.word	0x08009fa0
 8009bac:	08009fa4 	.word	0x08009fa4

08009bb0 <memset>:
 8009bb0:	4402      	add	r2, r0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d100      	bne.n	8009bba <memset+0xa>
 8009bb8:	4770      	bx	lr
 8009bba:	f803 1b01 	strb.w	r1, [r3], #1
 8009bbe:	e7f9      	b.n	8009bb4 <memset+0x4>

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
